/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./resources/assets/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/polyfill/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@babel/polyfill/lib/index.js ***!
  \***************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./noConflict */ "./node_modules/@babel/polyfill/lib/noConflict.js");

var _global = _interopRequireDefault(__webpack_require__(/*! core-js/library/fn/global */ "./node_modules/core-js/library/fn/global.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { "default": obj };
}

if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

_global["default"]._babelPolyfill = true;

/***/ }),

/***/ "./node_modules/@babel/polyfill/lib/noConflict.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/polyfill/lib/noConflict.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! core-js/es6 */ "./node_modules/core-js/es6/index.js");

__webpack_require__(/*! core-js/fn/array/includes */ "./node_modules/core-js/fn/array/includes.js");

__webpack_require__(/*! core-js/fn/array/flat-map */ "./node_modules/core-js/fn/array/flat-map.js");

__webpack_require__(/*! core-js/fn/string/pad-start */ "./node_modules/core-js/fn/string/pad-start.js");

__webpack_require__(/*! core-js/fn/string/pad-end */ "./node_modules/core-js/fn/string/pad-end.js");

__webpack_require__(/*! core-js/fn/string/trim-start */ "./node_modules/core-js/fn/string/trim-start.js");

__webpack_require__(/*! core-js/fn/string/trim-end */ "./node_modules/core-js/fn/string/trim-end.js");

__webpack_require__(/*! core-js/fn/symbol/async-iterator */ "./node_modules/core-js/fn/symbol/async-iterator.js");

__webpack_require__(/*! core-js/fn/object/get-own-property-descriptors */ "./node_modules/core-js/fn/object/get-own-property-descriptors.js");

__webpack_require__(/*! core-js/fn/object/values */ "./node_modules/core-js/fn/object/values.js");

__webpack_require__(/*! core-js/fn/object/entries */ "./node_modules/core-js/fn/object/entries.js");

__webpack_require__(/*! core-js/fn/promise/finally */ "./node_modules/core-js/fn/promise/finally.js");

__webpack_require__(/*! core-js/web */ "./node_modules/core-js/web/index.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/regenerator-runtime/runtime.js");

/***/ }),

/***/ "./node_modules/core-js/es6/index.js":
/*!*******************************************!*\
  !*** ./node_modules/core-js/es6/index.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
__webpack_require__(/*! ../modules/es6.object.create */ "./node_modules/core-js/modules/es6.object.create.js");
__webpack_require__(/*! ../modules/es6.object.define-property */ "./node_modules/core-js/modules/es6.object.define-property.js");
__webpack_require__(/*! ../modules/es6.object.define-properties */ "./node_modules/core-js/modules/es6.object.define-properties.js");
__webpack_require__(/*! ../modules/es6.object.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js");
__webpack_require__(/*! ../modules/es6.object.get-prototype-of */ "./node_modules/core-js/modules/es6.object.get-prototype-of.js");
__webpack_require__(/*! ../modules/es6.object.keys */ "./node_modules/core-js/modules/es6.object.keys.js");
__webpack_require__(/*! ../modules/es6.object.get-own-property-names */ "./node_modules/core-js/modules/es6.object.get-own-property-names.js");
__webpack_require__(/*! ../modules/es6.object.freeze */ "./node_modules/core-js/modules/es6.object.freeze.js");
__webpack_require__(/*! ../modules/es6.object.seal */ "./node_modules/core-js/modules/es6.object.seal.js");
__webpack_require__(/*! ../modules/es6.object.prevent-extensions */ "./node_modules/core-js/modules/es6.object.prevent-extensions.js");
__webpack_require__(/*! ../modules/es6.object.is-frozen */ "./node_modules/core-js/modules/es6.object.is-frozen.js");
__webpack_require__(/*! ../modules/es6.object.is-sealed */ "./node_modules/core-js/modules/es6.object.is-sealed.js");
__webpack_require__(/*! ../modules/es6.object.is-extensible */ "./node_modules/core-js/modules/es6.object.is-extensible.js");
__webpack_require__(/*! ../modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
__webpack_require__(/*! ../modules/es6.object.is */ "./node_modules/core-js/modules/es6.object.is.js");
__webpack_require__(/*! ../modules/es6.object.set-prototype-of */ "./node_modules/core-js/modules/es6.object.set-prototype-of.js");
__webpack_require__(/*! ../modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
__webpack_require__(/*! ../modules/es6.function.bind */ "./node_modules/core-js/modules/es6.function.bind.js");
__webpack_require__(/*! ../modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
__webpack_require__(/*! ../modules/es6.function.has-instance */ "./node_modules/core-js/modules/es6.function.has-instance.js");
__webpack_require__(/*! ../modules/es6.parse-int */ "./node_modules/core-js/modules/es6.parse-int.js");
__webpack_require__(/*! ../modules/es6.parse-float */ "./node_modules/core-js/modules/es6.parse-float.js");
__webpack_require__(/*! ../modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
__webpack_require__(/*! ../modules/es6.number.to-fixed */ "./node_modules/core-js/modules/es6.number.to-fixed.js");
__webpack_require__(/*! ../modules/es6.number.to-precision */ "./node_modules/core-js/modules/es6.number.to-precision.js");
__webpack_require__(/*! ../modules/es6.number.epsilon */ "./node_modules/core-js/modules/es6.number.epsilon.js");
__webpack_require__(/*! ../modules/es6.number.is-finite */ "./node_modules/core-js/modules/es6.number.is-finite.js");
__webpack_require__(/*! ../modules/es6.number.is-integer */ "./node_modules/core-js/modules/es6.number.is-integer.js");
__webpack_require__(/*! ../modules/es6.number.is-nan */ "./node_modules/core-js/modules/es6.number.is-nan.js");
__webpack_require__(/*! ../modules/es6.number.is-safe-integer */ "./node_modules/core-js/modules/es6.number.is-safe-integer.js");
__webpack_require__(/*! ../modules/es6.number.max-safe-integer */ "./node_modules/core-js/modules/es6.number.max-safe-integer.js");
__webpack_require__(/*! ../modules/es6.number.min-safe-integer */ "./node_modules/core-js/modules/es6.number.min-safe-integer.js");
__webpack_require__(/*! ../modules/es6.number.parse-float */ "./node_modules/core-js/modules/es6.number.parse-float.js");
__webpack_require__(/*! ../modules/es6.number.parse-int */ "./node_modules/core-js/modules/es6.number.parse-int.js");
__webpack_require__(/*! ../modules/es6.math.acosh */ "./node_modules/core-js/modules/es6.math.acosh.js");
__webpack_require__(/*! ../modules/es6.math.asinh */ "./node_modules/core-js/modules/es6.math.asinh.js");
__webpack_require__(/*! ../modules/es6.math.atanh */ "./node_modules/core-js/modules/es6.math.atanh.js");
__webpack_require__(/*! ../modules/es6.math.cbrt */ "./node_modules/core-js/modules/es6.math.cbrt.js");
__webpack_require__(/*! ../modules/es6.math.clz32 */ "./node_modules/core-js/modules/es6.math.clz32.js");
__webpack_require__(/*! ../modules/es6.math.cosh */ "./node_modules/core-js/modules/es6.math.cosh.js");
__webpack_require__(/*! ../modules/es6.math.expm1 */ "./node_modules/core-js/modules/es6.math.expm1.js");
__webpack_require__(/*! ../modules/es6.math.fround */ "./node_modules/core-js/modules/es6.math.fround.js");
__webpack_require__(/*! ../modules/es6.math.hypot */ "./node_modules/core-js/modules/es6.math.hypot.js");
__webpack_require__(/*! ../modules/es6.math.imul */ "./node_modules/core-js/modules/es6.math.imul.js");
__webpack_require__(/*! ../modules/es6.math.log10 */ "./node_modules/core-js/modules/es6.math.log10.js");
__webpack_require__(/*! ../modules/es6.math.log1p */ "./node_modules/core-js/modules/es6.math.log1p.js");
__webpack_require__(/*! ../modules/es6.math.log2 */ "./node_modules/core-js/modules/es6.math.log2.js");
__webpack_require__(/*! ../modules/es6.math.sign */ "./node_modules/core-js/modules/es6.math.sign.js");
__webpack_require__(/*! ../modules/es6.math.sinh */ "./node_modules/core-js/modules/es6.math.sinh.js");
__webpack_require__(/*! ../modules/es6.math.tanh */ "./node_modules/core-js/modules/es6.math.tanh.js");
__webpack_require__(/*! ../modules/es6.math.trunc */ "./node_modules/core-js/modules/es6.math.trunc.js");
__webpack_require__(/*! ../modules/es6.string.from-code-point */ "./node_modules/core-js/modules/es6.string.from-code-point.js");
__webpack_require__(/*! ../modules/es6.string.raw */ "./node_modules/core-js/modules/es6.string.raw.js");
__webpack_require__(/*! ../modules/es6.string.trim */ "./node_modules/core-js/modules/es6.string.trim.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/core-js/modules/es6.string.iterator.js");
__webpack_require__(/*! ../modules/es6.string.code-point-at */ "./node_modules/core-js/modules/es6.string.code-point-at.js");
__webpack_require__(/*! ../modules/es6.string.ends-with */ "./node_modules/core-js/modules/es6.string.ends-with.js");
__webpack_require__(/*! ../modules/es6.string.includes */ "./node_modules/core-js/modules/es6.string.includes.js");
__webpack_require__(/*! ../modules/es6.string.repeat */ "./node_modules/core-js/modules/es6.string.repeat.js");
__webpack_require__(/*! ../modules/es6.string.starts-with */ "./node_modules/core-js/modules/es6.string.starts-with.js");
__webpack_require__(/*! ../modules/es6.string.anchor */ "./node_modules/core-js/modules/es6.string.anchor.js");
__webpack_require__(/*! ../modules/es6.string.big */ "./node_modules/core-js/modules/es6.string.big.js");
__webpack_require__(/*! ../modules/es6.string.blink */ "./node_modules/core-js/modules/es6.string.blink.js");
__webpack_require__(/*! ../modules/es6.string.bold */ "./node_modules/core-js/modules/es6.string.bold.js");
__webpack_require__(/*! ../modules/es6.string.fixed */ "./node_modules/core-js/modules/es6.string.fixed.js");
__webpack_require__(/*! ../modules/es6.string.fontcolor */ "./node_modules/core-js/modules/es6.string.fontcolor.js");
__webpack_require__(/*! ../modules/es6.string.fontsize */ "./node_modules/core-js/modules/es6.string.fontsize.js");
__webpack_require__(/*! ../modules/es6.string.italics */ "./node_modules/core-js/modules/es6.string.italics.js");
__webpack_require__(/*! ../modules/es6.string.link */ "./node_modules/core-js/modules/es6.string.link.js");
__webpack_require__(/*! ../modules/es6.string.small */ "./node_modules/core-js/modules/es6.string.small.js");
__webpack_require__(/*! ../modules/es6.string.strike */ "./node_modules/core-js/modules/es6.string.strike.js");
__webpack_require__(/*! ../modules/es6.string.sub */ "./node_modules/core-js/modules/es6.string.sub.js");
__webpack_require__(/*! ../modules/es6.string.sup */ "./node_modules/core-js/modules/es6.string.sup.js");
__webpack_require__(/*! ../modules/es6.date.now */ "./node_modules/core-js/modules/es6.date.now.js");
__webpack_require__(/*! ../modules/es6.date.to-json */ "./node_modules/core-js/modules/es6.date.to-json.js");
__webpack_require__(/*! ../modules/es6.date.to-iso-string */ "./node_modules/core-js/modules/es6.date.to-iso-string.js");
__webpack_require__(/*! ../modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
__webpack_require__(/*! ../modules/es6.date.to-primitive */ "./node_modules/core-js/modules/es6.date.to-primitive.js");
__webpack_require__(/*! ../modules/es6.array.is-array */ "./node_modules/core-js/modules/es6.array.is-array.js");
__webpack_require__(/*! ../modules/es6.array.from */ "./node_modules/core-js/modules/es6.array.from.js");
__webpack_require__(/*! ../modules/es6.array.of */ "./node_modules/core-js/modules/es6.array.of.js");
__webpack_require__(/*! ../modules/es6.array.join */ "./node_modules/core-js/modules/es6.array.join.js");
__webpack_require__(/*! ../modules/es6.array.slice */ "./node_modules/core-js/modules/es6.array.slice.js");
__webpack_require__(/*! ../modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");
__webpack_require__(/*! ../modules/es6.array.for-each */ "./node_modules/core-js/modules/es6.array.for-each.js");
__webpack_require__(/*! ../modules/es6.array.map */ "./node_modules/core-js/modules/es6.array.map.js");
__webpack_require__(/*! ../modules/es6.array.filter */ "./node_modules/core-js/modules/es6.array.filter.js");
__webpack_require__(/*! ../modules/es6.array.some */ "./node_modules/core-js/modules/es6.array.some.js");
__webpack_require__(/*! ../modules/es6.array.every */ "./node_modules/core-js/modules/es6.array.every.js");
__webpack_require__(/*! ../modules/es6.array.reduce */ "./node_modules/core-js/modules/es6.array.reduce.js");
__webpack_require__(/*! ../modules/es6.array.reduce-right */ "./node_modules/core-js/modules/es6.array.reduce-right.js");
__webpack_require__(/*! ../modules/es6.array.index-of */ "./node_modules/core-js/modules/es6.array.index-of.js");
__webpack_require__(/*! ../modules/es6.array.last-index-of */ "./node_modules/core-js/modules/es6.array.last-index-of.js");
__webpack_require__(/*! ../modules/es6.array.copy-within */ "./node_modules/core-js/modules/es6.array.copy-within.js");
__webpack_require__(/*! ../modules/es6.array.fill */ "./node_modules/core-js/modules/es6.array.fill.js");
__webpack_require__(/*! ../modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
__webpack_require__(/*! ../modules/es6.array.find-index */ "./node_modules/core-js/modules/es6.array.find-index.js");
__webpack_require__(/*! ../modules/es6.array.species */ "./node_modules/core-js/modules/es6.array.species.js");
__webpack_require__(/*! ../modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
__webpack_require__(/*! ../modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");
__webpack_require__(/*! ../modules/es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");
__webpack_require__(/*! ../modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
__webpack_require__(/*! ../modules/es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
__webpack_require__(/*! ../modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
__webpack_require__(/*! ../modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
__webpack_require__(/*! ../modules/es6.regexp.search */ "./node_modules/core-js/modules/es6.regexp.search.js");
__webpack_require__(/*! ../modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
__webpack_require__(/*! ../modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
__webpack_require__(/*! ../modules/es6.map */ "./node_modules/core-js/modules/es6.map.js");
__webpack_require__(/*! ../modules/es6.set */ "./node_modules/core-js/modules/es6.set.js");
__webpack_require__(/*! ../modules/es6.weak-map */ "./node_modules/core-js/modules/es6.weak-map.js");
__webpack_require__(/*! ../modules/es6.weak-set */ "./node_modules/core-js/modules/es6.weak-set.js");
__webpack_require__(/*! ../modules/es6.typed.array-buffer */ "./node_modules/core-js/modules/es6.typed.array-buffer.js");
__webpack_require__(/*! ../modules/es6.typed.data-view */ "./node_modules/core-js/modules/es6.typed.data-view.js");
__webpack_require__(/*! ../modules/es6.typed.int8-array */ "./node_modules/core-js/modules/es6.typed.int8-array.js");
__webpack_require__(/*! ../modules/es6.typed.uint8-array */ "./node_modules/core-js/modules/es6.typed.uint8-array.js");
__webpack_require__(/*! ../modules/es6.typed.uint8-clamped-array */ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js");
__webpack_require__(/*! ../modules/es6.typed.int16-array */ "./node_modules/core-js/modules/es6.typed.int16-array.js");
__webpack_require__(/*! ../modules/es6.typed.uint16-array */ "./node_modules/core-js/modules/es6.typed.uint16-array.js");
__webpack_require__(/*! ../modules/es6.typed.int32-array */ "./node_modules/core-js/modules/es6.typed.int32-array.js");
__webpack_require__(/*! ../modules/es6.typed.uint32-array */ "./node_modules/core-js/modules/es6.typed.uint32-array.js");
__webpack_require__(/*! ../modules/es6.typed.float32-array */ "./node_modules/core-js/modules/es6.typed.float32-array.js");
__webpack_require__(/*! ../modules/es6.typed.float64-array */ "./node_modules/core-js/modules/es6.typed.float64-array.js");
__webpack_require__(/*! ../modules/es6.reflect.apply */ "./node_modules/core-js/modules/es6.reflect.apply.js");
__webpack_require__(/*! ../modules/es6.reflect.construct */ "./node_modules/core-js/modules/es6.reflect.construct.js");
__webpack_require__(/*! ../modules/es6.reflect.define-property */ "./node_modules/core-js/modules/es6.reflect.define-property.js");
__webpack_require__(/*! ../modules/es6.reflect.delete-property */ "./node_modules/core-js/modules/es6.reflect.delete-property.js");
__webpack_require__(/*! ../modules/es6.reflect.enumerate */ "./node_modules/core-js/modules/es6.reflect.enumerate.js");
__webpack_require__(/*! ../modules/es6.reflect.get */ "./node_modules/core-js/modules/es6.reflect.get.js");
__webpack_require__(/*! ../modules/es6.reflect.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js");
__webpack_require__(/*! ../modules/es6.reflect.get-prototype-of */ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js");
__webpack_require__(/*! ../modules/es6.reflect.has */ "./node_modules/core-js/modules/es6.reflect.has.js");
__webpack_require__(/*! ../modules/es6.reflect.is-extensible */ "./node_modules/core-js/modules/es6.reflect.is-extensible.js");
__webpack_require__(/*! ../modules/es6.reflect.own-keys */ "./node_modules/core-js/modules/es6.reflect.own-keys.js");
__webpack_require__(/*! ../modules/es6.reflect.prevent-extensions */ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js");
__webpack_require__(/*! ../modules/es6.reflect.set */ "./node_modules/core-js/modules/es6.reflect.set.js");
__webpack_require__(/*! ../modules/es6.reflect.set-prototype-of */ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/modules/_core.js");

/***/ }),

/***/ "./node_modules/core-js/fn/array/flat-map.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/array/flat-map.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.array.flat-map */ "./node_modules/core-js/modules/es7.array.flat-map.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Array.flatMap;

/***/ }),

/***/ "./node_modules/core-js/fn/array/includes.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/array/includes.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.array.includes */ "./node_modules/core-js/modules/es7.array.includes.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Array.includes;

/***/ }),

/***/ "./node_modules/core-js/fn/object/entries.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/object/entries.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.object.entries */ "./node_modules/core-js/modules/es7.object.entries.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Object.entries;

/***/ }),

/***/ "./node_modules/core-js/fn/object/get-own-property-descriptors.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/fn/object/get-own-property-descriptors.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.object.get-own-property-descriptors */ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Object.getOwnPropertyDescriptors;

/***/ }),

/***/ "./node_modules/core-js/fn/object/values.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/fn/object/values.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.object.values */ "./node_modules/core-js/modules/es7.object.values.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Object.values;

/***/ }),

/***/ "./node_modules/core-js/fn/promise/finally.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/fn/promise/finally.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ../../modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
__webpack_require__(/*! ../../modules/es7.promise.finally */ "./node_modules/core-js/modules/es7.promise.finally.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").Promise['finally'];

/***/ }),

/***/ "./node_modules/core-js/fn/string/pad-end.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/fn/string/pad-end.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.pad-end */ "./node_modules/core-js/modules/es7.string.pad-end.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.padEnd;

/***/ }),

/***/ "./node_modules/core-js/fn/string/pad-start.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/fn/string/pad-start.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.pad-start */ "./node_modules/core-js/modules/es7.string.pad-start.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.padStart;

/***/ }),

/***/ "./node_modules/core-js/fn/string/trim-end.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/fn/string/trim-end.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.trim-right */ "./node_modules/core-js/modules/es7.string.trim-right.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.trimRight;

/***/ }),

/***/ "./node_modules/core-js/fn/string/trim-start.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/fn/string/trim-start.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.string.trim-left */ "./node_modules/core-js/modules/es7.string.trim-left.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").String.trimLeft;

/***/ }),

/***/ "./node_modules/core-js/fn/symbol/async-iterator.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/fn/symbol/async-iterator.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
module.exports = __webpack_require__(/*! ../../modules/_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js").f('asyncIterator');

/***/ }),

/***/ "./node_modules/core-js/library/fn/global.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/library/fn/global.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es7.global */ "./node_modules/core-js/library/modules/es7.global.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/library/modules/_core.js").global;

/***/ }),

/***/ "./node_modules/core-js/library/modules/_a-function.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_a-function.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_an-object.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_an-object.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_core.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_core.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.9' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/library/modules/_ctx.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ctx.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/library/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };
    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function () /* ...args */{
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_descriptors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_descriptors.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/library/modules/_dom-create.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_dom-create.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_export.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_export.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? function (C) {
      var F = function F(a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0:
              return new C();
            case 1:
              return new C(a);
            case 2:
              return new C(a, b);
          }return new C(a, b, c);
        }return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
      // make static versions for prototype methods
    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

/***/ }),

/***/ "./node_modules/core-js/library/modules/_fails.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_fails.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_global.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_global.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
// eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/library/modules/_has.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_has.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_hide.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_hide.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/library/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_ie8-dom-define.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ie8-dom-define.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/library/modules/_dom-create.js")('div'), 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/library/modules/_is-object.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-object.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (it) {
  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-dp.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dp.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/library/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/library/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_property-desc.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_property-desc.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-primitive.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-primitive.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.global.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.global.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");

$export($export.G, { global: __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_a-number-value.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_a-number-value.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_advance-string-index.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_advance-string-index.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-copy-within.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-copy-within.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];else delete O[to];
    to += inc;
    from += inc;
  }return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-fill.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_array-fill.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) {
    O[index++] = value;
  }return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }return !IS_INCLUDES && -1;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-methods.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);
        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true; // some
              case 5:
                return val; // find
              case 6:
                return index; // findIndex
              case 2:
                result.push(val); // filter
            } else if (IS_EVERY) return false; // every
        }
      }
    }return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-reduce.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_array-reduce.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (; isRight ? index >= 0 : length > index; index += i) {
    if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
  }return memo;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }return C === undefined ? Array : C;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-create.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_bind.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_bind.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var arraySlice = [].slice;
var factories = {};

var construct = function construct(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) {
      n[i] = 'a[' + i + ']';
    } // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function bound() /* args... */{
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');
// ES3 wrong here
var ARG = cof(function () {
  return arguments;
}()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (e) {/* empty */}
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
  // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
  // builtinTag case
  : ARG ? cof(O)
  // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-strong.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").fastKey;
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function getEntry(that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = create(null); // index
      that._f = undefined; // first entry
      that._l = undefined; // last entry
      that[SIZE] = 0; // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function _delete(key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) {
            entry = entry.p;
          }
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function get() {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
      // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key, // <- key
        v: value, // <- value
        p: prev = that._l, // <- previous entry
        n: undefined, // <- next entry
        r: false // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    }return that;
  },
  getEntry: getEntry,
  setStrong: function setStrong(C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind; // kind
      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) {
        entry = entry.p;
      } // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection-weak.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-weak.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var getWeak = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").getWeak;
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
var $has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function UncaughtFrozenStore() {
  this.a = [];
};
var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function get(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function has(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function set(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.a.push([key, value]);
  },
  'delete': function _delete(key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = id++; // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function _delete(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_collection.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function fixMethod(KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);return this;
    });
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () {
      instance.has(1);
    });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) {
        $instance[ADDER](index, index);
      }return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.9' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_create-property.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_create-property.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };
    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function () /* ...args */{
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-iso-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-iso-string.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function lz(num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-primitive.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-primitive.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-keys.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

/***/ }),

/***/ "./node_modules/core-js/modules/_fails-is-regexp.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_fails-is-regexp.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) {/* empty */}
  }return true;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_fix-re-wks.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () {
    return originalExec.apply(this, arguments);
  };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
}();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () {
      return 7;
    };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () {
      execCalled = true;return null;
    };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () {
        return re;
      };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    });
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    }
    // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_flags.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_flatten-into-array.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_flatten-into-array.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IS_CONCAT_SPREADABLE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () {
    return iterable;
  } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

/***/ }),

/***/ "./node_modules/core-js/modules/_function-to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_function-to-string.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('native-function-to-string', Function.toString);

/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
// eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
module.exports = document && document.documentElement;

/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }return that;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
                  var un = that === undefined;
                  switch (args.length) {
                                    case 0:
                                                      return un ? fn() : fn.call(that);
                                    case 1:
                                                      return un ? fn(args[0]) : fn.call(that, args[0]);
                                    case 2:
                                                      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                                    case 3:
                                                      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                                    case 4:
                                                      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                  }return fn.apply(that, args);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-integer.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (it) {
  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),

/***/ "./node_modules/core-js/modules/_is-regexp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-regexp.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () {
    SAFE_CLOSING = true;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {/* empty */}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () {
      return { done: safe = true };
    };
    arr[ITERATOR] = function () {
      return iter;
    };
    exec(arr);
  } catch (e) {/* empty */}
  return safe;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = false;

/***/ }),

/***/ "./node_modules/core-js/modules/_math-expm1.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-expm1.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = !$expm1
// Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
// Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

/***/ }),

/***/ "./node_modules/core-js/modules/_math-fround.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_math-fround.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function roundTiesToEven(n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_math-log1p.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-log1p.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_math-sign.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-sign.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function setMeta(it) {
  setDesc(it, META, { value: {
      i: 'O' + ++id, // object ID
      w: {} // weak collections IDs
    } });
};
var fastKey = function fastKey(it, create) {
  // return primitive with prefix
  if (!isObject(it)) return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
    // return object ID
  }return it[META].i;
};
var getWeak = function getWeak(it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
    // return hash weak collections IDs
  }return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function onFreeze(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

/***/ }),

/***/ "./node_modules/core-js/modules/_microtask.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_microtask.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var macrotask = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function flush() {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function notify() {
      process.nextTick(flush);
    };
    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function notify() {
      node.data = toggle = !toggle;
    };
    // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function notify() {
      promise.then(flush);
    };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
  } else {
    notify = function notify() {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    }last = task;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_new-promise-capability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/_new-promise-capability.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-assign.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-assign.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  }return T;
} : $assign;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var Empty = function Empty() {/* empty */};
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;
  while (i--) {
    delete _createDict[PROTOTYPE][enumBugKeys[i]];
  }return _createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = _createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) {
    dP.f(O, P = keys[i++], Properties[P]);
  }return O;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {/* empty */}
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var toString = {}.toString;

var windowNames = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }return O instanceof Object ? ObjectProto : null;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) {
    if (key != IE_PROTO) has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys
  while (names.length > i) {
    if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }return result;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),

/***/ "./node_modules/core-js/modules/_object-sap.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-sap.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () {
    fn(1);
  }), 'Object', exp);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_object-to-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-to-array.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var isEnum = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_own-keys.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_own-keys.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var Reflect = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_parse-float.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-float.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseFloat;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;

module.exports = 1 / $parseFloat(__webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js") + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

/***/ }),

/***/ "./node_modules/core-js/modules/_parse-int.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-int.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseInt;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;
var ws = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

/***/ }),

/***/ "./node_modules/core-js/modules/_perform.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_perform.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

/***/ }),

/***/ "./node_modules/core-js/modules/_promise-resolve.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_promise-resolve.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
module.exports = function (target, src, safe) {
  for (var key in src) {
    redefine(target, key, src[key], safe);
  }return target;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');
var $toString = __webpack_require__(/*! ./_function-to-string */ "./node_modules/core-js/modules/_function-to-string.js");
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec-abstract.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec-abstract.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var builtinExec = RegExp.prototype.exec;

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
}();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

/***/ }),

/***/ "./node_modules/core-js/modules/_same-value.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_same-value.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var check = function check(O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }
    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function get() {
      return this;
    }
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

/***/ }),

/***/ "./node_modules/core-js/modules/_species-constructor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_species-constructor.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_strict-method.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {/* empty */}, 1) : method.call(null);
  });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-at.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-at.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-context.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-context.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-html.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-html.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function createHTML(string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-pad.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-pad.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-repeat.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-repeat.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (; n > 0; (n >>>= 1) && (str += str)) {
    if (n & 1) res += str;
  }return res;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_string-trim.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-trim.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var spaces = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");
var space = '[' + spaces + ']';
var non = '\u200B\x85';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function exporter(KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

/***/ }),

/***/ "./node_modules/core-js/modules/_string-ws.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-ws.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ }),

/***/ "./node_modules/core-js/modules/_task.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_task.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function run() {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function listener(event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) {
      args.push(arguments[i++]);
    }queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process') {
    defer = function defer(id) {
      process.nextTick(ctx(run, id, 1));
    };
    // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function defer(id) {
      Dispatch.now(ctx(run, id, 1));
    };
    // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function defer(id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
    // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function defer(id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
    // Rest old browsers
  } else {
    defer = function defer(id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-index.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_to-index.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ "./node_modules/core-js/modules/_typed-array.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-array.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js")) {
  var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
  var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
  var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
  var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
  var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
  var $buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");
  var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
  var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
  var propertyDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
  var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
  var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
  var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
  var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
  var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
  var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
  var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
  var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
  var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
  var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
  var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
  var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
  var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
  var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
  var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
  var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
  var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
  var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
  var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
  var createArrayIncludes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js");
  var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
  var ArrayIterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
  var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
  var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
  var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
  var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
  var arrayCopyWithin = __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js");
  var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
  var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function toOffset(it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function validate(it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function allocate(C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    }return new C(length);
  };

  var speciesFromList = function speciesFromList(O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function fromList(C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) {
      result[index] = list[index++];
    }return result;
  };

  var addGetter = function addGetter(it, key, internal) {
    dP(it, key, { get: function get() {
        return this._d[internal];
      } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      }O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of() /* ...items */{
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) {
      result[index] = arguments[index++];
    }return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
    arrayToLocaleString.call(new Uint8Array(1));
  });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) {
      // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) {
      // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) {
      // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) {
      // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) {
      // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      }return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) {
      this[offset + index] = src[index++];
    }
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function isTAIndex(target, key) {
    return isObject(target) && target[TYPED_ARRAY] && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) != 'symbol' && key in target && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
      target[key] = desc.value;
      return target;
    }return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () {
    arrayToString.call({});
  })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function constructor() {/* noop */},
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function get() {
      return this[TYPED_ARRAY];
    }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function getter(that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function setter(that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function addElement(that, index) {
      dP(that, index, {
        get: function get() {
          return getter(this, index);
        },
        set: function set(value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) {
          addElement(that, index++);
        }
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function get() {
          return NAME;
        }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () {
      Base.of.call(TypedArray, 1);
    }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () {/* empty */};

/***/ }),

/***/ "./node_modules/core-js/modules/_typed-buffer.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-buffer.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {}
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {}
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {}
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function get() {
      return this[internal];
    } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) {
    store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
  }
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

/***/ }),

/***/ "./node_modules/core-js/modules/_typed.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_typed.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),

/***/ "./node_modules/core-js/modules/_user-agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_user-agent.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_validate-collection.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-define.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-ext.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");

/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var _Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;
var USE_SYMBOL = typeof _Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.copy-within.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.copy-within.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', { copyWithin: __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js") });

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('copyWithin');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.every.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.every.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $every = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(4);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.fill.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.fill.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', { fill: __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js") });

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('fill');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.filter.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $filter = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(2);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find-index.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find-index.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.for-each.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.for-each.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $forEach = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);
var STRICT = __webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.from.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.from.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");

$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.index-of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.index-of.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $indexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
    // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.is-array.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.is-array.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Array', { isArray: __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0; // next index
  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.join.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.join.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js") != Object || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.last-index-of.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.last-index-of.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (; index >= 0; index--) {
      if (index in O) if (O[index] === searchElement) return index || 0;
    }return -1;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.map.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.map.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $map = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(1);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.of.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.of.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  function F() {/* empty */}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of() /* ...args */{
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) {
      createProperty(result, index, arguments[index++]);
    }result.length = aLen;
    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce-right.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce-right.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.slice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.slice.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) {
      cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    }return cloned;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.some.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.some.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $some = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(3);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.sort.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.sort.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.species.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.species.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('Array');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.now.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.now.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Date', { now: function now() {
    return new Date().getTime();
  } });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-iso-string.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-iso-string.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toISOString = __webpack_require__(/*! ./_date-to-iso-string */ "./node_modules/core-js/modules/_date-to-iso-string.js");

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-json.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-json.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function toISOString() {
      return 1;
    } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-primitive.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-primitive.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(proto, TO_PRIMITIVE, __webpack_require__(/*! ./_date-to-primitive */ "./node_modules/core-js/modules/_date-to-primitive.js"));

/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-string.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.bind.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.bind.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Function', { bind: __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.has-instance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.has-instance.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var HAS_INSTANCE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(FunctionProto, HAS_INSTANCE, { value: function value(O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = getPrototypeOf(O)) {
      if (this.prototype === O) return true;
    }return false;
  } });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.name.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.name.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && dP(FProto, NAME, {
  configurable: true,
  get: function get() {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.map.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.acosh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.acosh.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var log1p = __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js");
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
// V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
&& Math.floor($acosh(Number.MAX_VALUE)) == 710
// Tor Browser bug: Math.acosh(Infinity) -> NaN
&& $acosh(Infinity) == Infinity), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.asinh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.asinh.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.atanh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.atanh.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cbrt.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cbrt.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.clz32.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.clz32.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cosh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cosh.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.expm1.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.expm1.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.fround.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.fround.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { fround: __webpack_require__(/*! ./_math-fround */ "./node_modules/core-js/modules/_math-fround.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.hypot.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.hypot.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) {
    // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.imul.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.imul.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log10.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log10.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log1p.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log1p.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { log1p: __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log2.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log2.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sign.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sign.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { sign: __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sinh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sinh.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.tanh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.tanh.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.trunc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.trunc.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.constructor.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js")(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function toNumber(argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:case 98:
          radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
        case 79:case 111:
          radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
        default:
          return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      }return parseInt(digits, radix);
    }
  }return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
    // check on 1..constructor(foo) case
    && (BROKEN_COF ? fails(function () {
      proto.valueOf.call(that);
    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPN(Base) : (
  // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
  // ES6 (in case, if modules with ES6 Number statics required before):
  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, NUMBER, $Number);
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.epsilon.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.epsilon.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-finite.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-finite.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var _isFinite = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-integer.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-integer.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { isInteger: __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-nan.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-nan.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-safe-integer.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-safe-integer.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isInteger = __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js");
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.max-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.max-safe-integer.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.min-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.min-safe-integer.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-float.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-float.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js");
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-int.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-int.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js");
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-fixed.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-fixed.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");
var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function multiply(n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function divide(n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = c % n * 1e7;
  }
};
var numToString = function numToString() {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  }return s;
};
var pow = function pow(x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function log(x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }return n;
};

$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }return m;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-precision.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-precision.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.assign.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.assign.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.create.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.create.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-properties.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-properties.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', { defineProperties: __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-property.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-property.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', { defineProperty: __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.freeze.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.freeze.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js ***!
  \********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var $getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-names.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-names.js ***!
  \***************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyNames', function () {
  return __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js").f;
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-prototype-of.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var $getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-extensible.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-extensible.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-frozen.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-frozen.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-sealed.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-sealed.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.S, 'Object', { is: __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.keys.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.prevent-extensions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.prevent-extensions.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.seal.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.seal.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.set-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.set-prototype-of.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var test = {};
test[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-float.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-float.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js");
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-int.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-int.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js");
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.promise.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.promise.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var newPromiseCapabilityModule = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/modules/_perform.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function empty() {/* empty */};
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise
    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // we can't detect it synchronously, so just check versions
    && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) {/* empty */}
}();

// helpers
var isThenable = function isThenable(it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function notify(promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function run(reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) {
      run(chain[i++]);
    } // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function onUnhandled(promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    }promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function isUnhandled(promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function onHandleUnhandled(promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function $reject(value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function $resolve(value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions
    this._a = undefined; // <- checked in isUnhandled reactions
    this._s = 0; // <- state
    this._d = false; // <- done
    this._v = undefined; // <- value
    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false; // <- notify
  };
  Internal.prototype = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function _catch(onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function OwnPromiseCapability() {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js")($Promise, PROMISE);
__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(PROMISE);
Wrapper = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.apply.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.apply.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var rApply = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  rApply(function () {/* empty */});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.construct.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.construct.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var bind = __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js");
var rConstruct = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() {/* empty */}
  return !(rConstruct(function () {/* empty */}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {/* empty */});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.define-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.define-property.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.delete-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.delete-property.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.enumerate.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.enumerate.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var Enumerate = function Enumerate(iterated) {
  this._t = anObject(iterated); // target
  this._i = 0; // next index
  var keys = this._k = []; // keys
  var key;
  for (key in iterated) {
    keys.push(key);
  }
};
__webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js")(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js ***!
  \*********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-prototype-of.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var getProto = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.has.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.has.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.is-extensible.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.is-extensible.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.own-keys.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.own-keys.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js") });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.prevent-extensions.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set-prototype-of.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var setProto = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js");

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.constructor.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && (!CORRECT_NEW || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  re2[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
  };
  var proxy = function proxy(key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function get() {
        return Base[key];
      },
      set: function set(it) {
        Base[key] = it;
      }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) {
    proxy(keys[i++]);
  }proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, 'RegExp', $RegExp);
}

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('RegExp');

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.exec.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.exec.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
__webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js")({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.match.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

// @@match logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
  // `String.prototype.match` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.match
  function match(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  },
  // `RegExp.prototype[@@match]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
  function (regexp) {
    var res = maybeCallNative($match, regexp, this);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    if (!rx.global) return regExpExec(rx, S);
    var fullUnicode = rx.unicode;
    rx.lastIndex = 0;
    var A = [];
    var n = 0;
    var result;
    while ((result = regExpExec(rx, S)) !== null) {
      var matchStr = String(result[0]);
      A[n] = matchStr;
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      n++;
    }
    return n === 0 ? null : A;
  }];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.replace.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.replace.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function maybeToString(it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
  // `String.prototype.replace` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.replace
  function replace(searchValue, replaceValue) {
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  },
  // `RegExp.prototype[@@replace]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
  function (regexp, replaceValue) {
    var res = maybeCallNative($replace, regexp, this, replaceValue);
    if (res.done) return res.value;

    var rx = anObject(regexp);
    var S = String(this);
    var functionalReplace = typeof replaceValue === 'function';
    if (!functionalReplace) replaceValue = String(replaceValue);
    var global = rx.global;
    if (global) {
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
    }
    var results = [];
    while (true) {
      var result = regExpExec(rx, S);
      if (result === null) break;
      results.push(result);
      if (!global) break;
      var matchStr = String(result[0]);
      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
    }
    var accumulatedResult = '';
    var nextSourcePosition = 0;
    for (var i = 0; i < results.length; i++) {
      result = results[i];
      var matched = String(result[0]);
      var position = max(min(toInteger(result.index), S.length), 0);
      var captures = [];
      // NOTE: This is equivalent to
      //   captures = result.slice(1).map(maybeToString)
      // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
      // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
      // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
      for (var j = 1; j < result.length; j++) {
        captures.push(maybeToString(result[j]));
      }var namedCaptures = result.groups;
      if (functionalReplace) {
        var replacerArgs = [matched].concat(captures, position, S);
        if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
        var replacement = String(replaceValue.apply(undefined, replacerArgs));
      } else {
        replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
      }
      if (position >= nextSourcePosition) {
        accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
        nextSourcePosition = position + matched.length;
      }
    }
    return accumulatedResult + S.slice(nextSourcePosition);
  }];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$':
          return '$';
        case '&':
          return matched;
        case '`':
          return str.slice(0, position);
        case "'":
          return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default:
          // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.search.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.search.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var sameValue = __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

// @@search logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
  // `String.prototype.search` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.search
  function search(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  },
  // `RegExp.prototype[@@search]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
  function (regexp) {
    var res = maybeCallNative($search, regexp, this);
    if (res.done) return res.value;
    var rx = anObject(regexp);
    var S = String(this);
    var previousLastIndex = rx.lastIndex;
    if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
    var result = regExpExec(rx, S);
    if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
    return result === null ? -1 : result.index;
  }];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.split.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.split.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var callRegExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () {
  RegExp(MAX_UINT32, 'y');
});

// @@split logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function internalSplit(separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
    // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function internalSplit(separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
  // `String.prototype.split` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.split
  function split(separator, limit) {
    var O = defined(this);
    var splitter = separator == undefined ? undefined : separator[SPLIT];
    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
  },
  // `RegExp.prototype[@@split]` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
  //
  // NOTE: This cannot be properly polyfilled in engines that don't support
  // the 'y' flag.
  function (regexp, limit) {
    var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
    if (res.done) return res.value;

    var rx = anObject(regexp);
    var S = String(this);
    var C = speciesConstructor(rx, RegExp);

    var unicodeMatching = rx.unicode;
    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g');

    // ^(? + rx + ) is needed, in combination with some S slicing, to
    // simulate the 'y' flag.
    var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
    if (lim === 0) return [];
    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
    var p = 0;
    var q = 0;
    var A = [];
    while (q < S.length) {
      splitter.lastIndex = SUPPORTS_Y ? q : 0;
      var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
      var e;
      if (z === null || (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
        q = advanceStringIndex(S, q, unicodeMatching);
      } else {
        A.push(S.slice(p, q));
        if (A.length === lim) return A;
        for (var i = 1; i <= z.length - 1; i++) {
          A.push(z[i]);
          if (A.length === lim) return A;
        }
        q = p = e;
      }
    }
    A.push(S.slice(p));
    return A;
  }];
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function define(fn) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
})) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
  // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.set.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.set.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.anchor.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.anchor.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.big.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.big.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.blink.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.blink.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.bold.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.bold.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.code-point-at.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.code-point-at.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.ends-with.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.ends-with.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fixed.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fixed.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontcolor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontcolor.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontsize.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontsize.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.from-code-point.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.from-code-point.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) {
    // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
    }return res.join('');
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.includes.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.includes.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.italics.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.italics.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.iterator.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.link.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.link.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.raw.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.raw.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    }return res.join('');
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.repeat.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.repeat.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js")
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.small.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.small.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.starts-with.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.starts-with.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.strike.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.strike.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sub.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sub.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sup.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sup.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()

__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.trim.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.trim.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()

__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.symbol.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").KEY;
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js");
var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/modules/_enum-keys.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js");
var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $GOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function get() {
      return dP(this, 'a', { value: 7 }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    }return setSymbolDesc(it, key, D);
  }return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) {
    $defineProperty(it, key = keys[i++], P[key]);
  }return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function _Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols =
// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  wks(es6Symbols[j++]);
}for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
  wksDefine(wellKnownSymbols[k++]);
}$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () {
  $GOPS.f(1);
});

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) {
      args.push(arguments[i++]);
    }$replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function replacer(key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.array-buffer.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.array-buffer.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
var buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var ArrayBuffer = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").ArrayBuffer;
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    }return result;
  }
});

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(ARRAY_BUFFER);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.data-view.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.data-view.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.G + $export.W + $export.F * !__webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js").ABV, {
  DataView: __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js").DataView
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float32-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float32-array.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float64-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float64-array.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int16-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int16-array.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int32-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int32-array.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int8-array.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int8-array.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint16-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint16-array.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint32-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint32-array.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-array.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-map.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var each = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var assign = __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js");
var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var NATIVE_WEAK_MAP = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function wrapper(get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
        // store all the rest on native weakmap
      }return method.call(this, a, b);
    });
  });
}

/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-set.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-set.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_SET, function (get) {
  return function WeakSet() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flat-map.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.flat-map.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var flattenIntoArray = __webpack_require__(/*! ./_flatten-into-array */ "./node_modules/core-js/modules/_flatten-into-array.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var arraySpeciesCreate = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('flatMap');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.includes.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.includes.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $includes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('includes');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.entries.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.entries.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $entries = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js ***!
  \*********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var ownKeys = __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.values.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.values.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $values = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.finally.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.promise.finally.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally


var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");

$export($export.P + $export.R, 'Promise', { 'finally': function _finally(onFinally) {
    var C = speciesConstructor(this, core.Promise || global.Promise);
    var isFunction = typeof onFinally == 'function';
    return this.then(isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  } });

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-end.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-start.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-left.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-left.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-right.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-right.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('asyncIterator');

/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) {
      if (!proto[key]) redefine(proto, key, $iterators[key], true);
    }
  }
}

/***/ }),

/***/ "./node_modules/core-js/modules/web.immediate.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/web.immediate.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js");
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

/***/ }),

/***/ "./node_modules/core-js/modules/web.timers.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/web.timers.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function wrap(set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

/***/ }),

/***/ "./node_modules/core-js/web/index.js":
/*!*******************************************!*\
  !*** ./node_modules/core-js/web/index.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/web.timers */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! ../modules/web.immediate */ "./node_modules/core-js/modules/web.immediate.js");
__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/modules/_core.js");

/***/ }),

/***/ "./node_modules/jquery-validation/dist/jquery.validate.js":
/*!****************************************************************!*\
  !*** ./node_modules/jquery-validation/dist/jquery.validate.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery Validation Plugin v1.19.1
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2019 Jörn Zaefferer
 * Released under the MIT license
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
		module.exports = factory(require("jquery"));
	} else {
		factory(jQuery);
	}
})(function ($) {

	$.extend($.fn, {

		// https://jqueryvalidation.org/validate/
		validate: function validate(options) {

			// If nothing is selected, return nothing; can't chain anyway
			if (!this.length) {
				if (options && options.debug && window.console) {
					console.warn("Nothing selected, can't validate, returning nothing.");
				}
				return;
			}

			// Check if a validator for this form was already created
			var validator = $.data(this[0], "validator");
			if (validator) {
				return validator;
			}

			// Add novalidate tag if HTML5.
			this.attr("novalidate", "novalidate");

			validator = new $.validator(options, this[0]);
			$.data(this[0], "validator", validator);

			if (validator.settings.onsubmit) {

				this.on("click.validate", ":submit", function (event) {

					// Track the used submit button to properly handle scripted
					// submits later.
					validator.submitButton = event.currentTarget;

					// Allow suppressing validation by adding a cancel class to the submit button
					if ($(this).hasClass("cancel")) {
						validator.cancelSubmit = true;
					}

					// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
					if ($(this).attr("formnovalidate") !== undefined) {
						validator.cancelSubmit = true;
					}
				});

				// Validate the form on submit
				this.on("submit.validate", function (event) {
					if (validator.settings.debug) {

						// Prevent form submit to be able to see console output
						event.preventDefault();
					}

					function handle() {
						var hidden, result;

						// Insert a hidden input as a replacement for the missing submit button
						// The hidden input is inserted in two cases:
						//   - A user defined a `submitHandler`
						//   - There was a pending request due to `remote` method and `stopRequest()`
						//     was called to submit the form in case it's valid
						if (validator.submitButton && (validator.settings.submitHandler || validator.formSubmitted)) {
							hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val($(validator.submitButton).val()).appendTo(validator.currentForm);
						}

						if (validator.settings.submitHandler && !validator.settings.debug) {
							result = validator.settings.submitHandler.call(validator, validator.currentForm, event);
							if (hidden) {

								// And clean up afterwards; thanks to no-block-scope, hidden can be referenced
								hidden.remove();
							}
							if (result !== undefined) {
								return result;
							}
							return false;
						}
						return true;
					}

					// Prevent submit for invalid forms or custom submit handlers
					if (validator.cancelSubmit) {
						validator.cancelSubmit = false;
						return handle();
					}
					if (validator.form()) {
						if (validator.pendingRequest) {
							validator.formSubmitted = true;
							return false;
						}
						return handle();
					} else {
						validator.focusInvalid();
						return false;
					}
				});
			}

			return validator;
		},

		// https://jqueryvalidation.org/valid/
		valid: function valid() {
			var valid, validator, errorList;

			if ($(this[0]).is("form")) {
				valid = this.validate().form();
			} else {
				errorList = [];
				valid = true;
				validator = $(this[0].form).validate();
				this.each(function () {
					valid = validator.element(this) && valid;
					if (!valid) {
						errorList = errorList.concat(validator.errorList);
					}
				});
				validator.errorList = errorList;
			}
			return valid;
		},

		// https://jqueryvalidation.org/rules/
		rules: function rules(command, argument) {
			var element = this[0],
			    isContentEditable = typeof this.attr("contenteditable") !== "undefined" && this.attr("contenteditable") !== "false",
			    settings,
			    staticRules,
			    existingRules,
			    data,
			    param,
			    filtered;

			// If nothing is selected, return empty object; can't chain anyway
			if (element == null) {
				return;
			}

			if (!element.form && isContentEditable) {
				element.form = this.closest("form")[0];
				element.name = this.attr("name");
			}

			if (element.form == null) {
				return;
			}

			if (command) {
				settings = $.data(element.form, "validator").settings;
				staticRules = settings.rules;
				existingRules = $.validator.staticRules(element);
				switch (command) {
					case "add":
						$.extend(existingRules, $.validator.normalizeRule(argument));

						// Remove messages from rules, but allow them to be set separately
						delete existingRules.messages;
						staticRules[element.name] = existingRules;
						if (argument.messages) {
							settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
						}
						break;
					case "remove":
						if (!argument) {
							delete staticRules[element.name];
							return existingRules;
						}
						filtered = {};
						$.each(argument.split(/\s/), function (index, method) {
							filtered[method] = existingRules[method];
							delete existingRules[method];
						});
						return filtered;
				}
			}

			data = $.validator.normalizeRules($.extend({}, $.validator.classRules(element), $.validator.attributeRules(element), $.validator.dataRules(element), $.validator.staticRules(element)), element);

			// Make sure required is at front
			if (data.required) {
				param = data.required;
				delete data.required;
				data = $.extend({ required: param }, data);
			}

			// Make sure remote is at back
			if (data.remote) {
				param = data.remote;
				delete data.remote;
				data = $.extend(data, { remote: param });
			}

			return data;
		}
	});

	// Custom selectors
	$.extend($.expr.pseudos || $.expr[":"], { // '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support

		// https://jqueryvalidation.org/blank-selector/
		blank: function blank(a) {
			return !$.trim("" + $(a).val());
		},

		// https://jqueryvalidation.org/filled-selector/
		filled: function filled(a) {
			var val = $(a).val();
			return val !== null && !!$.trim("" + val);
		},

		// https://jqueryvalidation.org/unchecked-selector/
		unchecked: function unchecked(a) {
			return !$(a).prop("checked");
		}
	});

	// Constructor for validator
	$.validator = function (options, form) {
		this.settings = $.extend(true, {}, $.validator.defaults, options);
		this.currentForm = form;
		this.init();
	};

	// https://jqueryvalidation.org/jQuery.validator.format/
	$.validator.format = function (source, params) {
		if (arguments.length === 1) {
			return function () {
				var args = $.makeArray(arguments);
				args.unshift(source);
				return $.validator.format.apply(this, args);
			};
		}
		if (params === undefined) {
			return source;
		}
		if (arguments.length > 2 && params.constructor !== Array) {
			params = $.makeArray(arguments).slice(1);
		}
		if (params.constructor !== Array) {
			params = [params];
		}
		$.each(params, function (i, n) {
			source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function () {
				return n;
			});
		});
		return source;
	};

	$.extend($.validator, {

		defaults: {
			messages: {},
			groups: {},
			rules: {},
			errorClass: "error",
			pendingClass: "pending",
			validClass: "valid",
			errorElement: "label",
			focusCleanup: false,
			focusInvalid: true,
			errorContainer: $([]),
			errorLabelContainer: $([]),
			onsubmit: true,
			ignore: ":hidden",
			ignoreTitle: false,
			onfocusin: function onfocusin(element) {
				this.lastActive = element;

				// Hide error label and remove error class on focus if enabled
				if (this.settings.focusCleanup) {
					if (this.settings.unhighlight) {
						this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
					}
					this.hideThese(this.errorsFor(element));
				}
			},
			onfocusout: function onfocusout(element) {
				if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
					this.element(element);
				}
			},
			onkeyup: function onkeyup(element, event) {

				// Avoid revalidate the field when pressing one of the following keys
				// Shift       => 16
				// Ctrl        => 17
				// Alt         => 18
				// Caps lock   => 20
				// End         => 35
				// Home        => 36
				// Left arrow  => 37
				// Up arrow    => 38
				// Right arrow => 39
				// Down arrow  => 40
				// Insert      => 45
				// Num lock    => 144
				// AltGr key   => 225
				var excludedKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];

				if (event.which === 9 && this.elementValue(element) === "" || $.inArray(event.keyCode, excludedKeys) !== -1) {
					return;
				} else if (element.name in this.submitted || element.name in this.invalid) {
					this.element(element);
				}
			},
			onclick: function onclick(element) {

				// Click on selects, radiobuttons and checkboxes
				if (element.name in this.submitted) {
					this.element(element);

					// Or option elements, check parent select in that case
				} else if (element.parentNode.name in this.submitted) {
					this.element(element.parentNode);
				}
			},
			highlight: function highlight(element, errorClass, validClass) {
				if (element.type === "radio") {
					this.findByName(element.name).addClass(errorClass).removeClass(validClass);
				} else {
					$(element).addClass(errorClass).removeClass(validClass);
				}
			},
			unhighlight: function unhighlight(element, errorClass, validClass) {
				if (element.type === "radio") {
					this.findByName(element.name).removeClass(errorClass).addClass(validClass);
				} else {
					$(element).removeClass(errorClass).addClass(validClass);
				}
			}
		},

		// https://jqueryvalidation.org/jQuery.validator.setDefaults/
		setDefaults: function setDefaults(settings) {
			$.extend($.validator.defaults, settings);
		},

		messages: {
			required: "This field is required.",
			remote: "Please fix this field.",
			email: "Please enter a valid email address.",
			url: "Please enter a valid URL.",
			date: "Please enter a valid date.",
			dateISO: "Please enter a valid date (ISO).",
			number: "Please enter a valid number.",
			digits: "Please enter only digits.",
			equalTo: "Please enter the same value again.",
			maxlength: $.validator.format("Please enter no more than {0} characters."),
			minlength: $.validator.format("Please enter at least {0} characters."),
			rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
			range: $.validator.format("Please enter a value between {0} and {1}."),
			max: $.validator.format("Please enter a value less than or equal to {0}."),
			min: $.validator.format("Please enter a value greater than or equal to {0}."),
			step: $.validator.format("Please enter a multiple of {0}.")
		},

		autoCreateRanges: false,

		prototype: {

			init: function init() {
				this.labelContainer = $(this.settings.errorLabelContainer);
				this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
				this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
				this.submitted = {};
				this.valueCache = {};
				this.pendingRequest = 0;
				this.pending = {};
				this.invalid = {};
				this.reset();

				var currentForm = this.currentForm,
				    groups = this.groups = {},
				    rules;
				$.each(this.settings.groups, function (key, value) {
					if (typeof value === "string") {
						value = value.split(/\s/);
					}
					$.each(value, function (index, name) {
						groups[name] = key;
					});
				});
				rules = this.settings.rules;
				$.each(rules, function (key, value) {
					rules[key] = $.validator.normalizeRule(value);
				});

				function delegate(event) {
					var isContentEditable = typeof $(this).attr("contenteditable") !== "undefined" && $(this).attr("contenteditable") !== "false";

					// Set form expando on contenteditable
					if (!this.form && isContentEditable) {
						this.form = $(this).closest("form")[0];
						this.name = $(this).attr("name");
					}

					// Ignore the element if it belongs to another form. This will happen mainly
					// when setting the `form` attribute of an input to the id of another form.
					if (currentForm !== this.form) {
						return;
					}

					var validator = $.data(this.form, "validator"),
					    eventType = "on" + event.type.replace(/^validate/, ""),
					    settings = validator.settings;
					if (settings[eventType] && !$(this).is(settings.ignore)) {
						settings[eventType].call(validator, this, event);
					}
				}

				$(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " + "[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " + "[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " + "[type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate)

				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate);

				if (this.settings.invalidHandler) {
					$(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);
				}
			},

			// https://jqueryvalidation.org/Validator.form/
			form: function form() {
				this.checkForm();
				$.extend(this.submitted, this.errorMap);
				this.invalid = $.extend({}, this.errorMap);
				if (!this.valid()) {
					$(this.currentForm).triggerHandler("invalid-form", [this]);
				}
				this.showErrors();
				return this.valid();
			},

			checkForm: function checkForm() {
				this.prepareForm();
				for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) {
					this.check(elements[i]);
				}
				return this.valid();
			},

			// https://jqueryvalidation.org/Validator.element/
			element: function element(_element) {
				var cleanElement = this.clean(_element),
				    checkElement = this.validationTargetFor(cleanElement),
				    v = this,
				    result = true,
				    rs,
				    group;

				if (checkElement === undefined) {
					delete this.invalid[cleanElement.name];
				} else {
					this.prepareElement(checkElement);
					this.currentElements = $(checkElement);

					// If this element is grouped, then validate all group elements already
					// containing a value
					group = this.groups[checkElement.name];
					if (group) {
						$.each(this.groups, function (name, testgroup) {
							if (testgroup === group && name !== checkElement.name) {
								cleanElement = v.validationTargetFor(v.clean(v.findByName(name)));
								if (cleanElement && cleanElement.name in v.invalid) {
									v.currentElements.push(cleanElement);
									result = v.check(cleanElement) && result;
								}
							}
						});
					}

					rs = this.check(checkElement) !== false;
					result = result && rs;
					if (rs) {
						this.invalid[checkElement.name] = false;
					} else {
						this.invalid[checkElement.name] = true;
					}

					if (!this.numberOfInvalids()) {

						// Hide error containers on last error
						this.toHide = this.toHide.add(this.containers);
					}
					this.showErrors();

					// Add aria-invalid status for screen readers
					$(_element).attr("aria-invalid", !rs);
				}

				return result;
			},

			// https://jqueryvalidation.org/Validator.showErrors/
			showErrors: function showErrors(errors) {
				if (errors) {
					var validator = this;

					// Add items to error list and map
					$.extend(this.errorMap, errors);
					this.errorList = $.map(this.errorMap, function (message, name) {
						return {
							message: message,
							element: validator.findByName(name)[0]
						};
					});

					// Remove items from success list
					this.successList = $.grep(this.successList, function (element) {
						return !(element.name in errors);
					});
				}
				if (this.settings.showErrors) {
					this.settings.showErrors.call(this, this.errorMap, this.errorList);
				} else {
					this.defaultShowErrors();
				}
			},

			// https://jqueryvalidation.org/Validator.resetForm/
			resetForm: function resetForm() {
				if ($.fn.resetForm) {
					$(this.currentForm).resetForm();
				}
				this.invalid = {};
				this.submitted = {};
				this.prepareForm();
				this.hideErrors();
				var elements = this.elements().removeData("previousValue").removeAttr("aria-invalid");

				this.resetElements(elements);
			},

			resetElements: function resetElements(elements) {
				var i;

				if (this.settings.unhighlight) {
					for (i = 0; elements[i]; i++) {
						this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, "");
						this.findByName(elements[i].name).removeClass(this.settings.validClass);
					}
				} else {
					elements.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
				}
			},

			numberOfInvalids: function numberOfInvalids() {
				return this.objectLength(this.invalid);
			},

			objectLength: function objectLength(obj) {
				/* jshint unused: false */
				var count = 0,
				    i;
				for (i in obj) {

					// This check allows counting elements with empty error
					// message as invalid elements
					if (obj[i] !== undefined && obj[i] !== null && obj[i] !== false) {
						count++;
					}
				}
				return count;
			},

			hideErrors: function hideErrors() {
				this.hideThese(this.toHide);
			},

			hideThese: function hideThese(errors) {
				errors.not(this.containers).text("");
				this.addWrapper(errors).hide();
			},

			valid: function valid() {
				return this.size() === 0;
			},

			size: function size() {
				return this.errorList.length;
			},

			focusInvalid: function focusInvalid() {
				if (this.settings.focusInvalid) {
					try {
						$(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").trigger("focus")

						// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
						.trigger("focusin");
					} catch (e) {

						// Ignore IE throwing errors when focusing hidden elements
					}
				}
			},

			findLastActive: function findLastActive() {
				var lastActive = this.lastActive;
				return lastActive && $.grep(this.errorList, function (n) {
					return n.element.name === lastActive.name;
				}).length === 1 && lastActive;
			},

			elements: function elements() {
				var validator = this,
				    rulesCache = {};

				// Select all valid inputs inside the form (no submit or reset buttons)
				return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function () {
					var name = this.name || $(this).attr("name"); // For contenteditable
					var isContentEditable = typeof $(this).attr("contenteditable") !== "undefined" && $(this).attr("contenteditable") !== "false";

					if (!name && validator.settings.debug && window.console) {
						console.error("%o has no name assigned", this);
					}

					// Set form expando on contenteditable
					if (isContentEditable) {
						this.form = $(this).closest("form")[0];
						this.name = name;
					}

					// Ignore elements that belong to other/nested forms
					if (this.form !== validator.currentForm) {
						return false;
					}

					// Select only the first element for each name, and only those with rules specified
					if (name in rulesCache || !validator.objectLength($(this).rules())) {
						return false;
					}

					rulesCache[name] = true;
					return true;
				});
			},

			clean: function clean(selector) {
				return $(selector)[0];
			},

			errors: function errors() {
				var errorClass = this.settings.errorClass.split(" ").join(".");
				return $(this.settings.errorElement + "." + errorClass, this.errorContext);
			},

			resetInternals: function resetInternals() {
				this.successList = [];
				this.errorList = [];
				this.errorMap = {};
				this.toShow = $([]);
				this.toHide = $([]);
			},

			reset: function reset() {
				this.resetInternals();
				this.currentElements = $([]);
			},

			prepareForm: function prepareForm() {
				this.reset();
				this.toHide = this.errors().add(this.containers);
			},

			prepareElement: function prepareElement(element) {
				this.reset();
				this.toHide = this.errorsFor(element);
			},

			elementValue: function elementValue(element) {
				var $element = $(element),
				    type = element.type,
				    isContentEditable = typeof $element.attr("contenteditable") !== "undefined" && $element.attr("contenteditable") !== "false",
				    val,
				    idx;

				if (type === "radio" || type === "checkbox") {
					return this.findByName(element.name).filter(":checked").val();
				} else if (type === "number" && typeof element.validity !== "undefined") {
					return element.validity.badInput ? "NaN" : $element.val();
				}

				if (isContentEditable) {
					val = $element.text();
				} else {
					val = $element.val();
				}

				if (type === "file") {

					// Modern browser (chrome & safari)
					if (val.substr(0, 12) === "C:\\fakepath\\") {
						return val.substr(12);
					}

					// Legacy browsers
					// Unix-based path
					idx = val.lastIndexOf("/");
					if (idx >= 0) {
						return val.substr(idx + 1);
					}

					// Windows-based path
					idx = val.lastIndexOf("\\");
					if (idx >= 0) {
						return val.substr(idx + 1);
					}

					// Just the file name
					return val;
				}

				if (typeof val === "string") {
					return val.replace(/\r/g, "");
				}
				return val;
			},

			check: function check(element) {
				element = this.validationTargetFor(this.clean(element));

				var rules = $(element).rules(),
				    rulesCount = $.map(rules, function (n, i) {
					return i;
				}).length,
				    dependencyMismatch = false,
				    val = this.elementValue(element),
				    result,
				    method,
				    rule,
				    normalizer;

				// Prioritize the local normalizer defined for this element over the global one
				// if the former exists, otherwise user the global one in case it exists.
				if (typeof rules.normalizer === "function") {
					normalizer = rules.normalizer;
				} else if (typeof this.settings.normalizer === "function") {
					normalizer = this.settings.normalizer;
				}

				// If normalizer is defined, then call it to retreive the changed value instead
				// of using the real one.
				// Note that `this` in the normalizer is `element`.
				if (normalizer) {
					val = normalizer.call(element, val);

					// Delete the normalizer from rules to avoid treating it as a pre-defined method.
					delete rules.normalizer;
				}

				for (method in rules) {
					rule = { method: method, parameters: rules[method] };
					try {
						result = $.validator.methods[method].call(this, val, element, rule.parameters);

						// If a method indicates that the field is optional and therefore valid,
						// don't mark it as valid when there are no other rules
						if (result === "dependency-mismatch" && rulesCount === 1) {
							dependencyMismatch = true;
							continue;
						}
						dependencyMismatch = false;

						if (result === "pending") {
							this.toHide = this.toHide.not(this.errorsFor(element));
							return;
						}

						if (!result) {
							this.formatAndAdd(element, rule);
							return false;
						}
					} catch (e) {
						if (this.settings.debug && window.console) {
							console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
						}
						if (e instanceof TypeError) {
							e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
						}

						throw e;
					}
				}
				if (dependencyMismatch) {
					return;
				}
				if (this.objectLength(rules)) {
					this.successList.push(element);
				}
				return true;
			},

			// Return the custom message for the given element and validation method
			// specified in the element's HTML5 data attribute
			// return the generic message if present and no method specific message is present
			customDataMessage: function customDataMessage(element, method) {
				return $(element).data("msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()) || $(element).data("msg");
			},

			// Return the custom message for the given element name and validation method
			customMessage: function customMessage(name, method) {
				var m = this.settings.messages[name];
				return m && (m.constructor === String ? m : m[method]);
			},

			// Return the first defined argument, allowing empty strings
			findDefined: function findDefined() {
				for (var i = 0; i < arguments.length; i++) {
					if (arguments[i] !== undefined) {
						return arguments[i];
					}
				}
				return undefined;
			},

			// The second parameter 'rule' used to be a string, and extended to an object literal
			// of the following form:
			// rule = {
			//     method: "method name",
			//     parameters: "the given method parameters"
			// }
			//
			// The old behavior still supported, kept to maintain backward compatibility with
			// old code, and will be removed in the next major release.
			defaultMessage: function defaultMessage(element, rule) {
				if (typeof rule === "string") {
					rule = { method: rule };
				}

				var message = this.findDefined(this.customMessage(element.name, rule.method), this.customDataMessage(element, rule.method),

				// 'title' is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined, $.validator.messages[rule.method], "<strong>Warning: No message defined for " + element.name + "</strong>"),
				    theregex = /\$?\{(\d+)\}/g;
				if (typeof message === "function") {
					message = message.call(this, rule.parameters, element);
				} else if (theregex.test(message)) {
					message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
				}

				return message;
			},

			formatAndAdd: function formatAndAdd(element, rule) {
				var message = this.defaultMessage(element, rule);

				this.errorList.push({
					message: message,
					element: element,
					method: rule.method
				});

				this.errorMap[element.name] = message;
				this.submitted[element.name] = message;
			},

			addWrapper: function addWrapper(toToggle) {
				if (this.settings.wrapper) {
					toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
				}
				return toToggle;
			},

			defaultShowErrors: function defaultShowErrors() {
				var i, elements, error;
				for (i = 0; this.errorList[i]; i++) {
					error = this.errorList[i];
					if (this.settings.highlight) {
						this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
					}
					this.showLabel(error.element, error.message);
				}
				if (this.errorList.length) {
					this.toShow = this.toShow.add(this.containers);
				}
				if (this.settings.success) {
					for (i = 0; this.successList[i]; i++) {
						this.showLabel(this.successList[i]);
					}
				}
				if (this.settings.unhighlight) {
					for (i = 0, elements = this.validElements(); elements[i]; i++) {
						this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
					}
				}
				this.toHide = this.toHide.not(this.toShow);
				this.hideErrors();
				this.addWrapper(this.toShow).show();
			},

			validElements: function validElements() {
				return this.currentElements.not(this.invalidElements());
			},

			invalidElements: function invalidElements() {
				return $(this.errorList).map(function () {
					return this.element;
				});
			},

			showLabel: function showLabel(element, message) {
				var place,
				    group,
				    errorID,
				    v,
				    error = this.errorsFor(element),
				    elementID = this.idOrName(element),
				    describedBy = $(element).attr("aria-describedby");

				if (error.length) {

					// Refresh error/success class
					error.removeClass(this.settings.validClass).addClass(this.settings.errorClass);

					// Replace message on existing label
					error.html(message);
				} else {

					// Create error element
					error = $("<" + this.settings.errorElement + ">").attr("id", elementID + "-error").addClass(this.settings.errorClass).html(message || "");

					// Maintain reference to the element to be placed into the DOM
					place = error;
					if (this.settings.wrapper) {

						// Make sure the element is visible, even in IE
						// actually showing the wrapped element is handled elsewhere
						place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
					}
					if (this.labelContainer.length) {
						this.labelContainer.append(place);
					} else if (this.settings.errorPlacement) {
						this.settings.errorPlacement.call(this, place, $(element));
					} else {
						place.insertAfter(element);
					}

					// Link error back to the element
					if (error.is("label")) {

						// If the error is a label, then associate using 'for'
						error.attr("for", elementID);

						// If the element is not a child of an associated label, then it's necessary
						// to explicitly apply aria-describedby
					} else if (error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length === 0) {
						errorID = error.attr("id");

						// Respect existing non-error aria-describedby
						if (!describedBy) {
							describedBy = errorID;
						} else if (!describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b"))) {

							// Add to end of list if not already present
							describedBy += " " + errorID;
						}
						$(element).attr("aria-describedby", describedBy);

						// If this element is grouped, then assign to all elements in the same group
						group = this.groups[element.name];
						if (group) {
							v = this;
							$.each(v.groups, function (name, testgroup) {
								if (testgroup === group) {
									$("[name='" + v.escapeCssMeta(name) + "']", v.currentForm).attr("aria-describedby", error.attr("id"));
								}
							});
						}
					}
				}
				if (!message && this.settings.success) {
					error.text("");
					if (typeof this.settings.success === "string") {
						error.addClass(this.settings.success);
					} else {
						this.settings.success(error, element);
					}
				}
				this.toShow = this.toShow.add(error);
			},

			errorsFor: function errorsFor(element) {
				var name = this.escapeCssMeta(this.idOrName(element)),
				    describer = $(element).attr("aria-describedby"),
				    selector = "label[for='" + name + "'], label[for='" + name + "'] *";

				// 'aria-describedby' should directly reference the error element
				if (describer) {
					selector = selector + ", #" + this.escapeCssMeta(describer).replace(/\s+/g, ", #");
				}

				return this.errors().filter(selector);
			},

			// See https://api.jquery.com/category/selectors/, for CSS
			// meta-characters that should be escaped in order to be used with JQuery
			// as a literal part of a name/id or any selector.
			escapeCssMeta: function escapeCssMeta(string) {
				return string.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
			},

			idOrName: function idOrName(element) {
				return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
			},

			validationTargetFor: function validationTargetFor(element) {

				// If radio/checkbox, validate first element in group instead
				if (this.checkable(element)) {
					element = this.findByName(element.name);
				}

				// Always apply ignore filter
				return $(element).not(this.settings.ignore)[0];
			},

			checkable: function checkable(element) {
				return (/radio|checkbox/i.test(element.type)
				);
			},

			findByName: function findByName(name) {
				return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");
			},

			getLength: function getLength(value, element) {
				switch (element.nodeName.toLowerCase()) {
					case "select":
						return $("option:selected", element).length;
					case "input":
						if (this.checkable(element)) {
							return this.findByName(element.name).filter(":checked").length;
						}
				}
				return value.length;
			},

			depend: function depend(param, element) {
				return this.dependTypes[typeof param === "undefined" ? "undefined" : _typeof(param)] ? this.dependTypes[typeof param === "undefined" ? "undefined" : _typeof(param)](param, element) : true;
			},

			dependTypes: {
				"boolean": function boolean(param) {
					return param;
				},
				"string": function string(param, element) {
					return !!$(param, element.form).length;
				},
				"function": function _function(param, element) {
					return param(element);
				}
			},

			optional: function optional(element) {
				var val = this.elementValue(element);
				return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
			},

			startRequest: function startRequest(element) {
				if (!this.pending[element.name]) {
					this.pendingRequest++;
					$(element).addClass(this.settings.pendingClass);
					this.pending[element.name] = true;
				}
			},

			stopRequest: function stopRequest(element, valid) {
				this.pendingRequest--;

				// Sometimes synchronization fails, make sure pendingRequest is never < 0
				if (this.pendingRequest < 0) {
					this.pendingRequest = 0;
				}
				delete this.pending[element.name];
				$(element).removeClass(this.settings.pendingClass);
				if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {
					$(this.currentForm).submit();

					// Remove the hidden input that was used as a replacement for the
					// missing submit button. The hidden input is added by `handle()`
					// to ensure that the value of the used submit button is passed on
					// for scripted submits triggered by this method
					if (this.submitButton) {
						$("input:hidden[name='" + this.submitButton.name + "']", this.currentForm).remove();
					}

					this.formSubmitted = false;
				} else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
					$(this.currentForm).triggerHandler("invalid-form", [this]);
					this.formSubmitted = false;
				}
			},

			previousValue: function previousValue(element, method) {
				method = typeof method === "string" && method || "remote";

				return $.data(element, "previousValue") || $.data(element, "previousValue", {
					old: null,
					valid: true,
					message: this.defaultMessage(element, { method: method })
				});
			},

			// Cleans up all forms and elements, removes validator-specific events
			destroy: function destroy() {
				this.resetForm();

				$(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur");
			}

		},

		classRuleSettings: {
			required: { required: true },
			email: { email: true },
			url: { url: true },
			date: { date: true },
			dateISO: { dateISO: true },
			number: { number: true },
			digits: { digits: true },
			creditcard: { creditcard: true }
		},

		addClassRules: function addClassRules(className, rules) {
			if (className.constructor === String) {
				this.classRuleSettings[className] = rules;
			} else {
				$.extend(this.classRuleSettings, className);
			}
		},

		classRules: function classRules(element) {
			var rules = {},
			    classes = $(element).attr("class");

			if (classes) {
				$.each(classes.split(" "), function () {
					if (this in $.validator.classRuleSettings) {
						$.extend(rules, $.validator.classRuleSettings[this]);
					}
				});
			}
			return rules;
		},

		normalizeAttributeRule: function normalizeAttributeRule(rules, type, method, value) {

			// Convert the value to a number for number inputs, and for text for backwards compability
			// allows type="date" and others to be compared as strings
			if (/min|max|step/.test(method) && (type === null || /number|range|text/.test(type))) {
				value = Number(value);

				// Support Opera Mini, which returns NaN for undefined minlength
				if (isNaN(value)) {
					value = undefined;
				}
			}

			if (value || value === 0) {
				rules[method] = value;
			} else if (type === method && type !== "range") {

				// Exception: the jquery validate 'range' method
				// does not test for the html5 'range' type
				rules[method] = true;
			}
		},

		attributeRules: function attributeRules(element) {
			var rules = {},
			    $element = $(element),
			    type = element.getAttribute("type"),
			    method,
			    value;

			for (method in $.validator.methods) {

				// Support for <input required> in both html5 and older browsers
				if (method === "required") {
					value = element.getAttribute(method);

					// Some browsers return an empty string for the required attribute
					// and non-HTML5 browsers might have required="" markup
					if (value === "") {
						value = true;
					}

					// Force non-HTML5 browsers to return bool
					value = !!value;
				} else {
					value = $element.attr(method);
				}

				this.normalizeAttributeRule(rules, type, method, value);
			}

			// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
			if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
				delete rules.maxlength;
			}

			return rules;
		},

		dataRules: function dataRules(element) {
			var rules = {},
			    $element = $(element),
			    type = element.getAttribute("type"),
			    method,
			    value;

			for (method in $.validator.methods) {
				value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase());

				// Cast empty attributes like `data-rule-required` to `true`
				if (value === "") {
					value = true;
				}

				this.normalizeAttributeRule(rules, type, method, value);
			}
			return rules;
		},

		staticRules: function staticRules(element) {
			var rules = {},
			    validator = $.data(element.form, "validator");

			if (validator.settings.rules) {
				rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
			}
			return rules;
		},

		normalizeRules: function normalizeRules(rules, element) {

			// Handle dependency check
			$.each(rules, function (prop, val) {

				// Ignore rule when param is explicitly false, eg. required:false
				if (val === false) {
					delete rules[prop];
					return;
				}
				if (val.param || val.depends) {
					var keepRule = true;
					switch (_typeof(val.depends)) {
						case "string":
							keepRule = !!$(val.depends, element.form).length;
							break;
						case "function":
							keepRule = val.depends.call(element, element);
							break;
					}
					if (keepRule) {
						rules[prop] = val.param !== undefined ? val.param : true;
					} else {
						$.data(element.form, "validator").resetElements($(element));
						delete rules[prop];
					}
				}
			});

			// Evaluate parameters
			$.each(rules, function (rule, parameter) {
				rules[rule] = $.isFunction(parameter) && rule !== "normalizer" ? parameter(element) : parameter;
			});

			// Clean number parameters
			$.each(["minlength", "maxlength"], function () {
				if (rules[this]) {
					rules[this] = Number(rules[this]);
				}
			});
			$.each(["rangelength", "range"], function () {
				var parts;
				if (rules[this]) {
					if ($.isArray(rules[this])) {
						rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
					} else if (typeof rules[this] === "string") {
						parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/);
						rules[this] = [Number(parts[0]), Number(parts[1])];
					}
				}
			});

			if ($.validator.autoCreateRanges) {

				// Auto-create ranges
				if (rules.min != null && rules.max != null) {
					rules.range = [rules.min, rules.max];
					delete rules.min;
					delete rules.max;
				}
				if (rules.minlength != null && rules.maxlength != null) {
					rules.rangelength = [rules.minlength, rules.maxlength];
					delete rules.minlength;
					delete rules.maxlength;
				}
			}

			return rules;
		},

		// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
		normalizeRule: function normalizeRule(data) {
			if (typeof data === "string") {
				var transformed = {};
				$.each(data.split(/\s/), function () {
					transformed[this] = true;
				});
				data = transformed;
			}
			return data;
		},

		// https://jqueryvalidation.org/jQuery.validator.addMethod/
		addMethod: function addMethod(name, method, message) {
			$.validator.methods[name] = method;
			$.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
			if (method.length < 3) {
				$.validator.addClassRules(name, $.validator.normalizeRule(name));
			}
		},

		// https://jqueryvalidation.org/jQuery.validator.methods/
		methods: {

			// https://jqueryvalidation.org/required-method/
			required: function required(value, element, param) {

				// Check if dependency is met
				if (!this.depend(param, element)) {
					return "dependency-mismatch";
				}
				if (element.nodeName.toLowerCase() === "select") {

					// Could be an array for select-multiple or a string, both are fine this way
					var val = $(element).val();
					return val && val.length > 0;
				}
				if (this.checkable(element)) {
					return this.getLength(value, element) > 0;
				}
				return value !== undefined && value !== null && value.length > 0;
			},

			// https://jqueryvalidation.org/email-method/
			email: function email(value, element) {

				// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
				// Retrieved 2014-01-14
				// If you have a problem with this implementation, report a bug against the above spec
				// Or use custom methods to implement your own email validation
				return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
			},

			// https://jqueryvalidation.org/url-method/
			url: function url(value, element) {

				// Copyright (c) 2010-2013 Diego Perini, MIT licensed
				// https://gist.github.com/dperini/729294
				// see also https://mathiasbynens.be/demo/url-regex
				// modified to allow protocol-relative URLs
				return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
			},

			// https://jqueryvalidation.org/date-method/
			date: function () {
				var called = false;

				return function (value, element) {
					if (!called) {
						called = true;
						if (this.settings.debug && window.console) {
							console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\n" + "Please don't use it, since it relies on the Date constructor, which\n" + "behaves very differently across browsers and locales. Use `dateISO`\n" + "instead or one of the locale specific methods in `localizations/`\n" + "and `additional-methods.js`.");
						}
					}

					return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
				};
			}(),

			// https://jqueryvalidation.org/dateISO-method/
			dateISO: function dateISO(value, element) {
				return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
			},

			// https://jqueryvalidation.org/number-method/
			number: function number(value, element) {
				return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
			},

			// https://jqueryvalidation.org/digits-method/
			digits: function digits(value, element) {
				return this.optional(element) || /^\d+$/.test(value);
			},

			// https://jqueryvalidation.org/minlength-method/
			minlength: function minlength(value, element, param) {
				var length = $.isArray(value) ? value.length : this.getLength(value, element);
				return this.optional(element) || length >= param;
			},

			// https://jqueryvalidation.org/maxlength-method/
			maxlength: function maxlength(value, element, param) {
				var length = $.isArray(value) ? value.length : this.getLength(value, element);
				return this.optional(element) || length <= param;
			},

			// https://jqueryvalidation.org/rangelength-method/
			rangelength: function rangelength(value, element, param) {
				var length = $.isArray(value) ? value.length : this.getLength(value, element);
				return this.optional(element) || length >= param[0] && length <= param[1];
			},

			// https://jqueryvalidation.org/min-method/
			min: function min(value, element, param) {
				return this.optional(element) || value >= param;
			},

			// https://jqueryvalidation.org/max-method/
			max: function max(value, element, param) {
				return this.optional(element) || value <= param;
			},

			// https://jqueryvalidation.org/range-method/
			range: function range(value, element, param) {
				return this.optional(element) || value >= param[0] && value <= param[1];
			},

			// https://jqueryvalidation.org/step-method/
			step: function step(value, element, param) {
				var type = $(element).attr("type"),
				    errorMessage = "Step attribute on input type " + type + " is not supported.",
				    supportedTypes = ["text", "number", "range"],
				    re = new RegExp("\\b" + type + "\\b"),
				    notSupported = type && !re.test(supportedTypes.join()),
				    decimalPlaces = function decimalPlaces(num) {
					var match = ("" + num).match(/(?:\.(\d+))?$/);
					if (!match) {
						return 0;
					}

					// Number of digits right of decimal point.
					return match[1] ? match[1].length : 0;
				},
				    toInt = function toInt(num) {
					return Math.round(num * Math.pow(10, decimals));
				},
				    valid = true,
				    decimals;

				// Works only for text, number and range input types
				// TODO find a way to support input types date, datetime, datetime-local, month, time and week
				if (notSupported) {
					throw new Error(errorMessage);
				}

				decimals = decimalPlaces(param);

				// Value can't have too many decimals
				if (decimalPlaces(value) > decimals || toInt(value) % toInt(param) !== 0) {
					valid = false;
				}

				return this.optional(element) || valid;
			},

			// https://jqueryvalidation.org/equalTo-method/
			equalTo: function equalTo(value, element, param) {

				// Bind to the blur event of the target in order to revalidate whenever the target field is updated
				var target = $(param);
				if (this.settings.onfocusout && target.not(".validate-equalTo-blur").length) {
					target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function () {
						$(element).valid();
					});
				}
				return value === target.val();
			},

			// https://jqueryvalidation.org/remote-method/
			remote: function remote(value, element, param, method) {
				if (this.optional(element)) {
					return "dependency-mismatch";
				}

				method = typeof method === "string" && method || "remote";

				var previous = this.previousValue(element, method),
				    validator,
				    data,
				    optionDataString;

				if (!this.settings.messages[element.name]) {
					this.settings.messages[element.name] = {};
				}
				previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method];
				this.settings.messages[element.name][method] = previous.message;

				param = typeof param === "string" && { url: param } || param;
				optionDataString = $.param($.extend({ data: value }, param.data));
				if (previous.old === optionDataString) {
					return previous.valid;
				}

				previous.old = optionDataString;
				validator = this;
				this.startRequest(element);
				data = {};
				data[element.name] = value;
				$.ajax($.extend(true, {
					mode: "abort",
					port: "validate" + element.name,
					dataType: "json",
					data: data,
					context: validator.currentForm,
					success: function success(response) {
						var valid = response === true || response === "true",
						    errors,
						    message,
						    submitted;

						validator.settings.messages[element.name][method] = previous.originalMessage;
						if (valid) {
							submitted = validator.formSubmitted;
							validator.resetInternals();
							validator.toHide = validator.errorsFor(element);
							validator.formSubmitted = submitted;
							validator.successList.push(element);
							validator.invalid[element.name] = false;
							validator.showErrors();
						} else {
							errors = {};
							message = response || validator.defaultMessage(element, { method: method, parameters: value });
							errors[element.name] = previous.message = message;
							validator.invalid[element.name] = true;
							validator.showErrors(errors);
						}
						previous.valid = valid;
						validator.stopRequest(element, valid);
					}
				}, param));
				return "pending";
			}
		}

	});

	// Ajax mode: abort
	// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
	// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

	var pendingRequests = {},
	    ajax;

	// Use a prefilter if available (1.5+)
	if ($.ajaxPrefilter) {
		$.ajaxPrefilter(function (settings, _, xhr) {
			var port = settings.port;
			if (settings.mode === "abort") {
				if (pendingRequests[port]) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = xhr;
			}
		});
	} else {

		// Proxy ajax
		ajax = $.ajax;
		$.ajax = function (settings) {
			var mode = ("mode" in settings ? settings : $.ajaxSettings).mode,
			    port = ("port" in settings ? settings : $.ajaxSettings).port;
			if (mode === "abort") {
				if (pendingRequests[port]) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = ajax.apply(this, arguments);
				return pendingRequests[port];
			}
			return ajax.apply(this, arguments);
		};
	}
	return $;
});

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
(function (global, factory) {

	"use strict";

	if (( false ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call(Object);

	var support = {};

	var isFunction = function isFunction(obj) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		return typeof obj === "function" && typeof obj.nodeType !== "number";
	};

	var isWindow = function isWindow(obj) {
		return obj != null && obj === obj.window;
	};

	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval(code, node, doc) {
		doc = doc || document;

		var i,
		    val,
		    script = doc.createElement("script");

		script.text = code;
		if (node) {
			for (i in preservedScriptAttributes) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[i] || node.getAttribute && node.getAttribute(i);
				if (val) {
					script.setAttribute(i, val);
				}
			}
		}
		doc.head.appendChild(script).parentNode.removeChild(script);
	}

	function toType(obj) {
		if (obj == null) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module


	var version = "3.4.1",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {

			// Return all the elements in a clean array
			if (num == null) {
				return _slice.call(this);
			}

			// Return just the one element from the set
			return num < 0 ? this[num + this.length] : this[num];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function each(callback) {
			return jQuery.each(this, callback);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					copy = options[name];

					// Prevent Object.prototype pollution
					// Prevent never-ending loop
					if (name === "__proto__" || target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
						src = target[name];

						// Ensure proper type for the source value
						if (copyIsArray && !Array.isArray(src)) {
							clone = [];
						} else if (!copyIsArray && !jQuery.isPlainObject(src)) {
							clone = {};
						} else {
							clone = src;
						}
						copyIsArray = false;

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isPlainObject: function isPlainObject(obj) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if (!obj || toString.call(obj) !== "[object Object]") {
				return false;
			}

			proto = getProto(obj);

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if (!proto) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
			return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
		},

		isEmptyObject: function isEmptyObject(obj) {
			var name;

			for (name in obj) {
				return false;
			}
			return true;
		},

		// Evaluates a script in a global context
		globalEval: function globalEval(code, options) {
			DOMEval(code, { nonce: options && options.nonce });
		},

		each: function each(obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
		    type = toType(obj);

		if (isFunction(obj) || isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.3.4
  * https://sizzlejs.com/
  *
  * Copyright JS Foundation and other contributors
  * Released under the MIT license
  * https://js.foundation/
  *
  * Date: 2019-04-08
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    nonnativeSelectorCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",


		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rdescend = new RegExp(whitespace + "|>"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rhtml = /HTML$/i,
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,


		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		    fcssescape = function fcssescape(ch, asCodePoint) {
			if (asCodePoint) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if (ch === "\0") {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		},
		    inDisabledFieldset = addCombinator(function (elem) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		}, { dir: "parentNode", next: "legend" });

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
						if (m = match[1]) {

							// Document context
							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

								// Element context
							} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

							// Type selector
						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					// Take advantage of querySelectorAll
					if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (

					// Support: IE 8 only
					// Exclude object elements
					nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {

						newSelector = selector;
						newContext = context;

						// qSA considers elements outside a scoping root when evaluating child or
						// descendant combinators, which is not what we want.
						// In such cases, we work around the behavior by prefixing every selector in the
						// list with an ID selector referencing the scope context.
						// Thanks to Andrew Dupont for this technique.
						if (nodeType === 1 && rdescend.test(selector)) {

							// Capture the context ID, setting it first if necessary
							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rcssescape, fcssescape);
							} else {
								context.setAttribute("id", nid = expando);
							}

							// Prefix every selector in the list
							groups = tokenize(selector);
							i = groups.length;
							while (i--) {
								groups[i] = "#" + nid + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						try {
							push.apply(results, newContext.querySelectorAll(newSelector));
							return results;
						} catch (qsaError) {
							nonnativeSelectorCache(selector, true);
						} finally {
							if (nid === expando) {
								context.removeAttribute("id");
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */
		function assert(fn) {
			var el = document.createElement("fieldset");

			try {
				return !!fn(el);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (el.parentNode) {
					el.parentNode.removeChild(el);
				}
				// release memory in IE
				el = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */
		function createDisabledPseudo(disabled) {

			// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
			return function (elem) {

				// Only certain elements can match :enabled or :disabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
				if ("form" in elem) {

					// Check for inherited disabledness on relevant non-disabled elements:
					// * listed form-associated elements in a disabled fieldset
					//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
					// * option elements in a disabled optgroup
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
					// All such elements have a "form" property.
					if (elem.parentNode && elem.disabled === false) {

						// Option elements defer to a parent optgroup if present
						if ("label" in elem) {
							if ("label" in elem.parentNode) {
								return elem.parentNode.disabled === disabled;
							} else {
								return elem.disabled === disabled;
							}
						}

						// Support: IE 6 - 11
						// Use the isDisabled shortcut property to check for disabled fieldset ancestors
						return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
					}

					return elem.disabled === disabled;

					// Try to winnow out elements that can't be disabled before trusting the disabled property.
					// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
					// even exist on them, let alone have a boolean value.
				} else if ("label" in elem) {
					return elem.disabled === disabled;
				}

				// Remaining elements are neither :enabled nor :disabled
				return false;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			var namespace = elem.namespaceURI,
			    docElem = (elem.ownerDocument || elem).documentElement;

			// Support: IE <=8
			// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
			// https://bugs.jquery.com/ticket/4833
			return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    subWindow,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

				// Support: IE 11, Edge
				if (subWindow.addEventListener) {
					subWindow.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (subWindow.attachEvent) {
					subWindow.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (el) {
				el.className = "i";
				return !el.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (el) {
				el.appendChild(document.createComment(""));
				return !el.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programmatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (el) {
				docElem.appendChild(el).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID filter and find
			if (support.getById) {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var elem = context.getElementById(id);
						return elem ? [elem] : [];
					}
				};
			} else {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};

				// Support: IE 6 - 7 only
				// getElementById is not reliable as a find shortcut
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var node,
						    i,
						    elems,
						    elem = context.getElementById(id);

						if (elem) {

							// Verify the id attribute
							node = elem.getAttributeNode("id");
							if (node && node.value === id) {
								return [elem];
							}

							// Fall back on getElementsByName
							elems = context.getElementsByName(id);
							i = 0;
							while (elem = elems[i++]) {
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}
							}
						}

						return [];
					}
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See https://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (el) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// https://bugs.jquery.com/ticket/12359
					docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (el.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!el.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!el.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibling-combinator selector` fails
					if (!el.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (el) {
					el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					el.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (el.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (el.querySelectorAll(":enabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Support: IE9-11+
					// IE's :disabled selector does not pick up the children of disabled fieldsets
					docElem.appendChild(el).disabled = true;
					if (el.querySelectorAll(":disabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					el.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (el) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(el, "*");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(el, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {
					nonnativeSelectorCache(expr, true);
				}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.escape = function (sel) {
			return (sel + "").replace(rcssescape, fcssescape);
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								// Use previously-cached element index if available
								if (useCache) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											// Cache the index of each encountered element
											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": createDisabledPseudo(false),
				"disabled": createDisabledPseudo(true),

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument > length ? length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    skip = combinator.next,
			    key = skip || dir,
			    checkNonElements = base && key === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if (skip && skip === elem.nodeName.toLowerCase()) {
								elem = elem[dir] || elem;
							} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[key] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (el) {
			// Should return 1, but returns 4 (following)
			return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (el) {
			el.innerHTML = "<a href='#'></a>";
			return el.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (el) {
			el.innerHTML = "<input/>";
			el.firstChild.setAttribute("value", "");
			return el.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (el) {
			return el.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function dir(elem, _dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[_dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var _siblings = function _siblings(n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	};
	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		// Single element
		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if (typeof qualifier !== "string") {
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		// Filtered directly for both simple and complex selectors
		return jQuery.filter(qualifier, elements, not);
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		if (elems.length === 1 && elem.nodeType === 1) {
			return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
		}

		return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret,
			    len = this.length,
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			ret = this.pushStack([]);

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			return len > 1 ? jQuery.uniqueSort(ret) : ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							// Properties of context are called as methods if possible
							if (isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					if (elem) {

						// Inject the element directly into the jQuery object
						this[0] = elem;
						this.length = 1;
					}
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || root).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			// Execute immediately if ready is not present
			selector(jQuery);
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    targets = typeof selectors !== "string" && jQuery(selectors);

			// Positional selectors never match, since there's no _selection_ context
			if (!rneedsContext.test(selectors)) {
				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						// Always skip document fragments
						if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return _siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return _siblings(elem.firstChild);
		},
		contents: function contents(elem) {
			if (typeof elem.contentDocument !== "undefined") {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if (nodeName(elem, "template")) {
				elem = elem.content || elem;
			}

			return jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,


		// Last fire value for non-forgettable lists
		memory,


		// Flag to know if list was already fired
		_fired,


		// Flag to prevent firing
		_locked,


		// Actual callback list
		list = [],


		// Queue of execution data for repeatable lists
		queue = [],


		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,


		// Fire callbacks
		fire = function fire() {

			// Enforce single-firing
			_locked = _locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			_fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					// Run callback and check for early termination
					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if (!options.memory) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if (_locked) {

				// Keep an empty list if we have data for future add calls
				if (memory) {
					list = [];

					// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},


		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {

					// If we have memory from a past run, we should fire after adding
					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && toType(arg) !== "string") {

								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function remove() {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						// Handle firing indexes
						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function empty() {
				if (list) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function disable() {
				_locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function disabled() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function lock() {
				_locked = queue = [];
				if (!memory && !firing) {
					list = memory = "";
				}
				return this;
			},
			locked: function locked() {
				return !!_locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (!_locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	function Identity(v) {
		return v;
	}
	function Thrower(ex) {
		throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if (value && isFunction(method = value.promise)) {
				method.call(value).done(resolve).fail(reject);

				// Other thenables
			} else if (value && isFunction(method = value.then)) {
				method.call(value, resolve, reject);

				// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply(undefined, [value].slice(noValue));
			}

			// For Promises/A+, convert exceptions into rejections
			// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
			// Deferred#then to conditionally suppress rejection.
		} catch (value) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply(undefined, [value]);
		}
	}

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [

			// action, add listener, callbacks,
			// ... .then handlers, argument index, [final state]
			["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				"catch": function _catch(fn) {
					return _promise.then(null, fn);
				},

				// Keep pipe for back-compat
				pipe: function pipe() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;

					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				then: function then(onFulfilled, onRejected, onProgress) {
					var maxDepth = 0;
					function resolve(depth, deferred, handler, special) {
						return function () {
							var that = this,
							    args = arguments,
							    mightThrow = function mightThrow() {
								var returned, then;

								// Support: Promises/A+ section 2.3.3.3.3
								// https://promisesaplus.com/#point-59
								// Ignore double-resolution attempts
								if (depth < maxDepth) {
									return;
								}

								returned = handler.apply(that, args);

								// Support: Promises/A+ section 2.3.1
								// https://promisesaplus.com/#point-48
								if (returned === deferred.promise()) {
									throw new TypeError("Thenable self-resolution");
								}

								// Support: Promises/A+ sections 2.3.3.1, 3.5
								// https://promisesaplus.com/#point-54
								// https://promisesaplus.com/#point-75
								// Retrieve `then` only once
								then = returned && (

								// Support: Promises/A+ section 2.3.4
								// https://promisesaplus.com/#point-64
								// Only check objects and functions for thenability
								(typeof returned === "undefined" ? "undefined" : _typeof(returned)) === "object" || typeof returned === "function") && returned.then;

								// Handle a returned thenable
								if (isFunction(then)) {

									// Special processors (notify) just wait for resolution
									if (special) {
										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

										// Normal processors (resolve) also hook into progress
									} else {

										// ...and disregard older resolution values
										maxDepth++;

										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
									}

									// Handle all other returned values
								} else {

									// Only substitute handlers pass on context
									// and multiple values (non-spec behavior)
									if (handler !== Identity) {
										that = undefined;
										args = [returned];
									}

									// Process the value(s)
									// Default process is resolve
									(special || deferred.resolveWith)(that, args);
								}
							},


							// Only normal processors (resolve) catch and reject exceptions
							process = special ? mightThrow : function () {
								try {
									mightThrow();
								} catch (e) {

									if (jQuery.Deferred.exceptionHook) {
										jQuery.Deferred.exceptionHook(e, process.stackTrace);
									}

									// Support: Promises/A+ section 2.3.3.3.4.1
									// https://promisesaplus.com/#point-61
									// Ignore post-resolution exceptions
									if (depth + 1 >= maxDepth) {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Thrower) {
											that = undefined;
											args = [e];
										}

										deferred.rejectWith(that, args);
									}
								}
							};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if (depth) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(process);
							}
						};
					}

					return jQuery.Deferred(function (newDefer) {

						// progress_handlers.add( ... )
						tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

						// fulfilled_handlers.add( ... )
						tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));

						// rejected_handlers.add( ... )
						tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
					}).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[5];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						_state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[3 - i][2].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[3 - i][3].disable,

					// progress_callbacks.lock
					tuples[0][2].lock,

					// progress_handlers.lock
					tuples[0][3].lock);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add(tuple[3].fire);

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(singleValue) {
			var

			// count of uncompleted subordinates
			remaining = arguments.length,


			// count of unprocessed arguments
			i = remaining,


			// subordinate fulfillment data
			resolveContexts = Array(i),
			    resolveValues = _slice.call(arguments),


			// the master Deferred
			master = jQuery.Deferred(),


			// subordinate callback factory
			updateFunc = function updateFunc(i) {
				return function (value) {
					resolveContexts[i] = this;
					resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (! --remaining) {
						master.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

			// Single- and empty arguments are adopted like Promise.resolve
			if (remaining <= 1) {
				adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while (i--) {
				adoptValue(resolveValues[i], updateFunc(i), master.reject);
			}

			return master.promise();
		}
	});

	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
			window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
		}
	};

	jQuery.readyException = function (error) {
		window.setTimeout(function () {
			throw error;
		});
	};

	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {

		readyList.then(fn)

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch(function (error) {
			jQuery.readyException(error);
		});

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);
		}
	});

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout(jQuery.ready);
	} else {

		// Use the handy event callback
		document.addEventListener("DOMContentLoaded", completed);

		// A fallback to window.onload, that will always work
		window.addEventListener("load", completed);
	}

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (toType(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		// Gets
		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};

	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g;

	// Used by camelCase as callback to replace()
	function fcamelCase(all, letter) {
		return letter.toUpperCase();
	}

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase(string) {
		return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
	}
	var acceptData = function acceptData(owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function cache(owner) {

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function set(owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if (typeof data === "string") {
				cache[camelCase(data)] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for (prop in data) {
					cache[camelCase(prop)] = data[prop];
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			return key === undefined ? this.cache(owner) :

			// Always use camelCase key (gh-2257)
			owner[this.expando] && owner[this.expando][camelCase(key)];
		},
		access: function access(owner, key, value) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				return this.get(owner, key);
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key !== undefined) {

				// Support array or space separated string of keys
				if (Array.isArray(key)) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map(camelCase);
				} else {
					key = camelCase(key);

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
				}

				i = key.length;

				while (i--) {
					delete cache[key[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function hasData(owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
		if (data === "true") {
			return true;
		}

		if (data === "false") {
			return false;
		}

		if (data === "null") {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if (data === +data + "") {
			return +data;
		}

		if (rbrace.test(data)) {
			return JSON.parse(data);
		}

		return data;
	}

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = getData(data);
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return dataUser.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function _data(elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, key);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {

					// We always store the camelCased key
					dataUser.set(this, key, value);
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || Array.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var documentElement = document.documentElement;

	var isAttached = function isAttached(elem) {
		return jQuery.contains(elem.ownerDocument, elem);
	},
	    composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if (documentElement.getRootNode) {
		isAttached = function isAttached(elem) {
			return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
		};
	}
	var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" || elem.style.display === "" &&

		// Otherwise, check computed style
		// Support: Firefox <=43 - 45
		// Disconnected elements can have computed display: none, so first confirm that elem is
		// in the document.
		isAttached(elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function swap(elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			while (maxIterations--) {

				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style(elem, prop, initialInUnit + unit);
				if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;
			}

			initialInUnit = initialInUnit * 2;
			jQuery.style(elem, prop, initialInUnit + unit);

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
		var temp,
		    doc = elem.ownerDocument,
		    nodeName = elem.nodeName,
		    display = defaultDisplayMap[nodeName];

		if (display) {
			return display;
		}

		temp = doc.body.appendChild(doc.createElement(nodeName));
		display = jQuery.css(temp, "display");

		temp.parentNode.removeChild(temp);

		if (display === "none") {
			display = "block";
		}
		defaultDisplayMap[nodeName] = display;

		return display;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    values = [],
		    index = 0,
		    length = elements.length;

		// Determine new display value for elements that need to change
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			display = elem.style.display;
			if (show) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if (display === "none") {
					values[index] = dataPriv.get(elem, "display") || null;
					if (!values[index]) {
						elem.style.display = "";
					}
				}
				if (elem.style.display === "" && isHiddenWithinTree(elem)) {
					values[index] = getDefaultDisplay(elem);
				}
			} else {
				if (display !== "none") {
					values[index] = "none";

					// Remember what we're overwriting
					dataPriv.set(elem, "display", display);
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for (index = 0; index < length; index++) {
			if (values[index] != null) {
				elements[index].style.display = values[index];
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHiddenWithinTree(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

	var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if (typeof context.getElementsByTagName !== "undefined") {
			ret = context.getElementsByTagName(tag || "*");
		} else if (typeof context.querySelectorAll !== "undefined") {
			ret = context.querySelectorAll(tag || "*");
		} else {
			ret = [];
		}

		if (tag === undefined || tag && nodeName(context, tag)) {
			return jQuery.merge([context], ret);
		}

		return ret;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    attached,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (toType(elem) === "object") {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			attached = isAttached(elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (attached) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 - 11+
	// focus() and blur() are asynchronous, except when they are no-op.
	// So expect focus to be synchronous when the element is already active,
	// and blur to be synchronous when the element is not already active.
	// (focus and blur are always synchronous in other supported browsers,
	// this just defines when we can count on it).
	function expectSync(elem, type) {
		return elem === safeActiveElement() === (type === "focus");
	}

	// Support: IE <=9 only
	// Accessing document.activeElement can throw unexpectedly
	// https://bugs.jquery.com/ticket/13393
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				_on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function fn(event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if (selector) {
				jQuery.find.matchesSelector(documentElement, selector);
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function dispatch(nativeEvent) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix(nativeEvent);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue,
			    args = new Array(arguments.length),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;

			for (i = 1; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// If the event is namespaced, then each handler is only invoked if it is
					// specially universal or its namespaces are a superset of the event's.
					if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    handleObj,
			    sel,
			    matchedHandlers,
			    matchedSelectors,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			if (delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!(event.type === "click" && event.button >= 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
						matchedHandlers = [];
						matchedSelectors = {};
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matchedSelectors[sel] === undefined) {
								matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matchedSelectors[sel]) {
								matchedHandlers.push(handleObj);
							}
						}
						if (matchedHandlers.length) {
							handlerQueue.push({ elem: cur, handlers: matchedHandlers });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		addProp: function addProp(name, hook) {
			Object.defineProperty(jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: isFunction(hook) ? function () {
					if (this.originalEvent) {
						return hook(this.originalEvent);
					}
				} : function () {
					if (this.originalEvent) {
						return this.originalEvent[name];
					}
				},

				set: function set(value) {
					Object.defineProperty(this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					});
				}
			});
		},

		fix: function fix(originalEvent) {
			return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			click: {

				// Utilize native event to ensure correct state for checkable inputs
				setup: function setup(data) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Claim the first handler
					if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {

						// dataPriv.set( el, "click", ... )
						leverageNative(el, "click", returnTrue);
					}

					// Return false to allow normal processing in the caller
					return false;
				},
				trigger: function trigger(data) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Force setup before triggering a click
					if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {

						leverageNative(el, "click");
					}

					// Return non-false to allow normal event-path propagation
					return true;
				},

				// For cross-browser consistency, suppress native .click() on links
				// Also prevent it if we're currently inside a leveraged native-event stack
				_default: function _default(event) {
					var target = event.target;
					return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	// Ensure the presence of an event listener that handles manually-triggered
	// synthetic events by interrupting progress until reinvoked in response to
	// *native* events that it fires directly, ensuring that state changes have
	// already occurred before other listeners are invoked.
	function leverageNative(el, type, expectSync) {

		// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
		if (!expectSync) {
			if (dataPriv.get(el, type) === undefined) {
				jQuery.event.add(el, type, returnTrue);
			}
			return;
		}

		// Register the controller as a special universal handler for all event namespaces
		dataPriv.set(el, type, false);
		jQuery.event.add(el, type, {
			namespace: false,
			handler: function handler(event) {
				var notAsync,
				    result,
				    saved = dataPriv.get(this, type);

				if (event.isTrigger & 1 && this[type]) {

					// Interrupt processing of the outer synthetic .trigger()ed event
					// Saved data should be false in such cases, but might be a leftover capture object
					// from an async native handler (gh-4350)
					if (!saved.length) {

						// Store arguments for use when handling the inner native event
						// There will always be at least one argument (an event object), so this array
						// will not be confused with a leftover capture object.
						saved = _slice.call(arguments);
						dataPriv.set(this, type, saved);

						// Trigger the native event and capture its result
						// Support: IE <=9 - 11+
						// focus() and blur() are asynchronous
						notAsync = expectSync(this, type);
						this[type]();
						result = dataPriv.get(this, type);
						if (saved !== result || notAsync) {
							dataPriv.set(this, type, false);
						} else {
							result = {};
						}
						if (saved !== result) {

							// Cancel the outer synthetic event
							event.stopImmediatePropagation();
							event.preventDefault();
							return result.value;
						}

						// If this is an inner synthetic event for an event with a bubbling surrogate
						// (focus or blur), assume that the surrogate already propagated from triggering the
						// native event and prevent that from happening again here.
						// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
						// bubbling surrogate propagates *after* the non-bubbling base), but that seems
						// less bad than duplication.
					} else if ((jQuery.event.special[type] || {}).delegateType) {
						event.stopPropagation();
					}

					// If this is a native event triggered above, everything is now in order
					// Fire an inner synthetic event with the original arguments
				} else if (saved.length) {

					// ...and capture the result
					dataPriv.set(this, type, {
						value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
					});

					// Abort handling of the native event
					event.stopImmediatePropagation();
				}
			}
		});
	}

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			// Support: Android <=2.3 only
			src.returnValue === false ? returnTrue : returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each({
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		code: true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function which(event) {
			var button = event.button;

			// Add which for key events
			if (event.which == null && rkeyEvent.test(event.type)) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
				if (button & 1) {
					return 1;
				}

				if (button & 2) {
					return 3;
				}

				if (button & 4) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp);

	jQuery.each({ focus: "focusin", blur: "focusout" }, function (type, delegateType) {
		jQuery.event.special[type] = {

			// Utilize native event if possible so blur/focus sequence is correct
			setup: function setup() {

				// Claim the first handler
				// dataPriv.set( this, "focus", ... )
				// dataPriv.set( this, "blur", ... )
				leverageNative(this, type, expectSync);

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function trigger() {

				// Force setup before trigger
				leverageNative(this, type);

				// Return non-false to allow normal event-path propagation
				return true;
			},

			delegateType: delegateType
		};
	});

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({

		on: function on(types, selector, data, fn) {
			return _on(this, types, selector, data, fn);
		},
		one: function one(types, selector, data, fn) {
			return _on(this, types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,


	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget(elem, content) {
		if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

			return jQuery(elem).children("tbody")[0] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		if ((elem.type || "").slice(0, 5) === "true/") {
			elem.type = elem.type.slice(5);
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    valueIsFunction = isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (valueIsFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src && (node.type || "").toLowerCase() !== "module") {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl && !node.noModule) {
									jQuery._evalUrl(node.src, {
										nonce: node.nonce || node.getAttribute("nonce")
									});
								}
							} else {
								DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function _remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && isAttached(node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function htmlPrefilter(html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = isAttached(elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		detach: function detach(selector) {
			return _remove(this, selector, true);
		},

		remove: function remove(selector) {
			return _remove(this, selector);
		},

		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

				// Force callback invocation
			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});
	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	var rboxStyle = new RegExp(cssExpand.join("|"), "i");

	(function () {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if (!div) {
				return;
			}

			container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
			div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
			documentElement.appendChild(container).appendChild(div);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			// Support: Chrome <=64
			// Don't get tricked when zoom affects offsetWidth (gh-4029)
			div.style.position = "absolute";
			scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

			documentElement.removeChild(container);

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		function roundPixelMeasures(measure) {
			return Math.round(parseFloat(measure));
		}

		var pixelPositionVal,
		    boxSizingReliableVal,
		    scrollboxSizeVal,
		    pixelBoxStylesVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		jQuery.extend(support, {
			boxSizingReliable: function boxSizingReliable() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function pixelBoxStyles() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function pixelPosition() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function reliableMarginLeft() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function scrollboxSize() {
				computeStyleTests();
				return scrollboxSizeVal;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,


		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

		computed = computed || getStyles(elem);

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];

			if (ret === "" && !isAttached(elem)) {
				ret = jQuery.style(elem, name);
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style,
	    vendorProps = {};

	// Return a vendor-prefixed property or undefined
	function vendorPropName(name) {

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
	function finalPropName(name) {
		var final = jQuery.cssProps[name] || vendorProps[name];

		if (final) {
			return final;
		}
		if (name in emptyStyle) {
			return name;
		}
		return vendorProps[name] = vendorPropName(name) || name;
	}

	var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
		var i = dimension === "width" ? 1 : 0,
		    extra = 0,
		    delta = 0;

		// Adjustment may not be necessary
		if (box === (isBorderBox ? "border" : "content")) {
			return 0;
		}

		for (; i < 4; i += 2) {

			// Both box models exclude margin
			if (box === "margin") {
				delta += jQuery.css(elem, box + cssExpand[i], true, styles);
			}

			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if (!isBorderBox) {

				// Add padding
				delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// For "border" or "margin", add border
				if (box !== "padding") {
					delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);

					// But still keep track of it otherwise
				} else {
					extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}

				// If we get here with a border-box (content + padding + border), we're seeking "content" or
				// "padding" or "margin"
			} else {

				// For "content", subtract padding
				if (box === "content") {
					delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// For "content" or "padding", subtract border
				if (box !== "margin") {
					delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		// Account for positive content-box scroll gutter when requested by providing computedVal
		if (!isBorderBox && computedVal >= 0) {

			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5

			// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
			// Use an explicit zero to avoid NaN (gh-3964)
			)) || 0;
		}

		return delta;
	}

	function getWidthOrHeight(elem, dimension, extra) {

		// Start with computed style
		var styles = getStyles(elem),


		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		    isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
		    valueIsBorderBox = isBorderBox,
		    val = curCSS(elem, dimension, styles),
		    offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if (rnumnonpx.test(val)) {
			if (!extra) {
				return val;
			}
			val = "auto";
		}

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		// Support: IE 9-11 only
		// Also use offsetWidth/offsetHeight for when box sizing is unreliable
		// We use getClientRects() to check for hidden/disconnected.
		// In those cases, the computed value can be trusted to be border-box
		if ((!support.boxSizingReliable() && isBorderBox || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {

			isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
			// retrieved value as a content box dimension.
			valueIsBorderBox = offsetProp in elem;
			if (valueIsBorderBox) {
				val = elem[offsetProp];
			}
		}

		// Normalize "" and auto
		val = parseFloat(val) || 0;

		// Adjust for the element's box model
		return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,

		// Provide the current computed size to request scroll gutter calculation (gh-3589)
		val) + "px";
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"gridArea": true,
			"gridColumn": true,
			"gridColumnEnd": true,
			"gridColumnStart": true,
			"gridRow": true,
			"gridRowEnd": true,
			"gridRowStart": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = camelCase(name),
			    isCustomProp = rcustomProp.test(name),
			    style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
				// "px" to a few hardcoded values.
				if (type === "number" && !isCustomProp) {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					if (isCustomProp) {
						style.setProperty(name, value);
					} else {
						style[name] = value;
					}
				}
			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = camelCase(name),
			    isCustomProp = rcustomProp.test(name);

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}

			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, dimension) {
		jQuery.cssHooks[dimension] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && (

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, dimension, extra);
					}) : getWidthOrHeight(elem, dimension, extra);
				}
			},

			set: function set(elem, value, extra) {
				var matches,
				    styles = getStyles(elem),


				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",


				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				    isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
				    subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;

				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if (isBorderBox && scrollboxSizeBuggy) {
					subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
				}

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[dimension] = value;
					value = jQuery.css(elem, dimension);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (prefix !== "margin") {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (Array.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    inProgress,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	function schedule() {
		if (inProgress) {
			if (document.hidden === false && window.requestAnimationFrame) {
				window.requestAnimationFrame(schedule);
			} else {
				window.setTimeout(schedule, jQuery.fx.interval);
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = Date.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    hooks,
		    oldfire,
		    propTween,
		    restoreDisplay,
		    display,
		    isBox = "width" in props || "height" in props,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHiddenWithinTree(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		// Queue-skipping animations hijack the fx hooks
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Detect show/hide animations
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.test(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;

						// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject(props);
		if (!propTween && jQuery.isEmptyObject(orig)) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if (isBox && elem.nodeType === 1) {

			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if (restoreDisplay == null) {
				restoreDisplay = dataPriv.get(elem, "display");
			}
			display = jQuery.css(elem, "display");
			if (display === "none") {
				if (restoreDisplay) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide([elem], true);
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css(elem, "display");
					showHide([elem]);
				}
			}

			// Animate inline elements as inline-block
			if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
				if (jQuery.css(elem, "float") === "none") {

					// Restore the original display value at the end of pure show/hide animations
					if (!propTween) {
						anim.done(function () {
							style.display = restoreDisplay;
						});
						if (restoreDisplay == null) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// Implement show/hide animations
		propTween = false;
		for (prop in orig) {

			// General show/hide setup for this element animation
			if (!propTween) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if (toggle) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if (hidden) {
					showHide([elem], true);
				}

				/* eslint-disable no-loop-func */

				anim.done(function () {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if (!hidden) {
						showHide([elem]);
					}
					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
			}

			// Per-property setup
			propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
			if (!(prop in dataShow)) {
				dataShow[prop] = propTween.start;
				if (hidden) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (Array.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			// Support: Android 2.3 only
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			// If there's more to do, yield
			if (percent < 1 && length) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if (!length) {
				deferred.notifyWith(elem, [animation, 1, 0]);
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith(elem, [animation]);
			return false;
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,


				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		// Attach callbacks from options
		animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation;
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function tweener(props, callback) {
			if (isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnothtmlwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction(easing) && easing
		};

		// Go to the end state if fx are off
		if (jQuery.fx.off) {
			opt.duration = 0;
		} else {
			if (typeof opt.duration !== "number") {
				if (opt.duration in jQuery.fx.speeds) {
					opt.duration = jQuery.fx.speeds[opt.duration];
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHiddenWithinTree).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = Date.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Run the timer and safely remove it when done (allowing for external removal)
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (inProgress) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function () {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    i = 0,


			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match(rnothtmlwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret,
			    handle,
			    lowercaseName = name.toLowerCase();

			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[lowercaseName];
				attrHandle[lowercaseName] = ret;
				ret = getter(elem, name, isXML) != null ? lowercaseName : null;
				attrHandle[lowercaseName] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					if (tabindex) {
						return parseInt(tabindex, 10);
					}

					if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function set(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse(value) {
		var tokens = value.match(rnothtmlwhite) || [];
		return tokens.join(" ");
	}

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	function classesToArray(value) {
		if (Array.isArray(value)) {
			return value;
		}
		if (typeof value === "string") {
			return value.match(rnothtmlwhite) || [];
		}
		return [];
	}

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			classes = classesToArray(value);

			if (classes.length) {
				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			classes = classesToArray(value);

			if (classes.length) {
				while (elem = this[i++]) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value),
			    isValidValue = type === "string" || Array.isArray(value);

			if (typeof stateVal === "boolean" && isValidValue) {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (isValidValue) {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
					classNames = classesToArray(value);

					while (className = classNames[i++]) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    valueIsFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if (typeof ret === "string") {
						return ret.replace(rreturn, "");
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			valueIsFunction = isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (valueIsFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (Array.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    i,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one",
					    values = one ? null : [],
					    max = one ? index + 1 : options.length;

					if (index < 0) {
						i = max;
					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&

						// Don't return options that are disabled or in a disabled optgroup
						!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						/* eslint-disable no-cond-assign */

						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (Array.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	support.focusin = "onfocusin" in window;

	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	    stopPropagationCallback = function stopPropagationCallback(e) {
		e.stopPropagation();
	};

	jQuery.extend(jQuery.event, {

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    lastElement,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = lastElement = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
				lastElement = cur;
				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && isFunction(elem[type]) && !isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;

						if (event.isPropagationStopped()) {
							lastElement.addEventListener(type, stopPropagationCallback);
						}

						elem[type]();

						if (event.isPropagationStopped()) {
							lastElement.removeEventListener(type, stopPropagationCallback);
						}

						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function simulate(type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = Date.now();

	var rquery = /\?/;

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (Array.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);
				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && toType(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, valueOrFunction) {

			// If value is a function, invoke it and use its return value
			var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
		};

		if (a == null) {
			return "";
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				if (val == null) {
					return null;
				}

				if (Array.isArray(val)) {
					return jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					});
				}

				return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	var r20 = /%20/g,
	    rhash = /#.*$/,
	    rantiCache = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Anchor tag for parsing the document origin
	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

			if (isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,


			// URL without anti-cache param
			cacheURL,


			// Response headers
			responseHeadersString,
			    responseHeaders,


			// timeout handle
			timeoutTimer,


			// Url cleanup var
			urlAnchor,


			// Request state (becomes false upon send and true upon completion)
			completed,


			// To know if global events are to be dispatched
			fireGlobals,


			// Loop variable
			i,


			// uncached part of the url
			uncached,


			// Create the final options object
			s = jQuery.ajaxSetup({}, options),


			// Callbacks context
			callbackContext = s.context || s,


			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			// Status-dependent callbacks
			_statusCode = s.statusCode || {},


			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},


			// Default abort message
			strAbort = "canceled",


			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (completed) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
							}
						}
						match = responseHeaders[key.toLowerCase() + " "];
					}
					return match == null ? null : match.join(", ");
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					if (completed == null) {
						name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (completed == null) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (completed) {

							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for (code in map) {
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR);

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (completed) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace(rhash, "");

			// More options handling for requests with no content
			if (!s.hasContent) {

				// Remember the hash so we can put it back
				uncached = s.url.slice(cacheURL.length);

				// If data is available and should be processed, append data to url
				if (s.data && (s.processData || typeof s.data === "string")) {
					cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if (s.cache === false) {
					cacheURL = cacheURL.replace(rantiCache, "$1");
					uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

				// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
				s.data = s.data.replace(r20, "+");
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add(s.complete);
			jqXHR.done(s.success);
			jqXHR.fail(s.error);

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (completed) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					completed = false;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Rethrow post-completion exceptions
					if (completed) {
						throw e;
					}

					// Propagate others as results
					done(-1, e);
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Ignore repeat invocations
				if (completed) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url, options) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,

			// Only evaluate the response if it is successful (gh-4126)
			// dataFilter is not invoked for failure responses, so using it instead
			// of the default converter is kludgy but it works.
			converters: {
				"text script": function textScript() {}
			},
			dataFilter: function dataFilter(response) {
				jQuery.globalEval(response, options);
			}
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (this[0]) {
				if (isFunction(html)) {
					html = html.call(this[0]);
				}

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var htmlIsFunction = isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap(selector) {
			this.parent(selector).not("body").each(function () {
				jQuery(this).replaceWith(this.childNodes);
			});
			return this;
		}
	});

	jQuery.expr.pseudos.hidden = function (elem) {
		return !jQuery.expr.pseudos.visible(elem);
	};
	jQuery.expr.pseudos.visible = function (elem) {
		return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	};

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					_callback = function callback(type) {
						return function () {
							if (_callback) {
								_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = _callback();
					errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (_callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					_callback = _callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter(function (s) {
		if (s.crossDomain) {
			s.contents.script = false;
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain or forced-by-attrs requests
		if (s.crossDomain || s.scriptAttrs) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
					window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = function () {
		var body = document.implementation.createHTMLDocument("").body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	}();

	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (typeof data !== "string") {
			return [];
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if (!context) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if (support.createHTMLDocument) {
				context = document.implementation.createHTMLDocument("");

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement("base");
				base.href = document.location.href;
				context.head.appendChild(base);
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec(data);
		scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = stripAndCollapse(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.pseudos.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({

		// offset() relates an element's border box to the document origin
		offset: function offset(options) {

			// Preserve chaining for setter
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var rect,
			    win,
			    elem = this[0];

			if (!elem) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if (!elem.getClientRects().length) {
				return { top: 0, left: 0 };
			}

			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},

		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    doc,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();
			} else {
				offset = this.offset();

				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {

					offsetParent = offsetParent.parentNode;
				}
				if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {

					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery(offsetParent).offset();
					parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
					parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
				}
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {

				// Coalesce documents and windows
				var win;
				if (isWindow(elem)) {
					win = elem;
				} else if (elem.nodeType === 9) {
					win = elem.defaultView;
				}

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (isWindow(elem)) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable);
			};
		});
	});

	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	jQuery.fn.extend({

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function (fn, context) {
		var tmp, args, proxy;

		if (typeof context === "string") {
			tmp = fn[context];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if (!isFunction(fn)) {
			return undefined;
		}

		// Simulated bind
		args = _slice.call(arguments, 2);
		proxy = function proxy() {
			return fn.apply(context || this, args.concat(_slice.call(arguments)));
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	};

	jQuery.holdReady = function (hold) {
		if (hold) {
			jQuery.readyWait++;
		} else {
			jQuery.ready(true);
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;

	jQuery.now = Date.now;

	jQuery.isNumeric = function (obj) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type(obj);
		return (type === "number" || type === "string") &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN(obj - parseFloat(obj));
	};

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return jQuery;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash.debounce/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash.debounce/index.js ***!
  \***********************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function now() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = debounce;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction ||
    // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function (arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
      // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
      // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function stop() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;
}(
// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? "undefined" : _typeof(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/smoothscroll-polyfill/dist/smoothscroll.js":
/*!*****************************************************************!*\
  !*** ./node_modules/smoothscroll-polyfill/dist/smoothscroll.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */
(function () {
  'use strict';

  // polyfill

  function polyfill() {
    // aliases
    var w = window;
    var d = document;

    // return if scroll behavior is supported and polyfill is not forced
    if ('scrollBehavior' in d.documentElement.style && w.__forceSmoothScrollPolyfill__ !== true) {
      return;
    }

    // globals
    var Element = w.HTMLElement || w.Element;
    var SCROLL_TIME = 468;

    // object gathering original scroll methods
    var original = {
      scroll: w.scroll || w.scrollTo,
      scrollBy: w.scrollBy,
      elementScroll: Element.prototype.scroll || scrollElement,
      scrollIntoView: Element.prototype.scrollIntoView
    };

    // define timing method
    var now = w.performance && w.performance.now ? w.performance.now.bind(w.performance) : Date.now;

    /**
     * indicates if a the current browser is made by Microsoft
     * @method isMicrosoftBrowser
     * @param {String} userAgent
     * @returns {Boolean}
     */
    function isMicrosoftBrowser(userAgent) {
      var userAgentPatterns = ['MSIE ', 'Trident/', 'Edge/'];

      return new RegExp(userAgentPatterns.join('|')).test(userAgent);
    }

    /*
     * IE has rounding bug rounding down clientHeight and clientWidth and
     * rounding up scrollHeight and scrollWidth causing false positives
     * on hasScrollableSpace
     */
    var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent) ? 1 : 0;

    /**
     * changes scroll position inside an element
     * @method scrollElement
     * @param {Number} x
     * @param {Number} y
     * @returns {undefined}
     */
    function scrollElement(x, y) {
      this.scrollLeft = x;
      this.scrollTop = y;
    }

    /**
     * returns result of applying ease math function to a number
     * @method ease
     * @param {Number} k
     * @returns {Number}
     */
    function ease(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }

    /**
     * indicates if a smooth behavior should be applied
     * @method shouldBailOut
     * @param {Number|Object} firstArg
     * @returns {Boolean}
     */
    function shouldBailOut(firstArg) {
      if (firstArg === null || (typeof firstArg === 'undefined' ? 'undefined' : _typeof(firstArg)) !== 'object' || firstArg.behavior === undefined || firstArg.behavior === 'auto' || firstArg.behavior === 'instant') {
        // first argument is not an object/null
        // or behavior is auto, instant or undefined
        return true;
      }

      if ((typeof firstArg === 'undefined' ? 'undefined' : _typeof(firstArg)) === 'object' && firstArg.behavior === 'smooth') {
        // first argument is an object and behavior is smooth
        return false;
      }

      // throw error when behavior is not supported
      throw new TypeError('behavior member of ScrollOptions ' + firstArg.behavior + ' is not a valid value for enumeration ScrollBehavior.');
    }

    /**
     * indicates if an element has scrollable space in the provided axis
     * @method hasScrollableSpace
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function hasScrollableSpace(el, axis) {
      if (axis === 'Y') {
        return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;
      }

      if (axis === 'X') {
        return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;
      }
    }

    /**
     * indicates if an element has a scrollable overflow property in the axis
     * @method canOverflow
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function canOverflow(el, axis) {
      var overflowValue = w.getComputedStyle(el, null)['overflow' + axis];

      return overflowValue === 'auto' || overflowValue === 'scroll';
    }

    /**
     * indicates if an element can be scrolled in either axis
     * @method isScrollable
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function isScrollable(el) {
      var isScrollableY = hasScrollableSpace(el, 'Y') && canOverflow(el, 'Y');
      var isScrollableX = hasScrollableSpace(el, 'X') && canOverflow(el, 'X');

      return isScrollableY || isScrollableX;
    }

    /**
     * finds scrollable parent of an element
     * @method findScrollableParent
     * @param {Node} el
     * @returns {Node} el
     */
    function findScrollableParent(el) {
      while (el !== d.body && isScrollable(el) === false) {
        el = el.parentNode || el.host;
      }

      return el;
    }

    /**
     * self invoked function that, given a context, steps through scrolling
     * @method step
     * @param {Object} context
     * @returns {undefined}
     */
    function step(context) {
      var time = now();
      var value;
      var currentX;
      var currentY;
      var elapsed = (time - context.startTime) / SCROLL_TIME;

      // avoid elapsed times higher than one
      elapsed = elapsed > 1 ? 1 : elapsed;

      // apply easing to elapsed time
      value = ease(elapsed);

      currentX = context.startX + (context.x - context.startX) * value;
      currentY = context.startY + (context.y - context.startY) * value;

      context.method.call(context.scrollable, currentX, currentY);

      // scroll more if we have not reached our destination
      if (currentX !== context.x || currentY !== context.y) {
        w.requestAnimationFrame(step.bind(w, context));
      }
    }

    /**
     * scrolls window or element with a smooth behavior
     * @method smoothScroll
     * @param {Object|Node} el
     * @param {Number} x
     * @param {Number} y
     * @returns {undefined}
     */
    function smoothScroll(el, x, y) {
      var scrollable;
      var startX;
      var startY;
      var method;
      var startTime = now();

      // define scroll context
      if (el === d.body) {
        scrollable = w;
        startX = w.scrollX || w.pageXOffset;
        startY = w.scrollY || w.pageYOffset;
        method = original.scroll;
      } else {
        scrollable = el;
        startX = el.scrollLeft;
        startY = el.scrollTop;
        method = scrollElement;
      }

      // scroll looping over a frame
      step({
        scrollable: scrollable,
        method: method,
        startTime: startTime,
        startX: startX,
        startY: startY,
        x: x,
        y: y
      });
    }

    // ORIGINAL METHODS OVERRIDES
    // w.scroll and w.scrollTo
    w.scroll = w.scrollTo = function () {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.scroll.call(w, arguments[0].left !== undefined ? arguments[0].left : _typeof(arguments[0]) !== 'object' ? arguments[0] : w.scrollX || w.pageXOffset,
        // use top prop, second argument if present or fallback to scrollY
        arguments[0].top !== undefined ? arguments[0].top : arguments[1] !== undefined ? arguments[1] : w.scrollY || w.pageYOffset);

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(w, d.body, arguments[0].left !== undefined ? ~~arguments[0].left : w.scrollX || w.pageXOffset, arguments[0].top !== undefined ? ~~arguments[0].top : w.scrollY || w.pageYOffset);
    };

    // w.scrollBy
    w.scrollBy = function () {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollBy.call(w, arguments[0].left !== undefined ? arguments[0].left : _typeof(arguments[0]) !== 'object' ? arguments[0] : 0, arguments[0].top !== undefined ? arguments[0].top : arguments[1] !== undefined ? arguments[1] : 0);

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(w, d.body, ~~arguments[0].left + (w.scrollX || w.pageXOffset), ~~arguments[0].top + (w.scrollY || w.pageYOffset));
    };

    // Element.prototype.scroll and Element.prototype.scrollTo
    Element.prototype.scroll = Element.prototype.scrollTo = function () {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        // if one number is passed, throw error to match Firefox implementation
        if (typeof arguments[0] === 'number' && arguments[1] === undefined) {
          throw new SyntaxError('Value could not be converted');
        }

        original.elementScroll.call(this,
        // use left prop, first number argument or fallback to scrollLeft
        arguments[0].left !== undefined ? ~~arguments[0].left : _typeof(arguments[0]) !== 'object' ? ~~arguments[0] : this.scrollLeft,
        // use top prop, second argument or fallback to scrollTop
        arguments[0].top !== undefined ? ~~arguments[0].top : arguments[1] !== undefined ? ~~arguments[1] : this.scrollTop);

        return;
      }

      var left = arguments[0].left;
      var top = arguments[0].top;

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(this, this, typeof left === 'undefined' ? this.scrollLeft : ~~left, typeof top === 'undefined' ? this.scrollTop : ~~top);
    };

    // Element.prototype.scrollBy
    Element.prototype.scrollBy = function () {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.elementScroll.call(this, arguments[0].left !== undefined ? ~~arguments[0].left + this.scrollLeft : ~~arguments[0] + this.scrollLeft, arguments[0].top !== undefined ? ~~arguments[0].top + this.scrollTop : ~~arguments[1] + this.scrollTop);

        return;
      }

      this.scroll({
        left: ~~arguments[0].left + this.scrollLeft,
        top: ~~arguments[0].top + this.scrollTop,
        behavior: arguments[0].behavior
      });
    };

    // Element.prototype.scrollIntoView
    Element.prototype.scrollIntoView = function () {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.scrollIntoView.call(this, arguments[0] === undefined ? true : arguments[0]);

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      var scrollableParent = findScrollableParent(this);
      var parentRects = scrollableParent.getBoundingClientRect();
      var clientRects = this.getBoundingClientRect();

      if (scrollableParent !== d.body) {
        // reveal element inside parent
        smoothScroll.call(this, scrollableParent, scrollableParent.scrollLeft + clientRects.left - parentRects.left, scrollableParent.scrollTop + clientRects.top - parentRects.top);

        // reveal parent in viewport unless is fixed
        if (w.getComputedStyle(scrollableParent).position !== 'fixed') {
          w.scrollBy({
            left: parentRects.left,
            top: parentRects.top,
            behavior: 'smooth'
          });
        }
      } else {
        // reveal element in viewport
        w.scrollBy({
          left: clientRects.left,
          top: clientRects.top,
          behavior: 'smooth'
        });
      }
    };
  }

  if (( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined') {
    // commonjs
    module.exports = { polyfill: polyfill };
  } else {
    // global
    polyfill();
  }
})();

/***/ }),

/***/ "./node_modules/svg-baker-runtime/browser-symbol.js":
/*!**********************************************************!*\
  !*** ./node_modules/svg-baker-runtime/browser-symbol.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.BrowserSpriteSymbol = factory();
})(this, function () {
    'use strict';

    var SpriteSymbol = function SpriteSymbol(ref) {
        var id = ref.id;
        var viewBox = ref.viewBox;
        var content = ref.content;

        this.id = id;
        this.viewBox = viewBox;
        this.content = content;
    };

    /**
     * @return {string}
     */
    SpriteSymbol.prototype.stringify = function stringify() {
        return this.content;
    };

    /**
     * @return {string}
     */
    SpriteSymbol.prototype.toString = function toString() {
        return this.stringify();
    };

    SpriteSymbol.prototype.destroy = function destroy() {
        var this$1 = this;

        ['id', 'viewBox', 'content'].forEach(function (prop) {
            return delete this$1[prop];
        });
    };

    /**
     * @param {string} content
     * @return {Element}
     */
    var parse = function parse(content) {
        var hasImportNode = !!document.importNode;
        var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;

        /**
         * Fix for browser which are throwing WrongDocumentError
         * if you insert an element which is not part of the document
         * @see http://stackoverflow.com/a/7986519/4624403
         */
        if (hasImportNode) {
            return document.importNode(doc, true);
        }

        return doc;
    };

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var deepmerge = createCommonjsModule(function (module, exports) {
        (function (root, factory) {
            if (false) {
                undefined(factory);
            } else {
                module.exports = factory();
            }
        })(commonjsGlobal, function () {

            function isMergeableObject(val) {
                var nonNullObject = val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';

                return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
            }

            function emptyTarget(val) {
                return Array.isArray(val) ? [] : {};
            }

            function cloneIfNecessary(value, optionsArgument) {
                var clone = optionsArgument && optionsArgument.clone === true;
                return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
            }

            function defaultArrayMerge(target, source, optionsArgument) {
                var destination = target.slice();
                source.forEach(function (e, i) {
                    if (typeof destination[i] === 'undefined') {
                        destination[i] = cloneIfNecessary(e, optionsArgument);
                    } else if (isMergeableObject(e)) {
                        destination[i] = deepmerge(target[i], e, optionsArgument);
                    } else if (target.indexOf(e) === -1) {
                        destination.push(cloneIfNecessary(e, optionsArgument));
                    }
                });
                return destination;
            }

            function mergeObject(target, source, optionsArgument) {
                var destination = {};
                if (isMergeableObject(target)) {
                    Object.keys(target).forEach(function (key) {
                        destination[key] = cloneIfNecessary(target[key], optionsArgument);
                    });
                }
                Object.keys(source).forEach(function (key) {
                    if (!isMergeableObject(source[key]) || !target[key]) {
                        destination[key] = cloneIfNecessary(source[key], optionsArgument);
                    } else {
                        destination[key] = deepmerge(target[key], source[key], optionsArgument);
                    }
                });
                return destination;
            }

            function deepmerge(target, source, optionsArgument) {
                var array = Array.isArray(source);
                var options = optionsArgument || { arrayMerge: defaultArrayMerge };
                var arrayMerge = options.arrayMerge || defaultArrayMerge;

                if (array) {
                    return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);
                } else {
                    return mergeObject(target, source, optionsArgument);
                }
            }

            deepmerge.all = function deepmergeAll(array, optionsArgument) {
                if (!Array.isArray(array) || array.length < 2) {
                    throw new Error('first argument should be an array with at least two elements');
                }

                // we are sure there are at least 2 values, so it is safe to have no initial value
                return array.reduce(function (prev, next) {
                    return deepmerge(prev, next, optionsArgument);
                });
            };

            return deepmerge;
        });
    });

    var namespaces_1 = createCommonjsModule(function (module, exports) {
        var namespaces = {
            svg: {
                name: 'xmlns',
                uri: 'http://www.w3.org/2000/svg'
            },
            xlink: {
                name: 'xmlns:xlink',
                uri: 'http://www.w3.org/1999/xlink'
            }
        };

        exports.default = namespaces;
        module.exports = exports.default;
    });

    /**
     * @param {Object} attrs
     * @return {string}
     */
    var objectToAttrsString = function objectToAttrsString(attrs) {
        return Object.keys(attrs).map(function (attr) {
            var value = attrs[attr].toString().replace(/"/g, '&quot;');
            return attr + "=\"" + value + "\"";
        }).join(' ');
    };

    var svg = namespaces_1.svg;
    var xlink = namespaces_1.xlink;

    var defaultAttrs = {};
    defaultAttrs[svg.name] = svg.uri;
    defaultAttrs[xlink.name] = xlink.uri;

    /**
     * @param {string} [content]
     * @param {Object} [attributes]
     * @return {string}
     */
    var wrapInSvgString = function wrapInSvgString(content, attributes) {
        if (content === void 0) content = '';

        var attrs = deepmerge(defaultAttrs, attributes || {});
        var attrsRendered = objectToAttrsString(attrs);
        return "<svg " + attrsRendered + ">" + content + "</svg>";
    };

    var BrowserSpriteSymbol = function (SpriteSymbol$$1) {
        function BrowserSpriteSymbol() {
            SpriteSymbol$$1.apply(this, arguments);
        }

        if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;
        BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);
        BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;

        var prototypeAccessors = { isMounted: {} };

        prototypeAccessors.isMounted.get = function () {
            return !!this.node;
        };

        /**
         * @param {Element} node
         * @return {BrowserSpriteSymbol}
         */
        BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {
            return new BrowserSpriteSymbol({
                id: node.getAttribute('id'),
                viewBox: node.getAttribute('viewBox'),
                content: node.outerHTML
            });
        };

        BrowserSpriteSymbol.prototype.destroy = function destroy() {
            if (this.isMounted) {
                this.unmount();
            }
            SpriteSymbol$$1.prototype.destroy.call(this);
        };

        /**
         * @param {Element|string} target
         * @return {Element}
         */
        BrowserSpriteSymbol.prototype.mount = function mount(target) {
            if (this.isMounted) {
                return this.node;
            }

            var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;
            var node = this.render();
            this.node = node;

            mountTarget.appendChild(node);

            return node;
        };

        /**
         * @return {Element}
         */
        BrowserSpriteSymbol.prototype.render = function render() {
            var content = this.stringify();
            return parse(wrapInSvgString(content)).childNodes[0];
        };

        BrowserSpriteSymbol.prototype.unmount = function unmount() {
            this.node.parentNode.removeChild(this.node);
        };

        Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);

        return BrowserSpriteSymbol;
    }(SpriteSymbol);

    return BrowserSpriteSymbol;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-dribble.svg":
/*!************************************************************************************************************!*\
  !*** ./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-dribble.svg ***!
  \************************************************************************************************************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(/*! svg-baker-runtime/browser-symbol */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(/*! svg-sprite-loader/runtime/browser-sprite.build */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-dribble",
  "use": "icon-dribble-usage",
  "viewBox": "0 0 22 22",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\" id=\"icon-dribble\"><path d=\"M20.363 5.59a10.587 10.587 0 0 0-3.869-3.87C14.865.77 13.087.296 11.158.296 9.228.295 7.45.77 5.82 1.72A10.584 10.584 0 0 0 1.95 5.59C1.002 7.219.526 8.998.526 10.927c0 1.928.476 3.707 1.426 5.336a10.587 10.587 0 0 0 3.87 3.87c1.629.95 3.407 1.425 5.336 1.425 1.93 0 3.708-.475 5.337-1.426a10.584 10.584 0 0 0 3.87-3.869c.95-1.629 1.425-3.408 1.425-5.336 0-1.93-.475-3.708-1.426-5.337zm-9.206-3.745c2.289 0 4.287.757 5.994 2.27l-.173.243c-.069.097-.242.283-.519.56-.276.277-.579.54-.906.79-.328.249-.773.532-1.336.85a12.85 12.85 0 0 1-1.8.839c-1.061-1.957-2.196-3.72-3.405-5.289a9.158 9.158 0 0 1 2.145-.263zM4.042 5.292a8.959 8.959 0 0 1 3.24-2.575c1.144 1.523 2.27 3.267 3.377 5.233A32.842 32.842 0 0 1 2.27 9.058a8.975 8.975 0 0 1 1.772-3.766zm-1.357 8.909a8.908 8.908 0 0 1-.609-3.274c0-.13.005-.227.014-.291 3.34 0 6.447-.43 9.317-1.288.295.573.54 1.085.733 1.537a1.12 1.12 0 0 1-.18.062 8.64 8.64 0 0 1-.18.049l-.512.18c-.35.129-.81.35-1.378.664-.567.314-1.17.688-1.806 1.122-.637.434-1.294 1.008-1.973 1.724a11.603 11.603 0 0 0-1.71 2.304 9.092 9.092 0 0 1-1.716-2.79zm8.472 5.807c-2.16 0-4.088-.692-5.786-2.076l.207.152c.323-.711.799-1.394 1.426-2.05.628-.654 1.232-1.183 1.814-1.584a17.87 17.87 0 0 1 1.896-1.136c.683-.355 1.15-.581 1.399-.678.249-.097.447-.173.595-.228l.027-.014h.028c.904 2.372 1.55 4.67 1.938 6.894a9.077 9.077 0 0 1-3.544.72zm7.642-4.174a9.072 9.072 0 0 1-2.56 2.624 39.004 39.004 0 0 0-1.773-6.493c1.837-.286 3.724-.152 5.662.401a8.959 8.959 0 0 1-1.329 3.468zm1.301-5.032c-.092-.018-.208-.04-.346-.062l-.505-.083c-.199-.033-.42-.062-.665-.09a22.82 22.82 0 0 0-2.624-.152c-.322 0-.662.009-1.017.027-.355.018-.699.051-1.03.097a1.64 1.64 0 0 1-.105-.228 4.787 4.787 0 0 1-.09-.243 91.89 91.89 0 0 0-.609-1.315 14.206 14.206 0 0 0 1.821-.893 14.149 14.149 0 0 0 1.384-.9c.346-.263.674-.542.983-.837.31-.295.51-.5.602-.616.093-.116.18-.229.263-.34l.014-.013c1.348 1.643 2.035 3.534 2.063 5.676l-.139-.028z\" fill=\"#262729\" fill-rule=\"nonzero\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),

/***/ "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-instagram.svg":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-instagram.svg ***!
  \**************************************************************************************************************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(/*! svg-baker-runtime/browser-symbol */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(/*! svg-sprite-loader/runtime/browser-sprite.build */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-instagram",
  "use": "icon-instagram-usage",
  "viewBox": "0 0 24 24",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" id=\"icon-instagram\"><path d=\"M16.945.568a6.238 6.238 0 0 1 6.231 6.23v10.118a6.238 6.238 0 0 1-6.231 6.231H6.828a6.238 6.238 0 0 1-6.232-6.23V6.798A6.238 6.238 0 0 1 6.828.568h10.117zm4.228 16.348V6.8a4.233 4.233 0 0 0-4.228-4.228H6.828A4.233 4.233 0 0 0 2.6 6.799v10.117a4.233 4.233 0 0 0 4.228 4.228h10.117a4.233 4.233 0 0 0 4.228-4.228zM11.886 6.04a5.825 5.825 0 0 1 5.819 5.818 5.825 5.825 0 0 1-5.819 5.818 5.825 5.825 0 0 1-5.818-5.818 5.825 5.825 0 0 1 5.818-5.818zm0 9.632a3.82 3.82 0 0 0 3.815-3.814 3.82 3.82 0 0 0-3.815-3.815 3.82 3.82 0 0 0-3.814 3.815 3.82 3.82 0 0 0 3.814 3.814zM17.95 4.341c.387 0 .766.156 1.039.43.274.272.43.652.43 1.039 0 .386-.156.765-.43 1.04-.274.272-.652.43-1.04.43a1.48 1.48 0 0 1-1.037-.43 1.481 1.481 0 0 1-.432-1.04 1.475 1.475 0 0 1 1.47-1.47z\" fill=\"#262729\" fill-rule=\"nonzero\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),

/***/ "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-linkedin.svg":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-linkedin.svg ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(/*! svg-baker-runtime/browser-symbol */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(/*! svg-sprite-loader/runtime/browser-sprite.build */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-linkedin",
  "use": "icon-linkedin-usage",
  "viewBox": "0 0 23 23",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 23 23\" id=\"icon-linkedin\"><path d=\"M.28 7.375h4.873v14.633H.281V7.375zm20.865 1.337c1.024 1.117 1.536 2.753 1.536 4.91v8.386h-4.858v-7.826c0-1.034-.2-1.843-.598-2.429-.399-.586-1.022-.879-1.868-.879-.62 0-1.14.17-1.558.51-.419.34-.73.76-.938 1.262-.108.296-.162.695-.162 1.197v8.165H7.84c.02-3.927.03-7.112.03-9.553 0-2.442-.006-3.898-.016-4.371l-.014-.709h4.858v2.08c.187-.295.38-.556.576-.78a6.3 6.3 0 0 1 .834-.768c.35-.276.778-.49 1.285-.642a5.852 5.852 0 0 1 1.69-.23c1.684 0 3.038.56 4.061 1.677zM2.746.332c.818 0 1.472.238 1.964.716.492.477.744 1.08.753 1.809.01.718-.238 1.319-.745 1.8-.507.483-1.174.724-2.001.724h-.03c-.807 0-1.457-.24-1.949-.723C.246 4.176 0 3.575 0 2.857c0-.73.253-1.332.76-1.81C1.268.57 1.93.333 2.746.333z\" fill=\"#262729\" fill-rule=\"nonzero\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),

/***/ "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-pogo.svg":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-pogo.svg ***!
  \*********************************************************************************************************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(/*! svg-baker-runtime/browser-symbol */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(/*! svg-sprite-loader/runtime/browser-sprite.build */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "icon-pogo",
  "use": "icon-pogo-usage",
  "viewBox": "0 0 23 23",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 23 23\" id=\"icon-pogo\"><g transform=\"translate(.717 .295)\" fill-rule=\"nonzero\" fill=\"none\"><path d=\"M21.585 10.976c0-5.86-4.75-10.61-10.61-10.61-5.86 0-10.61 4.75-10.61 10.61h21.22z\" fill=\"#262729\" /><path d=\"M21.951 11.341H0v-.365C0 4.924 4.924 0 10.976 0 17.028 0 21.95 4.924 21.95 10.976v.365zM.738 10.61h20.475C21.02 5.13 16.502.732 10.976.732 5.449.732.93 5.13.738 10.61z\" fill=\"#262729\" /><path d=\"M21.199 11.52H.753c.373 5.32 4.807 9.521 10.223 9.521 5.415 0 9.85-4.2 10.223-9.521z\" stroke=\"#262729\" stroke-width=\"1.455\" /><circle fill=\"#F1FDFF\" cx=\"10.976\" cy=\"10.976\" r=\"4.024\" /><path d=\"M10.976 15.366c-2.421 0-4.39-1.97-4.39-4.39 0-2.421 1.969-4.39 4.39-4.39 2.42 0 4.39 1.969 4.39 4.39 0 2.42-1.97 4.39-4.39 4.39zm0-8.049a3.663 3.663 0 0 0-3.659 3.659 3.663 3.663 0 0 0 3.659 3.658 3.663 3.663 0 0 0 3.658-3.658 3.663 3.663 0 0 0-3.658-3.659z\" stroke=\"#262729\" stroke-width=\".727\" fill=\"#262729\" /></g></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),

/***/ "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/line.svg":
/*!****************************************************************************************************!*\
  !*** ./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/line.svg ***!
  \****************************************************************************************************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__ = __webpack_require__(/*! svg-baker-runtime/browser-symbol */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__ = __webpack_require__(/*! svg-sprite-loader/runtime/browser-sprite.build */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build__);


var symbol = new __WEBPACK_IMPORTED_MODULE_0_svg_baker_runtime_browser_symbol___default.a({
  "id": "line",
  "use": "line-usage",
  "viewBox": "0 0 20 4",
  "content": "<symbol xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" viewBox=\"0 0 20 4\" id=\"line\"><style type=\"text/css\">#line .squiggle{animation:shift .3s linear infinite;}@keyframes shift {from {transform:translateX(0);}to {transform:translateX(-20px);}}</style><path fill=\"none\" stroke=\"%23262729\" stroke-width=\"2\" class=\"squiggle\" d=\"M0,3.5 c 5,0,5,-3,10,-3 s 5,3,10,3 c 5,0,5,-3,10,-3 s 5,3,10,3\" /></symbol>"
});
var result = __WEBPACK_IMPORTED_MODULE_1_svg_sprite_loader_runtime_browser_sprite_build___default.a.add(symbol);
/* harmony default export */ __webpack_exports__["default"] = (symbol);

/***/ }),

/***/ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js":
/*!************************************************************************!*\
  !*** ./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.BrowserSprite = factory();
})(this, function () {
  'use strict';

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var deepmerge = createCommonjsModule(function (module, exports) {
    (function (root, factory) {
      if (false) {
        undefined(factory);
      } else {
        module.exports = factory();
      }
    })(commonjsGlobal, function () {

      function isMergeableObject(val) {
        var nonNullObject = val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';

        return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
      }

      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }

      function cloneIfNecessary(value, optionsArgument) {
        var clone = optionsArgument && optionsArgument.clone === true;
        return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
      }

      function defaultArrayMerge(target, source, optionsArgument) {
        var destination = target.slice();
        source.forEach(function (e, i) {
          if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument);
          } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument);
          } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument));
          }
        });
        return destination;
      }

      function mergeObject(target, source, optionsArgument) {
        var destination = {};
        if (isMergeableObject(target)) {
          Object.keys(target).forEach(function (key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument);
          });
        }
        Object.keys(source).forEach(function (key) {
          if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument);
          } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
          }
        });
        return destination;
      }

      function deepmerge(target, source, optionsArgument) {
        var array = Array.isArray(source);
        var options = optionsArgument || { arrayMerge: defaultArrayMerge };
        var arrayMerge = options.arrayMerge || defaultArrayMerge;

        if (array) {
          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);
        } else {
          return mergeObject(target, source, optionsArgument);
        }
      }

      deepmerge.all = function deepmergeAll(array, optionsArgument) {
        if (!Array.isArray(array) || array.length < 2) {
          throw new Error('first argument should be an array with at least two elements');
        }

        // we are sure there are at least 2 values, so it is safe to have no initial value
        return array.reduce(function (prev, next) {
          return deepmerge(prev, next, optionsArgument);
        });
      };

      return deepmerge;
    });
  });

  //      
  // An event handler can take an optional event argument
  // and should not return a value

  // An array of all currently registered event handlers for a type

  // A map of event types and their corresponding event handlers.


  /** Mitt: Tiny (~200b) functional event emitter / pubsub.
   *  @name mitt
   *  @returns {Mitt}
   */
  function mitt(all) {
    all = all || Object.create(null);

    return {
      /**
       * Register an event handler for the given type.
       *
       * @param  {String} type	Type of event to listen for, or `"*"` for all events
       * @param  {Function} handler Function to call in response to given event
       * @memberOf mitt
       */
      on: function on(type, handler) {
        (all[type] || (all[type] = [])).push(handler);
      },

      /**
       * Remove an event handler for the given type.
       *
       * @param  {String} type	Type of event to unregister `handler` from, or `"*"`
       * @param  {Function} handler Handler function to remove
       * @memberOf mitt
       */
      off: function off(type, handler) {
        if (all[type]) {
          all[type].splice(all[type].indexOf(handler) >>> 0, 1);
        }
      },

      /**
       * Invoke all handlers for the given type.
       * If present, `"*"` handlers are invoked after type-matched handlers.
       *
       * @param {String} type  The event type to invoke
       * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler
       * @memberof mitt
       */
      emit: function emit(type, evt) {
        (all[type] || []).map(function (handler) {
          handler(evt);
        });
        (all['*'] || []).map(function (handler) {
          handler(type, evt);
        });
      }
    };
  }

  var namespaces_1 = createCommonjsModule(function (module, exports) {
    var namespaces = {
      svg: {
        name: 'xmlns',
        uri: 'http://www.w3.org/2000/svg'
      },
      xlink: {
        name: 'xmlns:xlink',
        uri: 'http://www.w3.org/1999/xlink'
      }
    };

    exports.default = namespaces;
    module.exports = exports.default;
  });

  /**
   * @param {Object} attrs
   * @return {string}
   */
  var objectToAttrsString = function objectToAttrsString(attrs) {
    return Object.keys(attrs).map(function (attr) {
      var value = attrs[attr].toString().replace(/"/g, '&quot;');
      return attr + "=\"" + value + "\"";
    }).join(' ');
  };

  var svg = namespaces_1.svg;
  var xlink = namespaces_1.xlink;

  var defaultAttrs = {};
  defaultAttrs[svg.name] = svg.uri;
  defaultAttrs[xlink.name] = xlink.uri;

  /**
   * @param {string} [content]
   * @param {Object} [attributes]
   * @return {string}
   */
  var wrapInSvgString = function wrapInSvgString(content, attributes) {
    if (content === void 0) content = '';

    var attrs = deepmerge(defaultAttrs, attributes || {});
    var attrsRendered = objectToAttrsString(attrs);
    return "<svg " + attrsRendered + ">" + content + "</svg>";
  };

  var svg$1 = namespaces_1.svg;
  var xlink$1 = namespaces_1.xlink;

  var defaultConfig = {
    attrs: (obj = {
      style: ['position: absolute', 'width: 0', 'height: 0'].join('; ')
    }, obj[svg$1.name] = svg$1.uri, obj[xlink$1.name] = xlink$1.uri, obj)
  };
  var obj;

  var Sprite = function Sprite(config) {
    this.config = deepmerge(defaultConfig, config || {});
    this.symbols = [];
  };

  /**
   * Add new symbol. If symbol with the same id exists it will be replaced.
   * @param {SpriteSymbol} symbol
   * @return {boolean} `true` - symbol was added, `false` - replaced
   */
  Sprite.prototype.add = function add(symbol) {
    var ref = this;
    var symbols = ref.symbols;
    var existing = this.find(symbol.id);

    if (existing) {
      symbols[symbols.indexOf(existing)] = symbol;
      return false;
    }

    symbols.push(symbol);
    return true;
  };

  /**
   * Remove symbol & destroy it
   * @param {string} id
   * @return {boolean} `true` - symbol was found & successfully destroyed, `false` - otherwise
   */
  Sprite.prototype.remove = function remove(id) {
    var ref = this;
    var symbols = ref.symbols;
    var symbol = this.find(id);

    if (symbol) {
      symbols.splice(symbols.indexOf(symbol), 1);
      symbol.destroy();
      return true;
    }

    return false;
  };

  /**
   * @param {string} id
   * @return {SpriteSymbol|null}
   */
  Sprite.prototype.find = function find(id) {
    return this.symbols.filter(function (s) {
      return s.id === id;
    })[0] || null;
  };

  /**
   * @param {string} id
   * @return {boolean}
   */
  Sprite.prototype.has = function has(id) {
    return this.find(id) !== null;
  };

  /**
   * @return {string}
   */
  Sprite.prototype.stringify = function stringify() {
    var ref = this.config;
    var attrs = ref.attrs;
    var stringifiedSymbols = this.symbols.map(function (s) {
      return s.stringify();
    }).join('');
    return wrapInSvgString(stringifiedSymbols, attrs);
  };

  /**
   * @return {string}
   */
  Sprite.prototype.toString = function toString() {
    return this.stringify();
  };

  Sprite.prototype.destroy = function destroy() {
    this.symbols.forEach(function (s) {
      return s.destroy();
    });
  };

  var SpriteSymbol = function SpriteSymbol(ref) {
    var id = ref.id;
    var viewBox = ref.viewBox;
    var content = ref.content;

    this.id = id;
    this.viewBox = viewBox;
    this.content = content;
  };

  /**
   * @return {string}
   */
  SpriteSymbol.prototype.stringify = function stringify() {
    return this.content;
  };

  /**
   * @return {string}
   */
  SpriteSymbol.prototype.toString = function toString() {
    return this.stringify();
  };

  SpriteSymbol.prototype.destroy = function destroy() {
    var this$1 = this;

    ['id', 'viewBox', 'content'].forEach(function (prop) {
      return delete this$1[prop];
    });
  };

  /**
   * @param {string} content
   * @return {Element}
   */
  var parse = function parse(content) {
    var hasImportNode = !!document.importNode;
    var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;

    /**
     * Fix for browser which are throwing WrongDocumentError
     * if you insert an element which is not part of the document
     * @see http://stackoverflow.com/a/7986519/4624403
     */
    if (hasImportNode) {
      return document.importNode(doc, true);
    }

    return doc;
  };

  var BrowserSpriteSymbol = function (SpriteSymbol$$1) {
    function BrowserSpriteSymbol() {
      SpriteSymbol$$1.apply(this, arguments);
    }

    if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;
    BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);
    BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;

    var prototypeAccessors = { isMounted: {} };

    prototypeAccessors.isMounted.get = function () {
      return !!this.node;
    };

    /**
     * @param {Element} node
     * @return {BrowserSpriteSymbol}
     */
    BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {
      return new BrowserSpriteSymbol({
        id: node.getAttribute('id'),
        viewBox: node.getAttribute('viewBox'),
        content: node.outerHTML
      });
    };

    BrowserSpriteSymbol.prototype.destroy = function destroy() {
      if (this.isMounted) {
        this.unmount();
      }
      SpriteSymbol$$1.prototype.destroy.call(this);
    };

    /**
     * @param {Element|string} target
     * @return {Element}
     */
    BrowserSpriteSymbol.prototype.mount = function mount(target) {
      if (this.isMounted) {
        return this.node;
      }

      var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;
      var node = this.render();
      this.node = node;

      mountTarget.appendChild(node);

      return node;
    };

    /**
     * @return {Element}
     */
    BrowserSpriteSymbol.prototype.render = function render() {
      var content = this.stringify();
      return parse(wrapInSvgString(content)).childNodes[0];
    };

    BrowserSpriteSymbol.prototype.unmount = function unmount() {
      this.node.parentNode.removeChild(this.node);
    };

    Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);

    return BrowserSpriteSymbol;
  }(SpriteSymbol);

  var defaultConfig$1 = {
    /**
     * Should following options be automatically configured:
     * - `syncUrlsWithBaseTag`
     * - `locationChangeAngularEmitter`
     * - `moveGradientsOutsideSymbol`
     * @type {boolean}
     */
    autoConfigure: true,

    /**
     * Default mounting selector
     * @type {string}
     */
    mountTo: 'body',

    /**
     * Fix disappearing SVG elements when <base href> exists.
     * Executes when sprite mounted.
     * @see http://stackoverflow.com/a/18265336/796152
     * @see https://github.com/everdimension/angular-svg-base-fix
     * @see https://github.com/angular/angular.js/issues/8934#issuecomment-56568466
     * @type {boolean}
     */
    syncUrlsWithBaseTag: false,

    /**
     * Should sprite listen custom location change event
     * @type {boolean}
     */
    listenLocationChangeEvent: true,

    /**
     * Custom window event name which should be emitted to update sprite urls
     * @type {string}
     */
    locationChangeEvent: 'locationChange',

    /**
     * Emit location change event in Angular automatically
     * @type {boolean}
     */
    locationChangeAngularEmitter: false,

    /**
     * Selector to find symbols usages when updating sprite urls
     * @type {string}
     */
    usagesToUpdate: 'use[*|href]',

    /**
     * Fix Firefox bug when gradients and patterns don't work if they are within a symbol.
     * Executes when sprite is rendered, but not mounted.
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=306674
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1235364
     * @type {boolean}
     */
    moveGradientsOutsideSymbol: false
  };

  /**
   * @param {*} arrayLike
   * @return {Array}
   */
  var arrayFrom = function arrayFrom(arrayLike) {
    return Array.prototype.slice.call(arrayLike, 0);
  };

  var ua = navigator.userAgent;

  var browser = {
    isChrome: /chrome/i.test(ua),
    isFirefox: /firefox/i.test(ua),

    // https://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx
    isIE: /msie/i.test(ua) || /trident/i.test(ua),
    isEdge: /edge/i.test(ua)
  };

  /**
   * @param {string} name
   * @param {*} data
   */
  var dispatchEvent = function dispatchEvent(name, data) {
    var event = document.createEvent('CustomEvent');
    event.initCustomEvent(name, false, false, data);
    window.dispatchEvent(event);
  };

  /**
   * IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.
   * This trick will trigger IE to read and use any existing SVG <style> tags.
   * @see https://github.com/iconic/SVGInjector/issues/23
   * @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
   *
   * @param {Element} node DOM Element to search <style> tags in
   * @return {Array<HTMLStyleElement>}
   */
  var evalStylesIEWorkaround = function evalStylesIEWorkaround(node) {
    var updatedNodes = [];

    arrayFrom(node.querySelectorAll('style')).forEach(function (style) {
      style.textContent += '';
      updatedNodes.push(style);
    });

    return updatedNodes;
  };

  /**
   * @param {string} [url] If not provided - current URL will be used
   * @return {string}
   */
  var getUrlWithoutFragment = function getUrlWithoutFragment(url) {
    return (url || window.location.href).split('#')[0];
  };

  /* global angular */
  /**
   * @param {string} eventName
   */
  var locationChangeAngularEmitter = function locationChangeAngularEmitter(eventName) {
    angular.module('ng').run(['$rootScope', function ($rootScope) {
      $rootScope.$on('$locationChangeSuccess', function (e, newUrl, oldUrl) {
        dispatchEvent(eventName, { oldUrl: oldUrl, newUrl: newUrl });
      });
    }]);
  };

  var defaultSelector = 'linearGradient, radialGradient, pattern';

  /**
   * @param {Element} svg
   * @param {string} [selector]
   * @return {Element}
   */
  var moveGradientsOutsideSymbol = function moveGradientsOutsideSymbol(svg, selector) {
    if (selector === void 0) selector = defaultSelector;

    arrayFrom(svg.querySelectorAll('symbol')).forEach(function (symbol) {
      arrayFrom(symbol.querySelectorAll(selector)).forEach(function (node) {
        symbol.parentNode.insertBefore(node, symbol);
      });
    });
    return svg;
  };

  /**
   * @param {NodeList} nodes
   * @param {Function} [matcher]
   * @return {Attr[]}
   */
  function selectAttributes(nodes, matcher) {
    var attrs = arrayFrom(nodes).reduce(function (acc, node) {
      if (!node.attributes) {
        return acc;
      }

      var arrayfied = arrayFrom(node.attributes);
      var matched = matcher ? arrayfied.filter(matcher) : arrayfied;
      return acc.concat(matched);
    }, []);

    return attrs;
  }

  /**
   * @param {NodeList|Node} nodes
   * @param {boolean} [clone=true]
   * @return {string}
   */

  var xLinkNS = namespaces_1.xlink.uri;
  var xLinkAttrName = 'xlink:href';

  // eslint-disable-next-line no-useless-escape
  var specialUrlCharsPattern = /[{}|\\\^\[\]`"<>]/g;

  function encoder(url) {
    return url.replace(specialUrlCharsPattern, function (match) {
      return "%" + match[0].charCodeAt(0).toString(16).toUpperCase();
    });
  }

  /**
   * @param {NodeList} nodes
   * @param {string} startsWith
   * @param {string} replaceWith
   * @return {NodeList}
   */
  function updateReferences(nodes, startsWith, replaceWith) {
    arrayFrom(nodes).forEach(function (node) {
      var href = node.getAttribute(xLinkAttrName);
      if (href && href.indexOf(startsWith) === 0) {
        var newUrl = href.replace(startsWith, replaceWith);
        node.setAttributeNS(xLinkNS, xLinkAttrName, newUrl);
      }
    });

    return nodes;
  }

  /**
   * List of SVG attributes to update url() target in them
   */
  var attList = ['clipPath', 'colorProfile', 'src', 'cursor', 'fill', 'filter', 'marker', 'markerStart', 'markerMid', 'markerEnd', 'mask', 'stroke', 'style'];

  var attSelector = attList.map(function (attr) {
    return "[" + attr + "]";
  }).join(',');

  /**
   * Update URLs in svg image (like `fill="url(...)"`) and update referencing elements
   * @param {Element} svg
   * @param {NodeList} references
   * @param {string|RegExp} startsWith
   * @param {string} replaceWith
   * @return {void}
   *
   * @example
   * const sprite = document.querySelector('svg.sprite');
   * const usages = document.querySelectorAll('use');
   * updateUrls(sprite, usages, '#', 'prefix#');
   */
  var updateUrls = function updateUrls(svg, references, startsWith, replaceWith) {
    var startsWithEncoded = encoder(startsWith);
    var replaceWithEncoded = encoder(replaceWith);

    var nodes = svg.querySelectorAll(attSelector);
    var attrs = selectAttributes(nodes, function (ref) {
      var localName = ref.localName;
      var value = ref.value;

      return attList.indexOf(localName) !== -1 && value.indexOf("url(" + startsWithEncoded) !== -1;
    });

    attrs.forEach(function (attr) {
      return attr.value = attr.value.replace(startsWithEncoded, replaceWithEncoded);
    });
    updateReferences(references, startsWithEncoded, replaceWithEncoded);
  };

  /**
   * Internal emitter events
   * @enum
   * @private
   */
  var Events = {
    MOUNT: 'mount',
    SYMBOL_MOUNT: 'symbol_mount'
  };

  var BrowserSprite = function (Sprite$$1) {
    function BrowserSprite(cfg) {
      var this$1 = this;
      if (cfg === void 0) cfg = {};

      Sprite$$1.call(this, deepmerge(defaultConfig$1, cfg));

      var emitter = mitt();
      this._emitter = emitter;
      this.node = null;

      var ref = this;
      var config = ref.config;

      if (config.autoConfigure) {
        this._autoConfigure(cfg);
      }

      if (config.syncUrlsWithBaseTag) {
        var baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');
        emitter.on(Events.MOUNT, function () {
          return this$1.updateUrls('#', baseUrl);
        });
      }

      var handleLocationChange = this._handleLocationChange.bind(this);
      this._handleLocationChange = handleLocationChange;

      // Provide way to update sprite urls externally via dispatching custom window event
      if (config.listenLocationChangeEvent) {
        window.addEventListener(config.locationChangeEvent, handleLocationChange);
      }

      // Emit location change event in Angular automatically
      if (config.locationChangeAngularEmitter) {
        locationChangeAngularEmitter(config.locationChangeEvent);
      }

      // After sprite mounted
      emitter.on(Events.MOUNT, function (spriteNode) {
        if (config.moveGradientsOutsideSymbol) {
          moveGradientsOutsideSymbol(spriteNode);
        }
      });

      // After symbol mounted into sprite
      emitter.on(Events.SYMBOL_MOUNT, function (symbolNode) {
        if (config.moveGradientsOutsideSymbol) {
          moveGradientsOutsideSymbol(symbolNode.parentNode);
        }

        if (browser.isIE || browser.isEdge) {
          evalStylesIEWorkaround(symbolNode);
        }
      });
    }

    if (Sprite$$1) BrowserSprite.__proto__ = Sprite$$1;
    BrowserSprite.prototype = Object.create(Sprite$$1 && Sprite$$1.prototype);
    BrowserSprite.prototype.constructor = BrowserSprite;

    var prototypeAccessors = { isMounted: {} };

    /**
     * @return {boolean}
     */
    prototypeAccessors.isMounted.get = function () {
      return !!this.node;
    };

    /**
     * Automatically configure following options
     * - `syncUrlsWithBaseTag`
     * - `locationChangeAngularEmitter`
     * - `moveGradientsOutsideSymbol`
     * @param {Object} cfg
     * @private
     */
    BrowserSprite.prototype._autoConfigure = function _autoConfigure(cfg) {
      var ref = this;
      var config = ref.config;

      if (typeof cfg.syncUrlsWithBaseTag === 'undefined') {
        config.syncUrlsWithBaseTag = typeof document.getElementsByTagName('base')[0] !== 'undefined';
      }

      if (typeof cfg.locationChangeAngularEmitter === 'undefined') {
        config.locationChangeAngularEmitter = 'angular' in window;
      }

      if (typeof cfg.moveGradientsOutsideSymbol === 'undefined') {
        config.moveGradientsOutsideSymbol = browser.isFirefox;
      }
    };

    /**
     * @param {Event} event
     * @param {Object} event.detail
     * @param {string} event.detail.oldUrl
     * @param {string} event.detail.newUrl
     * @private
     */
    BrowserSprite.prototype._handleLocationChange = function _handleLocationChange(event) {
      var ref = event.detail;
      var oldUrl = ref.oldUrl;
      var newUrl = ref.newUrl;
      this.updateUrls(oldUrl, newUrl);
    };

    /**
     * Add new symbol. If symbol with the same id exists it will be replaced.
     * If sprite already mounted - `symbol.mount(sprite.node)` will be called.
     * @fires Events#SYMBOL_MOUNT
     * @param {BrowserSpriteSymbol} symbol
     * @return {boolean} `true` - symbol was added, `false` - replaced
     */
    BrowserSprite.prototype.add = function add(symbol) {
      var sprite = this;
      var isNewSymbol = Sprite$$1.prototype.add.call(this, symbol);

      if (this.isMounted && isNewSymbol) {
        symbol.mount(sprite.node);
        this._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);
      }

      return isNewSymbol;
    };

    /**
     * Attach to existing DOM node
     * @param {string|Element} target
     * @return {Element|null} attached DOM Element. null if node to attach not found.
     */
    BrowserSprite.prototype.attach = function attach(target) {
      var this$1 = this;

      var sprite = this;

      if (sprite.isMounted) {
        return sprite.node;
      }

      /** @type Element */
      var node = typeof target === 'string' ? document.querySelector(target) : target;
      sprite.node = node;

      // Already added symbols needs to be mounted
      this.symbols.forEach(function (symbol) {
        symbol.mount(sprite.node);
        this$1._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);
      });

      // Create symbols from existing DOM nodes, add and mount them
      arrayFrom(node.querySelectorAll('symbol')).forEach(function (symbolNode) {
        var symbol = BrowserSpriteSymbol.createFromExistingNode(symbolNode);
        symbol.node = symbolNode; // hack to prevent symbol mounting to sprite when adding
        sprite.add(symbol);
      });

      this._emitter.emit(Events.MOUNT, node);

      return node;
    };

    BrowserSprite.prototype.destroy = function destroy() {
      var ref = this;
      var config = ref.config;
      var symbols = ref.symbols;
      var _emitter = ref._emitter;

      symbols.forEach(function (s) {
        return s.destroy();
      });

      _emitter.off('*');
      window.removeEventListener(config.locationChangeEvent, this._handleLocationChange);

      if (this.isMounted) {
        this.unmount();
      }
    };

    /**
     * @fires Events#MOUNT
     * @param {string|Element} [target]
     * @param {boolean} [prepend=false]
     * @return {Element|null} rendered sprite node. null if mount node not found.
     */
    BrowserSprite.prototype.mount = function mount(target, prepend) {
      if (target === void 0) target = this.config.mountTo;
      if (prepend === void 0) prepend = false;

      var sprite = this;

      if (sprite.isMounted) {
        return sprite.node;
      }

      var mountNode = typeof target === 'string' ? document.querySelector(target) : target;
      var node = sprite.render();
      this.node = node;

      if (prepend && mountNode.childNodes[0]) {
        mountNode.insertBefore(node, mountNode.childNodes[0]);
      } else {
        mountNode.appendChild(node);
      }

      this._emitter.emit(Events.MOUNT, node);

      return node;
    };

    /**
     * @return {Element}
     */
    BrowserSprite.prototype.render = function render() {
      return parse(this.stringify());
    };

    /**
     * Detach sprite from the DOM
     */
    BrowserSprite.prototype.unmount = function unmount() {
      this.node.parentNode.removeChild(this.node);
    };

    /**
     * Update URLs in sprite and usage elements
     * @param {string} oldUrl
     * @param {string} newUrl
     * @return {boolean} `true` - URLs was updated, `false` - sprite is not mounted
     */
    BrowserSprite.prototype.updateUrls = function updateUrls$1(oldUrl, newUrl) {
      if (!this.isMounted) {
        return false;
      }

      var usages = document.querySelectorAll(this.config.usagesToUpdate);

      updateUrls(this.node, usages, getUrlWithoutFragment(oldUrl) + "#", getUrlWithoutFragment(newUrl) + "#");

      return true;
    };

    Object.defineProperties(BrowserSprite.prototype, prototypeAccessors);

    return BrowserSprite;
  }(Sprite);

  var ready$1 = createCommonjsModule(function (module) {
    /*!
      * domready (c) Dustin Diaz 2014 - License MIT
      */
    !function (name, definition) {

      {
        module.exports = definition();
      }
    }('domready', function () {

      var fns = [],
          _listener,
          doc = document,
          hack = doc.documentElement.doScroll,
          domContentLoaded = 'DOMContentLoaded',
          loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState);

      if (!loaded) {
        doc.addEventListener(domContentLoaded, _listener = function listener() {
          doc.removeEventListener(domContentLoaded, _listener);
          loaded = 1;
          while (_listener = fns.shift()) {
            _listener();
          }
        });
      }

      return function (fn) {
        loaded ? setTimeout(fn, 0) : fns.push(fn);
      };
    });
  });

  var spriteNodeId = '__SVG_SPRITE_NODE__';
  var spriteGlobalVarName = '__SVG_SPRITE__';
  var isSpriteExists = !!window[spriteGlobalVarName];

  // eslint-disable-next-line import/no-mutable-exports
  var sprite;

  if (isSpriteExists) {
    sprite = window[spriteGlobalVarName];
  } else {
    sprite = new BrowserSprite({ attrs: { id: spriteNodeId } });
    window[spriteGlobalVarName] = sprite;
  }

  var loadSprite = function loadSprite() {
    /**
     * Check for page already contains sprite node
     * If found - attach to and reuse it's content
     * If not - render and mount the new sprite
     */
    var existing = document.getElementById(spriteNodeId);

    if (existing) {
      sprite.attach(existing);
    } else {
      sprite.mount(document.body, true);
    }
  };

  if (document.body) {
    loadSprite();
  } else {
    ready$1(loadSprite);
  }

  var sprite$1 = sprite;

  return sprite$1;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/waypoints/lib/jquery.waypoints.min.js":
/*!************************************************************!*\
  !*** ./node_modules/waypoints/lib/jquery.waypoints.min.js ***!
  \************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {/*!
Waypoints - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function () {
  "use strict";
  function t(o) {
    if (!o) throw new Error("No options passed to Waypoint constructor");if (!o.element) throw new Error("No element option passed to Waypoint constructor");if (!o.handler) throw new Error("No handler option passed to Waypoint constructor");this.key = "waypoint-" + e, this.options = t.Adapter.extend({}, t.defaults, o), this.element = this.options.element, this.adapter = new t.Adapter(this.element), this.callback = o.handler, this.axis = this.options.horizontal ? "horizontal" : "vertical", this.enabled = this.options.enabled, this.triggerPoint = null, this.group = t.Group.findOrCreate({ name: this.options.group, axis: this.axis }), this.context = t.Context.findOrCreateByElement(this.options.context), t.offsetAliases[this.options.offset] && (this.options.offset = t.offsetAliases[this.options.offset]), this.group.add(this), this.context.add(this), i[this.key] = this, e += 1;
  }var e = 0,
      i = {};t.prototype.queueTrigger = function (t) {
    this.group.queueTrigger(this, t);
  }, t.prototype.trigger = function (t) {
    this.enabled && this.callback && this.callback.apply(this, t);
  }, t.prototype.destroy = function () {
    this.context.remove(this), this.group.remove(this), delete i[this.key];
  }, t.prototype.disable = function () {
    return this.enabled = !1, this;
  }, t.prototype.enable = function () {
    return this.context.refresh(), this.enabled = !0, this;
  }, t.prototype.next = function () {
    return this.group.next(this);
  }, t.prototype.previous = function () {
    return this.group.previous(this);
  }, t.invokeAll = function (t) {
    var e = [];for (var o in i) {
      e.push(i[o]);
    }for (var n = 0, r = e.length; r > n; n++) {
      e[n][t]();
    }
  }, t.destroyAll = function () {
    t.invokeAll("destroy");
  }, t.disableAll = function () {
    t.invokeAll("disable");
  }, t.enableAll = function () {
    t.Context.refreshAll();for (var e in i) {
      i[e].enabled = !0;
    }return this;
  }, t.refreshAll = function () {
    t.Context.refreshAll();
  }, t.viewportHeight = function () {
    return window.innerHeight || document.documentElement.clientHeight;
  }, t.viewportWidth = function () {
    return document.documentElement.clientWidth;
  }, t.adapters = [], t.defaults = { context: window, continuous: !0, enabled: !0, group: "default", horizontal: !1, offset: 0 }, t.offsetAliases = { "bottom-in-view": function bottomInView() {
      return this.context.innerHeight() - this.adapter.outerHeight();
    }, "right-in-view": function rightInView() {
      return this.context.innerWidth() - this.adapter.outerWidth();
    } }, window.Waypoint = t;
}(), function () {
  "use strict";
  function t(t) {
    window.setTimeout(t, 1e3 / 60);
  }function e(t) {
    this.element = t, this.Adapter = n.Adapter, this.adapter = new this.Adapter(t), this.key = "waypoint-context-" + i, this.didScroll = !1, this.didResize = !1, this.oldScroll = { x: this.adapter.scrollLeft(), y: this.adapter.scrollTop() }, this.waypoints = { vertical: {}, horizontal: {} }, t.waypointContextKey = this.key, o[t.waypointContextKey] = this, i += 1, n.windowContext || (n.windowContext = !0, n.windowContext = new e(window)), this.createThrottledScrollHandler(), this.createThrottledResizeHandler();
  }var i = 0,
      o = {},
      n = window.Waypoint,
      r = window.onload;e.prototype.add = function (t) {
    var e = t.options.horizontal ? "horizontal" : "vertical";this.waypoints[e][t.key] = t, this.refresh();
  }, e.prototype.checkEmpty = function () {
    var t = this.Adapter.isEmptyObject(this.waypoints.horizontal),
        e = this.Adapter.isEmptyObject(this.waypoints.vertical),
        i = this.element == this.element.window;t && e && !i && (this.adapter.off(".waypoints"), delete o[this.key]);
  }, e.prototype.createThrottledResizeHandler = function () {
    function t() {
      e.handleResize(), e.didResize = !1;
    }var e = this;this.adapter.on("resize.waypoints", function () {
      e.didResize || (e.didResize = !0, n.requestAnimationFrame(t));
    });
  }, e.prototype.createThrottledScrollHandler = function () {
    function t() {
      e.handleScroll(), e.didScroll = !1;
    }var e = this;this.adapter.on("scroll.waypoints", function () {
      (!e.didScroll || n.isTouch) && (e.didScroll = !0, n.requestAnimationFrame(t));
    });
  }, e.prototype.handleResize = function () {
    n.Context.refreshAll();
  }, e.prototype.handleScroll = function () {
    var t = {},
        e = { horizontal: { newScroll: this.adapter.scrollLeft(), oldScroll: this.oldScroll.x, forward: "right", backward: "left" }, vertical: { newScroll: this.adapter.scrollTop(), oldScroll: this.oldScroll.y, forward: "down", backward: "up" } };for (var i in e) {
      var o = e[i],
          n = o.newScroll > o.oldScroll,
          r = n ? o.forward : o.backward;for (var s in this.waypoints[i]) {
        var a = this.waypoints[i][s];if (null !== a.triggerPoint) {
          var l = o.oldScroll < a.triggerPoint,
              h = o.newScroll >= a.triggerPoint,
              p = l && h,
              u = !l && !h;(p || u) && (a.queueTrigger(r), t[a.group.id] = a.group);
        }
      }
    }for (var c in t) {
      t[c].flushTriggers();
    }this.oldScroll = { x: e.horizontal.newScroll, y: e.vertical.newScroll };
  }, e.prototype.innerHeight = function () {
    return this.element == this.element.window ? n.viewportHeight() : this.adapter.innerHeight();
  }, e.prototype.remove = function (t) {
    delete this.waypoints[t.axis][t.key], this.checkEmpty();
  }, e.prototype.innerWidth = function () {
    return this.element == this.element.window ? n.viewportWidth() : this.adapter.innerWidth();
  }, e.prototype.destroy = function () {
    var t = [];for (var e in this.waypoints) {
      for (var i in this.waypoints[e]) {
        t.push(this.waypoints[e][i]);
      }
    }for (var o = 0, n = t.length; n > o; o++) {
      t[o].destroy();
    }
  }, e.prototype.refresh = function () {
    var t,
        e = this.element == this.element.window,
        i = e ? void 0 : this.adapter.offset(),
        o = {};this.handleScroll(), t = { horizontal: { contextOffset: e ? 0 : i.left, contextScroll: e ? 0 : this.oldScroll.x, contextDimension: this.innerWidth(), oldScroll: this.oldScroll.x, forward: "right", backward: "left", offsetProp: "left" }, vertical: { contextOffset: e ? 0 : i.top, contextScroll: e ? 0 : this.oldScroll.y, contextDimension: this.innerHeight(), oldScroll: this.oldScroll.y, forward: "down", backward: "up", offsetProp: "top" } };for (var r in t) {
      var s = t[r];for (var a in this.waypoints[r]) {
        var l,
            h,
            p,
            u,
            c,
            d = this.waypoints[r][a],
            f = d.options.offset,
            w = d.triggerPoint,
            y = 0,
            g = null == w;d.element !== d.element.window && (y = d.adapter.offset()[s.offsetProp]), "function" == typeof f ? f = f.apply(d) : "string" == typeof f && (f = parseFloat(f), d.options.offset.indexOf("%") > -1 && (f = Math.ceil(s.contextDimension * f / 100))), l = s.contextScroll - s.contextOffset, d.triggerPoint = Math.floor(y + l - f), h = w < s.oldScroll, p = d.triggerPoint >= s.oldScroll, u = h && p, c = !h && !p, !g && u ? (d.queueTrigger(s.backward), o[d.group.id] = d.group) : !g && c ? (d.queueTrigger(s.forward), o[d.group.id] = d.group) : g && s.oldScroll >= d.triggerPoint && (d.queueTrigger(s.forward), o[d.group.id] = d.group);
      }
    }return n.requestAnimationFrame(function () {
      for (var t in o) {
        o[t].flushTriggers();
      }
    }), this;
  }, e.findOrCreateByElement = function (t) {
    return e.findByElement(t) || new e(t);
  }, e.refreshAll = function () {
    for (var t in o) {
      o[t].refresh();
    }
  }, e.findByElement = function (t) {
    return o[t.waypointContextKey];
  }, window.onload = function () {
    r && r(), e.refreshAll();
  }, n.requestAnimationFrame = function (e) {
    var i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || t;i.call(window, e);
  }, n.Context = e;
}(), function () {
  "use strict";
  function t(t, e) {
    return t.triggerPoint - e.triggerPoint;
  }function e(t, e) {
    return e.triggerPoint - t.triggerPoint;
  }function i(t) {
    this.name = t.name, this.axis = t.axis, this.id = this.name + "-" + this.axis, this.waypoints = [], this.clearTriggerQueues(), o[this.axis][this.name] = this;
  }var o = { vertical: {}, horizontal: {} },
      n = window.Waypoint;i.prototype.add = function (t) {
    this.waypoints.push(t);
  }, i.prototype.clearTriggerQueues = function () {
    this.triggerQueues = { up: [], down: [], left: [], right: [] };
  }, i.prototype.flushTriggers = function () {
    for (var i in this.triggerQueues) {
      var o = this.triggerQueues[i],
          n = "up" === i || "left" === i;o.sort(n ? e : t);for (var r = 0, s = o.length; s > r; r += 1) {
        var a = o[r];(a.options.continuous || r === o.length - 1) && a.trigger([i]);
      }
    }this.clearTriggerQueues();
  }, i.prototype.next = function (e) {
    this.waypoints.sort(t);var i = n.Adapter.inArray(e, this.waypoints),
        o = i === this.waypoints.length - 1;return o ? null : this.waypoints[i + 1];
  }, i.prototype.previous = function (e) {
    this.waypoints.sort(t);var i = n.Adapter.inArray(e, this.waypoints);return i ? this.waypoints[i - 1] : null;
  }, i.prototype.queueTrigger = function (t, e) {
    this.triggerQueues[e].push(t);
  }, i.prototype.remove = function (t) {
    var e = n.Adapter.inArray(t, this.waypoints);e > -1 && this.waypoints.splice(e, 1);
  }, i.prototype.first = function () {
    return this.waypoints[0];
  }, i.prototype.last = function () {
    return this.waypoints[this.waypoints.length - 1];
  }, i.findOrCreate = function (t) {
    return o[t.axis][t.name] || new i(t);
  }, n.Group = i;
}(), function () {
  "use strict";
  function t(t) {
    this.$element = e(t);
  }var e = __webpack_provided_window_dot_jQuery,
      i = window.Waypoint;e.each(["innerHeight", "innerWidth", "off", "offset", "on", "outerHeight", "outerWidth", "scrollLeft", "scrollTop"], function (e, i) {
    t.prototype[i] = function () {
      var t = Array.prototype.slice.call(arguments);return this.$element[i].apply(this.$element, t);
    };
  }), e.each(["extend", "inArray", "isEmptyObject"], function (i, o) {
    t[o] = e[o];
  }), i.adapters.push({ name: "jquery", Adapter: t }), i.Adapter = t;
}(), function () {
  "use strict";
  function t(t) {
    return function () {
      var i = [],
          o = arguments[0];return t.isFunction(arguments[0]) && (o = t.extend({}, arguments[1]), o.handler = arguments[0]), this.each(function () {
        var n = t.extend({}, o, { element: this });"string" == typeof n.context && (n.context = t(this).closest(n.context)[0]), i.push(new e(n));
      }), i;
    };
  }var e = window.Waypoint;__webpack_provided_window_dot_jQuery && (__webpack_provided_window_dot_jQuery.fn.waypoint = t(__webpack_provided_window_dot_jQuery)), window.Zepto && (window.Zepto.fn.waypoint = t(window.Zepto));
}();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),

/***/ "./resources/assets/js/App.js":
/*!************************************!*\
  !*** ./resources/assets/js/App.js ***!
  \************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__views_HomeView__ = __webpack_require__(/*! ./views/HomeView */ "./resources/assets/js/views/HomeView.js");
var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

//----------------------------------------------------------------------
// Dependencies
//----------------------------------------------------------------------



var ViewNames = {
    None: '',
    Home: 'home'
};

/**
 *
 *
 * @export
 * @class App
 */

var App = function () {
    //----------------------------------------------------------------------
    // Accessors
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // Init
    //----------------------------------------------------------------------

    /**
     * Creates an instance of App.
     * @param {any} viewName
     * @memberof App
     */
    function App(viewName, currentLang) {
        _classCallCheck(this, App);

        this._viewName = viewName;
        this._currentLang = currentLang;
        this._viewInstance = null;

        this.init();

        this.addListeners();
    }

    //----------------------------------------------------------------------
    // Lifecycle
    //----------------------------------------------------------------------

    _createClass(App, [{
        key: 'init',
        value: function init() {
            // Init current view based on 'data-view' string in html <body> tag
            this._viewInstance;

            switch (this._viewName) {
                case ViewNames.None:
                    this._viewInstance = null;
                    break;

                case ViewNames.Home:
                    this._viewInstance = new __WEBPACK_IMPORTED_MODULE_0__views_HomeView__["a" /* default */](this);
                    break;

                default:
                    if (true) {
                        console.warn('[App] Invalid view name received:', this._viewName);
                    }
                    break;
            }

            if (this._viewInstance) {
                this._viewInstance.init();
            }

            //this.isMobile = this.isJs.desktop();
        }

        //----------------------------------------------------------------------
        // Events
        //----------------------------------------------------------------------

    }, {
        key: 'addListeners',
        value: function addListeners() {}

        //----------------------------------------------------------------------
        // Handler events
        //----------------------------------------------------------------------

    }]);

    return App;
}();

/* harmony default export */ __webpack_exports__["a"] = (App);

/***/ }),

/***/ "./resources/assets/js/main.js":
/*!*************************************!*\
  !*** ./resources/assets/js/main.js ***!
  \*************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_polyfill__ = __webpack_require__(/*! @babel/polyfill */ "./node_modules/@babel/polyfill/lib/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_polyfill___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_polyfill__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_svg__ = __webpack_require__(/*! ./utils/svg */ "./resources/assets/js/utils/svg.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_svg___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__utils_svg__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__App__ = __webpack_require__(/*! ./App */ "./resources/assets/js/App.js");
/**
 * Polyfills
 * ---------
 * https://babeljs.io/docs/usage/polyfill/
 *
 */

__webpack_require__(/*! smoothscroll-polyfill */ "./node_modules/smoothscroll-polyfill/dist/smoothscroll.js").polyfill();

// CSS
// import '../css/main.scss';

// SVG Spritesheet




var initApp = function initApp() {
    // Extract data from DOM
    var html = document.querySelector('html');
    var body = document.querySelector('body');
    var currentLang = html.lang;
    //const lang = document.querySelector('#lng').value;
    var viewName = body.getAttribute('data-view');
    var app = new __WEBPACK_IMPORTED_MODULE_2__App__["a" /* default */](viewName, currentLang);
};

document.addEventListener('DOMContentLoaded', initApp, false);

/***/ }),

/***/ "./resources/assets/js/utils/svg.js":
/*!******************************************!*\
  !*** ./resources/assets/js/utils/svg.js ***!
  \******************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

/**
 * SVG Loader
 * 
 * This will inject an SVG sprite at the top of the HTML
 * document at runtime. This way we can use the `xlink:href`
 * syntax either in normal HTML or in JS (Vue or React components).
 * 
 * Example:
 * 
 * ```html
 *  <svg>
 *      <use xlink:href="#twitter"></use>
 *  </svg>
 * ```
 * 
 * Where `#twitter` would correspond to the file name on
 * disk (ex: `twitter.svg`) when imported as a module in JavaScript/Webpack.
 * 
 * What is happening here?
 * 
 * 1. We are using require.context to generate a list of SVG files in the assets folder.
 * 2. We then iterate over this list and load all the files using the svg-sprite loader.
 * 3. The svg-sprite loader then generates the sprite sheet and injects it into DOM on run-time. Similar to how style-loader works.
 * 
 * http://varun.ca/icon-component/
 */
var files = __webpack_require__(/*! svg-sprite-loader!./../../static/images/svg */ "./resources/assets/static/images/svg ./!./node_modules/svg-sprite-loader/lib/loader.js!./ .*\\.svg$");
files.keys().forEach(files);

/***/ }),

/***/ "./resources/assets/js/views/HomeView.js":
/*!***********************************************!*\
  !*** ./resources/assets/js/views/HomeView.js ***!
  \***********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__App__ = __webpack_require__(/*! ../App */ "./resources/assets/js/App.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_debounce__ = __webpack_require__(/*! lodash.debounce */ "./node_modules/lodash.debounce/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_debounce___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_debounce__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_validation__ = __webpack_require__(/*! jquery-validation */ "./node_modules/jquery-validation/dist/jquery.validate.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_validation___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery_validation__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_waypoints_lib_jquery_waypoints_min_js__ = __webpack_require__(/*! waypoints/lib/jquery.waypoints.min.js */ "./node_modules/waypoints/lib/jquery.waypoints.min.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_waypoints_lib_jquery_waypoints_min_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_waypoints_lib_jquery_waypoints_min_js__);
var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}







var HomeView = function () {
    /**
     * Creates an instance of HomeView.
     *
     * @param {App} app
     * @memberof HomeView
     */
    function HomeView(app) {
        _classCallCheck(this, HomeView);

        this.app = app;
    }

    //----------------------------------------------------------------------
    // Lifecycle
    //----------------------------------------------------------------------

    _createClass(HomeView, [{
        key: 'init',
        value: function init() {
            this.addListeners();

            // var waypoint = new Waypoint({
            //     element: document.getElementById('headerWaypoint'),
            //     handler: function(direction) {
            //         var bannerVideoOverlay = document.getElementById('bannerVideoOverlay');
            //         var bannerLogoH = document.getElementById('bannerLogoH');
            //         if (direction == 'down') {
            //             bannerVideoOverlay.classList.add('active');
            //             bannerLogoH.classList.add('active');
            //         } else if (direction == 'up') {
            //             bannerVideoOverlay.classList.remove('active');
            //             bannerLogoH.classList.remove('active');
            //         }
            //     }
            // });
        }

        //----------------------------------------------------------------------
        // Events
        //----------------------------------------------------------------------

    }, {
        key: 'addListeners',
        value: function addListeners() {}

        //----------------------------------------------------------------------
        // Event Handlers
        //----------------------------------------------------------------------


    }]);

    return HomeView;
}();

/* harmony default export */ __webpack_exports__["a"] = (HomeView);

/***/ }),

/***/ "./resources/assets/static/images/svg ./!./node_modules/svg-sprite-loader/lib/loader.js!./ .*\\.svg$":
/*!*****************************************************************************************************************!*\
  !*** ./resources/assets/static/images/svg nonrecursive ./node_modules/svg-sprite-loader/lib/loader.js .*\.svg$ ***!
  \*****************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./icon-dribble.svg": "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-dribble.svg",
	"./icon-instagram.svg": "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-instagram.svg",
	"./icon-linkedin.svg": "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-linkedin.svg",
	"./icon-pogo.svg": "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/icon-pogo.svg",
	"./line.svg": "./node_modules/svg-sprite-loader/lib/loader.js!./resources/assets/static/images/svg/line.svg"
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./resources/assets/static/images/svg ./!./node_modules/svg-sprite-loader/lib/loader.js!./ .*\\.svg$";

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYWMyYmRiZGQ4NTM5YmU3MWFkMTQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvbm9Db25mbGljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3dlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXZhbGlkYXRpb24vZGlzdC9qcXVlcnkudmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmRlYm91bmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Ntb290aHNjcm9sbC1wb2x5ZmlsbC9kaXN0L3Ntb290aHNjcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2Zy9pY29uLWRyaWJibGUuc3ZnIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcvaWNvbi1pbnN0YWdyYW0uc3ZnIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcvaWNvbi1saW5rZWRpbi5zdmciLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2Zy9pY29uLXBvZ28uc3ZnIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcvbGluZS5zdmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dheXBvaW50cy9saWIvanF1ZXJ5LndheXBvaW50cy5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvQXBwLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3V0aWxzL3N2Zy5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3ZpZXdzL0hvbWVWaWV3LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcgbm9ucmVjdXJzaXZlIC4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL2xpYi9sb2FkZXIuanMgLipcXC5zdmckIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJfZ2xvYmFsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfYmFiZWxQb2x5ZmlsbCIsImNvbnNvbGUiLCJ3YXJuIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5IiwiZmxhdE1hcCIsImluY2x1ZGVzIiwiT2JqZWN0IiwiZW50cmllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJ2YWx1ZXMiLCJQcm9taXNlIiwiU3RyaW5nIiwicGFkRW5kIiwicGFkU3RhcnQiLCJ0cmltUmlnaHQiLCJ0cmltTGVmdCIsImYiLCJnbG9iYWwiLCJpdCIsIlR5cGVFcnJvciIsImlzT2JqZWN0IiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJhIiwiY2FsbCIsImIiLCJjIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiaGlkZSIsImhhcyIsIlBST1RPVFlQRSIsIiRleHBvcnQiLCJ0eXBlIiwibmFtZSIsInNvdXJjZSIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsInRhcmdldCIsImtleSIsIm93biIsIm91dCIsIkMiLCJGdW5jdGlvbiIsInZpcnR1YWwiLCJSIiwiVSIsImV4ZWMiLCJlIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJfX2ciLCJoYXNPd25Qcm9wZXJ0eSIsImRQIiwiY3JlYXRlRGVzYyIsIm9iamVjdCIsInZhbHVlIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIkF0dHJpYnV0ZXMiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWwiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJjb2YiLCJtc2ciLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJwcm90b3R5cGUiLCJhdCIsImluZGV4IiwidW5pY29kZSIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsInRvTGVuZ3RoIiwiY29weVdpdGhpbiIsInN0YXJ0IiwibGVuIiwidG8iLCJmcm9tIiwiZW5kIiwiY291bnQiLCJtaW4iLCJpbmMiLCJmaWxsIiwiYUxlbiIsImVuZFBvcyIsInRvSU9iamVjdCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsIklPYmplY3QiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsImNyZWF0ZSIsImNhbGxiYWNrZm4iLCJyZXN1bHQiLCJyZXMiLCJwdXNoIiwibWVtbyIsImlzUmlnaHQiLCJpIiwiaXNBcnJheSIsIlNQRUNJRVMiLCJvcmlnaW5hbCIsImNvbnN0cnVjdG9yIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiaW52b2tlIiwiYXJyYXlTbGljZSIsInNsaWNlIiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwiYXJncyIsIm4iLCJqb2luIiwiYmluZCIsInBhcnRBcmdzIiwiYm91bmQiLCJjb25jYXQiLCJUQUciLCJBUkciLCJ0cnlHZXQiLCJUIiwiY2FsbGVlIiwicmVkZWZpbmVBbGwiLCJhbkluc3RhbmNlIiwiZm9yT2YiLCIkaXRlckRlZmluZSIsInN0ZXAiLCJzZXRTcGVjaWVzIiwiREVTQ1JJUFRPUlMiLCJmYXN0S2V5IiwidmFsaWRhdGUiLCJTSVpFIiwiZ2V0RW50cnkiLCJlbnRyeSIsIl9pIiwiX2YiLCJrIiwiZ2V0Q29uc3RydWN0b3IiLCJ3cmFwcGVyIiwiTkFNRSIsIkFEREVSIiwiaXRlcmFibGUiLCJfdCIsIl9sIiwiY2xlYXIiLCJkYXRhIiwiciIsInAiLCJuZXh0IiwicHJldiIsImZvckVhY2giLCJ2IiwiZGVmIiwic2V0U3Ryb25nIiwiaXRlcmF0ZWQiLCJraW5kIiwiX2siLCJnZXRXZWFrIiwiY3JlYXRlQXJyYXlNZXRob2QiLCIkaGFzIiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJpZCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwic3RvcmUiLCJzZXQiLCJzcGxpY2UiLCJ1ZnN0b3JlIiwicmVkZWZpbmUiLCJtZXRhIiwiZmFpbHMiLCIkaXRlckRldGVjdCIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkJhc2UiLCJwcm90byIsImZpeE1ldGhvZCIsIktFWSIsImFkZCIsIk5FRUQiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiaXRlciIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCIkZGVmaW5lUHJvcGVydHkiLCJnZXRUaW1lIiwiRGF0ZSIsIiR0b0lTT1N0cmluZyIsInRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJOYU4iLCJpc0Zpbml0ZSIsIlJhbmdlRXJyb3IiLCJkIiwieSIsImdldFVUQ0Z1bGxZZWFyIiwibSIsImdldFVUQ01pbGxpc2Vjb25kcyIsInMiLCJhYnMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiTlVNQkVSIiwiaGludCIsInNwbGl0IiwiZ2V0S2V5cyIsImdPUFMiLCJwSUUiLCJnZXRTeW1ib2xzIiwic3ltYm9scyIsImlzRW51bSIsImV4cCIsIk1BVENIIiwicmUiLCJkZWZpbmVkIiwid2tzIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiZ3JvdXBzIiwicmVwbGFjZSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJtYXliZUNhbGxOYXRpdmUiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJzdHIiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJkb25lIiwic3RyZm4iLCJyeGZuIiwiUmVnRXhwIiwic3RyaW5nIiwiYXJnIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIklURVJBVE9SIiwiaXRlckZuIiwiaXRlcmF0b3IiLCJkb2N1bWVudEVsZW1lbnQiLCJzZXRQcm90b3R5cGVPZiIsInVuIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJJdGVyYXRvcnMiLCJmbG9vciIsImlzSW50ZWdlciIsImlzUmVnRXhwIiwicmV0IiwiZGVzY3JpcHRvciIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTElCUkFSWSIsIiRpdGVyQ3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJCVUdHWSIsImtleXMiLCJGRl9JVEVSQVRPUiIsIktFWVMiLCJWQUxVRVMiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsInNhZmUiLCJhcnIiLCIkZXhwbTEiLCJleHBtMSIsIngiLCJzaWduIiwicG93IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJyb3VuZFRpZXNUb0V2ZW4iLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJJbmZpbml0eSIsImxvZzFwIiwibG9nIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3Iiwib25GcmVlemUiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsImlzTm9kZSIsImhlYWQiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJuZXh0VGljayIsIm5hdmlnYXRvciIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInJlc29sdmUiLCJwcm9taXNlIiwidGhlbiIsInRhc2siLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJTeW1ib2wiLCJLIiwiaiIsImRQcyIsImVudW1CdWdLZXlzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWUiLCJsdCIsImd0IiwiaWZyYW1lRG9jdW1lbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdFByb3RvIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJpc0VudHJpZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIiR0cmltIiwidHJpbSIsImNoYXJBdCIsIiRwYXJzZUludCIsInBhcnNlSW50Iiwid3MiLCJoZXgiLCJyYWRpeCIsInRlc3QiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5IiwiU1JDIiwiJHRvU3RyaW5nIiwiVE9fU1RSSU5HIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsImlzRnVuY3Rpb24iLCJjbGFzc29mIiwiYnVpbHRpbkV4ZWMiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJMQVNUX0lOREVYIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwicmUxIiwicmUyIiwiTlBDR19JTkNMVURFRCIsIlBBVENIIiwibGFzdEluZGV4IiwicmVDb3B5IiwibWF0Y2giLCJjaGVjayIsImJ1Z2d5IiwiX19wcm90b19fIiwidGFnIiwic3RhdCIsInNoYXJlZCIsInVpZCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJEIiwibWV0aG9kIiwidG9JbnRlZ2VyIiwicG9zIiwibCIsImNoYXJDb2RlQXQiLCJzZWFyY2hTdHJpbmciLCJxdW90IiwiY3JlYXRlSFRNTCIsImF0dHJpYnV0ZSIsInAxIiwidG9Mb3dlckNhc2UiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiY2VpbCIsInNwYWNlcyIsInNwYWNlIiwibm9uIiwibHRyaW0iLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm1heCIsIm51bWJlciIsImlzTmFOIiwiJHR5cGVkIiwiJGJ1ZmZlciIsInByb3BlcnR5RGVzYyIsInRvSW5kZXgiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwiQXJyYXlJdGVyYXRvcnMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlVpbnQ4QXJyYXkiLCJBUlJBWV9CVUZGRVIiLCJTSEFSRURfQlVGRkVSIiwiQllURVNfUEVSX0VMRU1FTlQiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiV1JPTkdfTEVOR1RIIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiYnVmZmVyIiwiRk9SQ0VEX1NFVCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJtYXBmbiIsIm1hcHBpbmciLCIkb2YiLCJvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJldmVyeSIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJUQUMiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiZ2V0dGVyIiwibyIsInNldHRlciIsInJvdW5kIiwiYWRkRWxlbWVudCIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwiREFUQV9WSUVXIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiTE4yIiwiQlVGRkVSIiwiQllURV9MRU5HVEgiLCJCWVRFX09GRlNFVCIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsIm51bUluZGV4IiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiYnVmZmVyTGVuZ3RoIiwiZ2V0SW50OCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50OCIsInNldFVpbnQ4Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiQXJyYXlCdWZmZXJQcm90byIsIiRzZXRJbnQ4IiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwicHgiLCJyYW5kb20iLCJ1c2VyQWdlbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiVVNFX1NZTUJPTCIsIiRleHBvcnRzIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCIkZXZlcnkiLCIkZmlsdGVyIiwiJGZpbmQiLCJmb3JjZWQiLCIkZm9yRWFjaCIsIlNUUklDVCIsImNyZWF0ZVByb3BlcnR5IiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIiRyZWR1Y2UiLCJ1cFRvIiwic2l6ZSIsImNsb25lZCIsIiRzb21lIiwiJHNvcnQiLCJ0b0pTT04iLCJwdiIsIlRPX1BSSU1JVElWRSIsIkRhdGVQcm90byIsIklOVkFMSURfREFURSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCJGUHJvdG8iLCJuYW1lUkUiLCJzdHJvbmciLCJNQVAiLCJNYXAiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJzdW0iLCJsYXJnIiwiZGl2IiwiJGltdWwiLCJpbXVsIiwiVUlOVDE2IiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwiRSIsInRhbmgiLCJ0cnVuYyIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJmaXJzdCIsInRoaXJkIiwibWF4Q29kZSIsImRpZ2l0cyIsImNvZGUiLCJfaXNGaW5pdGUiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIlpFUk8iLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJ0IiwiYWNjIiwieDIiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCIkZmFpbHMiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIiRmcmVlemUiLCJmcmVlemUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldFByb3RvdHlwZU9mIiwiJGlzRXh0ZW5zaWJsZSIsIiRpc0Zyb3plbiIsImlzRnJvemVuIiwiJGlzU2VhbGVkIiwiaXNTZWFsZWQiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkc2VhbCIsInNlYWwiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsIlBST01JU0UiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsImV4aXRlZCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsImdldFByb3RvIiwicmVjZWl2ZXIiLCJzZXRQcm90byIsIlYiLCJvd25EZXNjIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsImZsYWdzIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJtYXliZVRvU3RyaW5nIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiJFNQTElUIiwiTEVOR1RIIiwiTUFYX1VJTlQzMiIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsImxhc3RMZW5ndGgiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsInEiLCJkZWZpbmUiLCJTRVQiLCJTZXQiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCIkYXQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCJFTkRTX1dJVEgiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwiZml4ZWQiLCJmb250Y29sb3IiLCJjb2xvciIsImZvbnRzaXplIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiSU5DTFVERVMiLCJpdGFsaWNzIiwicG9pbnQiLCJsaW5rIiwidXJsIiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCJzbWFsbCIsIlNUQVJUU19XSVRIIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwic3RyaWtlIiwic3ViIiwic3VwIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIkhJRERFTiIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiJGlzVmlldyIsImlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJJbnQ4QXJyYXkiLCJVaW50MzJBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIldFQUtfTUFQIiwiSW50ZXJuYWxNYXAiLCJXZWFrTWFwIiwiJFdlYWtNYXAiLCJXRUFLX1NFVCIsIldlYWtTZXQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCIkaW5jbHVkZXMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIm9uRmluYWxseSIsIiRwYWQiLCJXRUJLSVRfQlVHIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsImZhY3RvcnkiLCJqUXVlcnkiLCIkIiwiZXh0ZW5kIiwib3B0aW9ucyIsImRlYnVnIiwidmFsaWRhdG9yIiwiYXR0ciIsInNldHRpbmdzIiwib25zdWJtaXQiLCJvbiIsInN1Ym1pdEJ1dHRvbiIsImN1cnJlbnRUYXJnZXQiLCJoYXNDbGFzcyIsImNhbmNlbFN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlIiwiaGlkZGVuIiwic3VibWl0SGFuZGxlciIsImZvcm1TdWJtaXR0ZWQiLCJhcHBlbmRUbyIsImN1cnJlbnRGb3JtIiwicmVtb3ZlIiwiZm9ybSIsInBlbmRpbmdSZXF1ZXN0IiwiZm9jdXNJbnZhbGlkIiwidmFsaWQiLCJlcnJvckxpc3QiLCJydWxlcyIsImNvbW1hbmQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInN0YXRpY1J1bGVzIiwiZXhpc3RpbmdSdWxlcyIsInBhcmFtIiwiZmlsdGVyZWQiLCJjbG9zZXN0Iiwibm9ybWFsaXplUnVsZSIsIm1lc3NhZ2VzIiwibm9ybWFsaXplUnVsZXMiLCJjbGFzc1J1bGVzIiwiYXR0cmlidXRlUnVsZXMiLCJkYXRhUnVsZXMiLCJyZXF1aXJlZCIsInJlbW90ZSIsImV4cHIiLCJwc2V1ZG9zIiwiYmxhbmsiLCJmaWxsZWQiLCJ1bmNoZWNrZWQiLCJwcm9wIiwiZGVmYXVsdHMiLCJmb3JtYXQiLCJwYXJhbXMiLCJtYWtlQXJyYXkiLCJ1bnNoaWZ0IiwiZXJyb3JDbGFzcyIsInBlbmRpbmdDbGFzcyIsInZhbGlkQ2xhc3MiLCJlcnJvckVsZW1lbnQiLCJmb2N1c0NsZWFudXAiLCJlcnJvckNvbnRhaW5lciIsImVycm9yTGFiZWxDb250YWluZXIiLCJpZ25vcmUiLCJpZ25vcmVUaXRsZSIsIm9uZm9jdXNpbiIsImxhc3RBY3RpdmUiLCJ1bmhpZ2hsaWdodCIsImhpZGVUaGVzZSIsImVycm9yc0ZvciIsIm9uZm9jdXNvdXQiLCJjaGVja2FibGUiLCJzdWJtaXR0ZWQiLCJvcHRpb25hbCIsIm9ua2V5dXAiLCJleGNsdWRlZEtleXMiLCJ3aGljaCIsImVsZW1lbnRWYWx1ZSIsImluQXJyYXkiLCJrZXlDb2RlIiwiaW52YWxpZCIsIm9uY2xpY2siLCJwYXJlbnROb2RlIiwiaGlnaGxpZ2h0IiwiZmluZEJ5TmFtZSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJzZXREZWZhdWx0cyIsImVtYWlsIiwiZGF0ZSIsImRhdGVJU08iLCJlcXVhbFRvIiwibWF4bGVuZ3RoIiwibWlubGVuZ3RoIiwicmFuZ2VsZW5ndGgiLCJyYW5nZSIsImF1dG9DcmVhdGVSYW5nZXMiLCJsYWJlbENvbnRhaW5lciIsImVycm9yQ29udGV4dCIsImNvbnRhaW5lcnMiLCJ2YWx1ZUNhY2hlIiwicGVuZGluZyIsInJlc2V0IiwiZGVsZWdhdGUiLCJldmVudFR5cGUiLCJpbnZhbGlkSGFuZGxlciIsImNoZWNrRm9ybSIsImVycm9yTWFwIiwidHJpZ2dlckhhbmRsZXIiLCJzaG93RXJyb3JzIiwicHJlcGFyZUZvcm0iLCJlbGVtZW50cyIsImN1cnJlbnRFbGVtZW50cyIsImNsZWFuRWxlbWVudCIsImNsZWFuIiwiY2hlY2tFbGVtZW50IiwidmFsaWRhdGlvblRhcmdldEZvciIsInJzIiwiZ3JvdXAiLCJwcmVwYXJlRWxlbWVudCIsInRlc3Rncm91cCIsIm51bWJlck9mSW52YWxpZHMiLCJ0b0hpZGUiLCJlcnJvcnMiLCJtZXNzYWdlIiwic3VjY2Vzc0xpc3QiLCJncmVwIiwiZGVmYXVsdFNob3dFcnJvcnMiLCJyZXNldEZvcm0iLCJoaWRlRXJyb3JzIiwicmVtb3ZlRGF0YSIsInJlbW92ZUF0dHIiLCJyZXNldEVsZW1lbnRzIiwib2JqZWN0TGVuZ3RoIiwibm90IiwidGV4dCIsImFkZFdyYXBwZXIiLCJmaW5kTGFzdEFjdGl2ZSIsInRyaWdnZXIiLCJydWxlc0NhY2hlIiwic2VsZWN0b3IiLCJyZXNldEludGVybmFscyIsInRvU2hvdyIsIiRlbGVtZW50IiwiaWR4IiwidmFsaWRpdHkiLCJiYWRJbnB1dCIsInN1YnN0ciIsInJ1bGVzQ291bnQiLCJkZXBlbmRlbmN5TWlzbWF0Y2giLCJydWxlIiwibm9ybWFsaXplciIsInBhcmFtZXRlcnMiLCJmb3JtYXRBbmRBZGQiLCJjdXN0b21EYXRhTWVzc2FnZSIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwiY3VzdG9tTWVzc2FnZSIsImZpbmREZWZpbmVkIiwiZGVmYXVsdE1lc3NhZ2UiLCJ0aXRsZSIsInRoZXJlZ2V4IiwidG9Ub2dnbGUiLCJzaG93TGFiZWwiLCJzdWNjZXNzIiwidmFsaWRFbGVtZW50cyIsInNob3ciLCJpbnZhbGlkRWxlbWVudHMiLCJwbGFjZSIsImVycm9ySUQiLCJlbGVtZW50SUQiLCJpZE9yTmFtZSIsImRlc2NyaWJlZEJ5IiwiYXBwZW5kIiwiZXJyb3JQbGFjZW1lbnQiLCJpbnNlcnRBZnRlciIsInBhcmVudHMiLCJlc2NhcGVDc3NNZXRhIiwiZGVzY3JpYmVyIiwiZ2V0TGVuZ3RoIiwibm9kZU5hbWUiLCJkZXBlbmQiLCJkZXBlbmRUeXBlcyIsInN0YXJ0UmVxdWVzdCIsInN0b3BSZXF1ZXN0Iiwic3VibWl0IiwicHJldmlvdXNWYWx1ZSIsIm9sZCIsImRlc3Ryb3kiLCJvZmYiLCJjbGFzc1J1bGVTZXR0aW5ncyIsImNyZWRpdGNhcmQiLCJhZGRDbGFzc1J1bGVzIiwiY2xhc3NOYW1lIiwiY2xhc3NlcyIsIm5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGUiLCJnZXRBdHRyaWJ1dGUiLCJkZXBlbmRzIiwia2VlcFJ1bGUiLCJwYXJhbWV0ZXIiLCJwYXJ0cyIsInRyYW5zZm9ybWVkIiwiYWRkTWV0aG9kIiwiY2FsbGVkIiwiZXJyb3JNZXNzYWdlIiwic3VwcG9ydGVkVHlwZXMiLCJub3RTdXBwb3J0ZWQiLCJkZWNpbWFsUGxhY2VzIiwidG9JbnQiLCJkZWNpbWFscyIsIkVycm9yIiwicHJldmlvdXMiLCJvcHRpb25EYXRhU3RyaW5nIiwib3JpZ2luYWxNZXNzYWdlIiwiYWpheCIsImRhdGFUeXBlIiwicmVzcG9uc2UiLCJwZW5kaW5nUmVxdWVzdHMiLCJhamF4UHJlZmlsdGVyIiwiXyIsInhociIsImFib3J0IiwiYWpheFNldHRpbmdzIiwibm9HbG9iYWwiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJkb2MiLCJzY3JpcHQiLCJzZXRBdHRyaWJ1dGUiLCJ0b1R5cGUiLCJqcXVlcnkiLCJ0b0FycmF5IiwicHVzaFN0YWNrIiwiZWxlbXMiLCJtZXJnZSIsInByZXZPYmplY3QiLCJjYWxsYmFjayIsImVsZW0iLCJlcSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm5vb3AiLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJpc0FycmF5TGlrZSIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImd1aWQiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsInBvcCIsInB1c2hfbmF0aXZlIiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImFzQ29kZVBvaW50IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibmlkIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYXR0YWNoRXZlbnQiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRtcCIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJmaWx0ZXJzIiwicGFyc2VPbmx5IiwidG9rZW5zIiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic2V0TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJ0YXJnZXRzIiwicHJldkFsbCIsImFkZEJhY2siLCJzaWJsaW5nIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJybm90aHRtbHdoaXRlIiwiY3JlYXRlT3B0aW9ucyIsImZsYWciLCJDYWxsYmFja3MiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJJZGVudGl0eSIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJub1ZhbHVlIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsInNwZWNpYWwiLCJtaWdodFRocm93Iiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImxldHRlciIsImNhbWVsQ2FzZSIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJnZXREYXRhIiwicGFyc2UiLCJkYXRhQXR0ciIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsImNsZWFyUXVldWUiLCJwbnVtIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiY3NzIiwic3dhcCIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50IiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwibGV2ZXJhZ2VOYXRpdmUiLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiY2hhckNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwicHJlcGVuZFRvIiwicmVwbGFjZUFsbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwid2lkdGgiLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsQm94U3R5bGVzIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiZ2V0V2lkdGhPckhlaWdodCIsImJveFNpemluZ05lZWRlZCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwiVHdlZW4iLCJlYXNpbmciLCJwcm9wSG9va3MiLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsIm9wdHMiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsImNvbXBsZXRlIiwidGltZXIiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4Iiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInRocm93cyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsImFqYXhTZXR1cCIsImFqYXhUcmFuc3BvcnQiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwibW9kaWZpZWQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJ1bmJpbmQiLCJ1bmRlbGVnYXRlIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJGVU5DX0VSUk9SX1RFWFQiLCJOQU4iLCJzeW1ib2xUYWciLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsIm9iamVjdFByb3RvIiwib2JqZWN0VG9TdHJpbmciLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJkZWJvdW5jZSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwicmVtYWluaW5nV2FpdCIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZVNpbmNlTGFzdEludm9rZSIsInNob3VsZEludm9rZSIsInRyYWlsaW5nRWRnZSIsImNhbmNlbCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJpc09iamVjdExpa2UiLCJvdGhlciIsImlzQmluYXJ5IiwicnVudGltZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRpc3BsYXlOYW1lIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJfX2F3YWl0IiwiQXN5bmNJdGVyYXRvciIsInJlY29yZCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImVucXVldWUiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsIml0ZXJhdG9yTWV0aG9kIiwic2tpcFRlbXBSZXNldCIsInJvb3RFbnRyeSIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwicG9seWZpbGwiLCJfX2ZvcmNlU21vb3RoU2Nyb2xsUG9seWZpbGxfXyIsIkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsIlNDUk9MTF9USU1FIiwic2Nyb2xsIiwic2Nyb2xsQnkiLCJlbGVtZW50U2Nyb2xsIiwic2Nyb2xsRWxlbWVudCIsInNjcm9sbEludG9WaWV3IiwicGVyZm9ybWFuY2UiLCJpc01pY3Jvc29mdEJyb3dzZXIiLCJ1c2VyQWdlbnRQYXR0ZXJucyIsIlJPVU5ESU5HX1RPTEVSQU5DRSIsImVhc2UiLCJzaG91bGRCYWlsT3V0IiwiZmlyc3RBcmciLCJiZWhhdmlvciIsImhhc1Njcm9sbGFibGVTcGFjZSIsImF4aXMiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRXaWR0aCIsInNjcm9sbFdpZHRoIiwiY2FuT3ZlcmZsb3ciLCJvdmVyZmxvd1ZhbHVlIiwiaXNTY3JvbGxhYmxlIiwiaXNTY3JvbGxhYmxlWSIsImlzU2Nyb2xsYWJsZVgiLCJmaW5kU2Nyb2xsYWJsZVBhcmVudCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJlbGFwc2VkIiwic3RhcnRYIiwic3RhcnRZIiwic2Nyb2xsYWJsZSIsInNtb290aFNjcm9sbCIsInNjcm9sbFgiLCJzY3JvbGxZIiwiU3ludGF4RXJyb3IiLCJzY3JvbGxhYmxlUGFyZW50IiwicGFyZW50UmVjdHMiLCJjbGllbnRSZWN0cyIsIkJyb3dzZXJTcHJpdGVTeW1ib2wiLCJTcHJpdGVTeW1ib2wiLCJyZWYiLCJ2aWV3Qm94IiwidGhpcyQxIiwiaGFzSW1wb3J0Tm9kZSIsImltcG9ydE5vZGUiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZGVlcG1lcmdlIiwiaXNNZXJnZWFibGVPYmplY3QiLCJub25OdWxsT2JqZWN0IiwiZW1wdHlUYXJnZXQiLCJjbG9uZUlmTmVjZXNzYXJ5Iiwib3B0aW9uc0FyZ3VtZW50IiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJkZXN0aW5hdGlvbiIsIm1lcmdlT2JqZWN0IiwiYXJyYXkiLCJhcnJheU1lcmdlIiwiZGVlcG1lcmdlQWxsIiwibmFtZXNwYWNlc18xIiwic3ZnIiwidXJpIiwieGxpbmsiLCJkZWZhdWx0Iiwib2JqZWN0VG9BdHRyc1N0cmluZyIsImRlZmF1bHRBdHRycyIsIndyYXBJblN2Z1N0cmluZyIsImF0dHJzUmVuZGVyZWQiLCJTcHJpdGVTeW1ib2wkJDEiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJpc01vdW50ZWQiLCJjcmVhdGVGcm9tRXhpc3RpbmdOb2RlIiwib3V0ZXJIVE1MIiwidW5tb3VudCIsIm1vdW50IiwibW91bnRUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwicmVuZGVyIiwiQnJvd3NlclNwcml0ZSIsIm1pdHQiLCJzdmckMSIsInhsaW5rJDEiLCJkZWZhdWx0Q29uZmlnIiwiU3ByaXRlIiwiY29uZmlnIiwic3ltYm9sIiwiZXhpc3RpbmciLCJzdHJpbmdpZmllZFN5bWJvbHMiLCJkZWZhdWx0Q29uZmlnJDEiLCJhdXRvQ29uZmlndXJlIiwibW91bnRUbyIsInN5bmNVcmxzV2l0aEJhc2VUYWciLCJsaXN0ZW5Mb2NhdGlvbkNoYW5nZUV2ZW50IiwibG9jYXRpb25DaGFuZ2VFdmVudCIsImxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXIiLCJ1c2FnZXNUb1VwZGF0ZSIsIm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sIiwiYXJyYXlGcm9tIiwidWEiLCJicm93c2VyIiwiaXNDaHJvbWUiLCJpc0ZpcmVmb3giLCJpc0lFIiwiaXNFZGdlIiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZXZhbFN0eWxlc0lFV29ya2Fyb3VuZCIsInVwZGF0ZWROb2RlcyIsImdldFVybFdpdGhvdXRGcmFnbWVudCIsImV2ZW50TmFtZSIsImFuZ3VsYXIiLCIkcm9vdFNjb3BlIiwiJG9uIiwibmV3VXJsIiwib2xkVXJsIiwiZGVmYXVsdFNlbGVjdG9yIiwic2VsZWN0QXR0cmlidXRlcyIsImFycmF5ZmllZCIsInhMaW5rTlMiLCJ4TGlua0F0dHJOYW1lIiwic3BlY2lhbFVybENoYXJzUGF0dGVybiIsImVuY29kZXIiLCJ1cGRhdGVSZWZlcmVuY2VzIiwic2V0QXR0cmlidXRlTlMiLCJhdHRMaXN0IiwiYXR0U2VsZWN0b3IiLCJ1cGRhdGVVcmxzIiwicmVmZXJlbmNlcyIsInN0YXJ0c1dpdGhFbmNvZGVkIiwicmVwbGFjZVdpdGhFbmNvZGVkIiwibG9jYWxOYW1lIiwiRXZlbnRzIiwiTU9VTlQiLCJTWU1CT0xfTU9VTlQiLCJTcHJpdGUkJDEiLCJjZmciLCJlbWl0dGVyIiwiX2VtaXR0ZXIiLCJfYXV0b0NvbmZpZ3VyZSIsImJhc2VVcmwiLCJoYW5kbGVMb2NhdGlvbkNoYW5nZSIsIl9oYW5kbGVMb2NhdGlvbkNoYW5nZSIsInNwcml0ZU5vZGUiLCJzeW1ib2xOb2RlIiwic3ByaXRlIiwiaXNOZXdTeW1ib2wiLCJhdHRhY2giLCJtb3VudE5vZGUiLCJ1cGRhdGVVcmxzJDEiLCJ1c2FnZXMiLCJyZWFkeSQxIiwiZGVmaW5pdGlvbiIsImhhY2siLCJkb21Db250ZW50TG9hZGVkIiwibG9hZGVkIiwic3ByaXRlTm9kZUlkIiwic3ByaXRlR2xvYmFsVmFyTmFtZSIsImlzU3ByaXRlRXhpc3RzIiwibG9hZFNwcml0ZSIsInNwcml0ZSQxIiwiQWRhcHRlciIsImFkYXB0ZXIiLCJob3Jpem9udGFsIiwiZW5hYmxlZCIsInRyaWdnZXJQb2ludCIsIkdyb3VwIiwiZmluZE9yQ3JlYXRlIiwiZmluZE9yQ3JlYXRlQnlFbGVtZW50Iiwib2Zmc2V0QWxpYXNlcyIsInF1ZXVlVHJpZ2dlciIsImVuYWJsZSIsInJlZnJlc2giLCJpbnZva2VBbGwiLCJkZXN0cm95QWxsIiwiZGlzYWJsZUFsbCIsImVuYWJsZUFsbCIsInJlZnJlc2hBbGwiLCJ2aWV3cG9ydEhlaWdodCIsImlubmVySGVpZ2h0Iiwidmlld3BvcnRXaWR0aCIsImFkYXB0ZXJzIiwiY29udGludW91cyIsIm91dGVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsIm91dGVyV2lkdGgiLCJXYXlwb2ludCIsImRpZFNjcm9sbCIsImRpZFJlc2l6ZSIsIm9sZFNjcm9sbCIsIndheXBvaW50cyIsInZlcnRpY2FsIiwid2F5cG9pbnRDb250ZXh0S2V5Iiwid2luZG93Q29udGV4dCIsImNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIiLCJjcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyIiwiY2hlY2tFbXB0eSIsImhhbmRsZVJlc2l6ZSIsImhhbmRsZVNjcm9sbCIsImlzVG91Y2giLCJuZXdTY3JvbGwiLCJiYWNrd2FyZCIsImgiLCJ1IiwiZmx1c2hUcmlnZ2VycyIsImNvbnRleHRPZmZzZXQiLCJjb250ZXh0U2Nyb2xsIiwiY29udGV4dERpbWVuc2lvbiIsImciLCJmaW5kQnlFbGVtZW50IiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJUcmlnZ2VyUXVldWVzIiwidHJpZ2dlclF1ZXVlcyIsInVwIiwiZG93biIsIndheXBvaW50IiwiWmVwdG8iLCJldmFsIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJWaWV3TmFtZXMiLCJOb25lIiwiSG9tZSIsIkFwcCIsImluaXRBcHAiLCJjdXJyZW50TGFuZyIsInZpZXdOYW1lIiwiYXBwIiwiZmlsZXMiLCJIb21lVmlldyJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7UUFFQTtRQUNBOzs7Ozs7Ozs7Ozs7O0FDN0RhOztBQUViQSxtQkFBT0EsQ0FBQyxzRUFBUjs7QUFFQSxJQUFJQyxVQUFVQyx1QkFBdUJGLG1CQUFPQSxDQUFDLDhFQUFSLENBQXZCLENBQWQ7O0FBRUEsU0FBU0Usc0JBQVQsQ0FBZ0NDLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsT0FBT0EsSUFBSUMsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRSxXQUFXQSxHQUFiLEVBQXJDO0FBQTBEOztBQUVqRyxJQUFJRixRQUFRLFNBQVIsRUFBbUJJLGNBQW5CLElBQXFDLE9BQU9DLE9BQVAsS0FBbUIsV0FBeEQsSUFBdUVBLFFBQVFDLElBQW5GLEVBQXlGO0FBQ3ZGRCxVQUFRQyxJQUFSLENBQWEsb0dBQW9HLDZGQUFwRyxHQUFvTSxxRkFBcE0sR0FBNFIsZ0NBQXpTO0FBQ0Q7O0FBRUROLFFBQVEsU0FBUixFQUFtQkksY0FBbkIsR0FBb0MsSUFBcEMsQzs7Ozs7Ozs7Ozs7OztBQ1phOztBQUViTCxtQkFBT0EsQ0FBQyx3REFBUjs7QUFFQUEsbUJBQU9BLENBQUMsOEVBQVI7O0FBRUFBLG1CQUFPQSxDQUFDLDhFQUFSOztBQUVBQSxtQkFBT0EsQ0FBQyxrRkFBUjs7QUFFQUEsbUJBQU9BLENBQUMsOEVBQVI7O0FBRUFBLG1CQUFPQSxDQUFDLG9GQUFSOztBQUVBQSxtQkFBT0EsQ0FBQyxnRkFBUjs7QUFFQUEsbUJBQU9BLENBQUMsNEZBQVI7O0FBRUFBLG1CQUFPQSxDQUFDLHdIQUFSOztBQUVBQSxtQkFBT0EsQ0FBQyw0RUFBUjs7QUFFQUEsbUJBQU9BLENBQUMsOEVBQVI7O0FBRUFBLG1CQUFPQSxDQUFDLGdGQUFSOztBQUVBQSxtQkFBT0EsQ0FBQyx3REFBUjs7QUFFQUEsbUJBQU9BLENBQUMsa0ZBQVIsRTs7Ozs7Ozs7Ozs7O0FDNUJBQSxtQkFBT0EsQ0FBQywyRUFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywyR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywrR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtSUFBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2R0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5SEFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpSEFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1R0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2R0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5R0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywyR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2R0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2R0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywyR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1R0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRUFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRUFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxpR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxtR0FBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQywyRkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx5RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyx1RkFBUjtBQUNBQSxtQkFBT0EsQ0FBQyw2RUFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRUFBUjtBQUNBQSxtQkFBT0EsQ0FBQyxxRUFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRUFBUjtBQUNBQSxtQkFBT0EsQ0FBQywrRUFBUjtBQUNBQSxtQkFB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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBRXFCQyxXO0FBQ2pCOzs7Ozs7QUFNQSwyQkFBaUI7QUFBQTs7QUFDYjtBQUNIOztBQUVEO0FBQ0E7QUFDQTs7OzsrQkFFTztBQUNIOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSDs7QUFFRDtBQUNBO0FBQ0E7Ozs7dUNBRWUsQ0FFZDs7QUFFRDtBQUNBO0FBQ0E7Ozs7Ozs7O0FBN0NpQkEsaUU7Ozs7Ozs7Ozs7OztBQ05yQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwSCIsImZpbGUiOiJqcy9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21haW4uanNcIik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgYWMyYmRiZGQ4NTM5YmU3MWFkMTQiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4vbm9Db25mbGljdFwiKTtcblxudmFyIF9nbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmlmIChfZ2xvYmFsW1wiZGVmYXVsdFwiXS5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbl9nbG9iYWxbXCJkZWZhdWx0XCJdLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9pbmRleC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9lczZcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9ub0NvbmZsaWN0LmpzIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lczYvaW5kZXguanMiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZmxhdE1hcDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwLmpzIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmluY2x1ZGVzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnZhbHVlcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC92YWx1ZXMuanMiLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2VbJ2ZpbmFsbHknXTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseS5qcyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmQuanMiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltUmlnaHQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmQuanMiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbUxlZnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignYXN5bmNJdGVyYXRvcicpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5nbG9iYWw7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbC5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCIvKiFcclxuICogalF1ZXJ5IFZhbGlkYXRpb24gUGx1Z2luIHYxLjE5LjFcclxuICpcclxuICogaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9cclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDE5IErDtnJuIFphZWZmZXJlclxyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICovXHJcbihmdW5jdGlvbiggZmFjdG9yeSApIHtcclxuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xyXG5cdFx0ZGVmaW5lKCBbXCJqcXVlcnlcIl0sIGZhY3RvcnkgKTtcclxuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSggXCJqcXVlcnlcIiApICk7XHJcblx0fSBlbHNlIHtcclxuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xyXG5cdH1cclxufShmdW5jdGlvbiggJCApIHtcclxuXHJcbiQuZXh0ZW5kKCAkLmZuLCB7XG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy92YWxpZGF0ZS9cblx0dmFsaWRhdGU6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgbm90aGluZyBpcyBzZWxlY3RlZCwgcmV0dXJuIG5vdGhpbmc7IGNhbid0IGNoYWluIGFueXdheVxuXHRcdGlmICggIXRoaXMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBvcHRpb25zICYmIG9wdGlvbnMuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJOb3RoaW5nIHNlbGVjdGVkLCBjYW4ndCB2YWxpZGF0ZSwgcmV0dXJuaW5nIG5vdGhpbmcuXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBhIHZhbGlkYXRvciBmb3IgdGhpcyBmb3JtIHdhcyBhbHJlYWR5IGNyZWF0ZWRcblx0XHR2YXIgdmFsaWRhdG9yID0gJC5kYXRhKCB0aGlzWyAwIF0sIFwidmFsaWRhdG9yXCIgKTtcblx0XHRpZiAoIHZhbGlkYXRvciApIHtcblx0XHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIG5vdmFsaWRhdGUgdGFnIGlmIEhUTUw1LlxuXHRcdHRoaXMuYXR0ciggXCJub3ZhbGlkYXRlXCIsIFwibm92YWxpZGF0ZVwiICk7XG5cblx0XHR2YWxpZGF0b3IgPSBuZXcgJC52YWxpZGF0b3IoIG9wdGlvbnMsIHRoaXNbIDAgXSApO1xuXHRcdCQuZGF0YSggdGhpc1sgMCBdLCBcInZhbGlkYXRvclwiLCB2YWxpZGF0b3IgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLm9uc3VibWl0ICkge1xuXG5cdFx0XHR0aGlzLm9uKCBcImNsaWNrLnZhbGlkYXRlXCIsIFwiOnN1Ym1pdFwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gVHJhY2sgdGhlIHVzZWQgc3VibWl0IGJ1dHRvbiB0byBwcm9wZXJseSBoYW5kbGUgc2NyaXB0ZWRcblx0XHRcdFx0Ly8gc3VibWl0cyBsYXRlci5cblx0XHRcdFx0dmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG5cblx0XHRcdFx0Ly8gQWxsb3cgc3VwcHJlc3NpbmcgdmFsaWRhdGlvbiBieSBhZGRpbmcgYSBjYW5jZWwgY2xhc3MgdG8gdGhlIHN1Ym1pdCBidXR0b25cblx0XHRcdFx0aWYgKCAkKCB0aGlzICkuaGFzQ2xhc3MoIFwiY2FuY2VsXCIgKSApIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuY2FuY2VsU3VibWl0ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFsbG93IHN1cHByZXNzaW5nIHZhbGlkYXRpb24gYnkgYWRkaW5nIHRoZSBodG1sNSBmb3Jtbm92YWxpZGF0ZSBhdHRyaWJ1dGUgdG8gdGhlIHN1Ym1pdCBidXR0b25cblx0XHRcdFx0aWYgKCAkKCB0aGlzICkuYXR0ciggXCJmb3Jtbm92YWxpZGF0ZVwiICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuY2FuY2VsU3VibWl0ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBWYWxpZGF0ZSB0aGUgZm9ybSBvbiBzdWJtaXRcblx0XHRcdHRoaXMub24oIFwic3VibWl0LnZhbGlkYXRlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3MuZGVidWcgKSB7XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IGZvcm0gc3VibWl0IHRvIGJlIGFibGUgdG8gc2VlIGNvbnNvbGUgb3V0cHV0XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZ1bmN0aW9uIGhhbmRsZSgpIHtcblx0XHRcdFx0XHR2YXIgaGlkZGVuLCByZXN1bHQ7XG5cblx0XHRcdFx0XHQvLyBJbnNlcnQgYSBoaWRkZW4gaW5wdXQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlIG1pc3Npbmcgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRcdC8vIFRoZSBoaWRkZW4gaW5wdXQgaXMgaW5zZXJ0ZWQgaW4gdHdvIGNhc2VzOlxuXHRcdFx0XHRcdC8vICAgLSBBIHVzZXIgZGVmaW5lZCBhIGBzdWJtaXRIYW5kbGVyYFxuXHRcdFx0XHRcdC8vICAgLSBUaGVyZSB3YXMgYSBwZW5kaW5nIHJlcXVlc3QgZHVlIHRvIGByZW1vdGVgIG1ldGhvZCBhbmQgYHN0b3BSZXF1ZXN0KClgXG5cdFx0XHRcdFx0Ly8gICAgIHdhcyBjYWxsZWQgdG8gc3VibWl0IHRoZSBmb3JtIGluIGNhc2UgaXQncyB2YWxpZFxuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiAmJiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyIHx8IHZhbGlkYXRvci5mb3JtU3VibWl0dGVkICkgKSB7XG5cdFx0XHRcdFx0XHRoaWRkZW4gPSAkKCBcIjxpbnB1dCB0eXBlPSdoaWRkZW4nLz5cIiApXG5cdFx0XHRcdFx0XHRcdC5hdHRyKCBcIm5hbWVcIiwgdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbi5uYW1lIClcblx0XHRcdFx0XHRcdFx0LnZhbCggJCggdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiApLnZhbCgpIClcblx0XHRcdFx0XHRcdFx0LmFwcGVuZFRvKCB2YWxpZGF0b3IuY3VycmVudEZvcm0gKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyICYmICF2YWxpZGF0b3Iuc2V0dGluZ3MuZGVidWcgKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB2YWxpZGF0b3Iuc2V0dGluZ3Muc3VibWl0SGFuZGxlci5jYWxsKCB2YWxpZGF0b3IsIHZhbGlkYXRvci5jdXJyZW50Rm9ybSwgZXZlbnQgKTtcblx0XHRcdFx0XHRcdGlmICggaGlkZGVuICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFuZCBjbGVhbiB1cCBhZnRlcndhcmRzOyB0aGFua3MgdG8gbm8tYmxvY2stc2NvcGUsIGhpZGRlbiBjYW4gYmUgcmVmZXJlbmNlZFxuXHRcdFx0XHRcdFx0XHRoaWRkZW4ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIHJlc3VsdCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByZXZlbnQgc3VibWl0IGZvciBpbnZhbGlkIGZvcm1zIG9yIGN1c3RvbSBzdWJtaXQgaGFuZGxlcnNcblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuY2FuY2VsU3VibWl0ICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSBmYWxzZTtcblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuZm9ybSgpICkge1xuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnBlbmRpbmdSZXF1ZXN0ICkge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmZvY3VzSW52YWxpZCgpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy92YWxpZC9cblx0dmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2YWxpZCwgdmFsaWRhdG9yLCBlcnJvckxpc3Q7XG5cblx0XHRpZiAoICQoIHRoaXNbIDAgXSApLmlzKCBcImZvcm1cIiApICkge1xuXHRcdFx0dmFsaWQgPSB0aGlzLnZhbGlkYXRlKCkuZm9ybSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlcnJvckxpc3QgPSBbXTtcblx0XHRcdHZhbGlkID0gdHJ1ZTtcblx0XHRcdHZhbGlkYXRvciA9ICQoIHRoaXNbIDAgXS5mb3JtICkudmFsaWRhdGUoKTtcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhbGlkID0gdmFsaWRhdG9yLmVsZW1lbnQoIHRoaXMgKSAmJiB2YWxpZDtcblx0XHRcdFx0aWYgKCAhdmFsaWQgKSB7XG5cdFx0XHRcdFx0ZXJyb3JMaXN0ID0gZXJyb3JMaXN0LmNvbmNhdCggdmFsaWRhdG9yLmVycm9yTGlzdCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0XHR2YWxpZGF0b3IuZXJyb3JMaXN0ID0gZXJyb3JMaXN0O1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsaWQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9ydWxlcy9cblx0cnVsZXM6IGZ1bmN0aW9uKCBjb21tYW5kLCBhcmd1bWVudCApIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXNbIDAgXSxcblx0XHRcdGlzQ29udGVudEVkaXRhYmxlID0gdHlwZW9mIHRoaXMuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcImZhbHNlXCIsXG5cdFx0XHRzZXR0aW5ncywgc3RhdGljUnVsZXMsIGV4aXN0aW5nUnVsZXMsIGRhdGEsIHBhcmFtLCBmaWx0ZXJlZDtcblxuXHRcdC8vIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHJldHVybiBlbXB0eSBvYmplY3Q7IGNhbid0IGNoYWluIGFueXdheVxuXHRcdGlmICggZWxlbWVudCA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggIWVsZW1lbnQuZm9ybSAmJiBpc0NvbnRlbnRFZGl0YWJsZSApIHtcblx0XHRcdGVsZW1lbnQuZm9ybSA9IHRoaXMuY2xvc2VzdCggXCJmb3JtXCIgKVsgMCBdO1xuXHRcdFx0ZWxlbWVudC5uYW1lID0gdGhpcy5hdHRyKCBcIm5hbWVcIiApO1xuXHRcdH1cblxuXHRcdGlmICggZWxlbWVudC5mb3JtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBjb21tYW5kICkge1xuXHRcdFx0c2V0dGluZ3MgPSAkLmRhdGEoIGVsZW1lbnQuZm9ybSwgXCJ2YWxpZGF0b3JcIiApLnNldHRpbmdzO1xuXHRcdFx0c3RhdGljUnVsZXMgPSBzZXR0aW5ncy5ydWxlcztcblx0XHRcdGV4aXN0aW5nUnVsZXMgPSAkLnZhbGlkYXRvci5zdGF0aWNSdWxlcyggZWxlbWVudCApO1xuXHRcdFx0c3dpdGNoICggY29tbWFuZCApIHtcblx0XHRcdGNhc2UgXCJhZGRcIjpcblx0XHRcdFx0JC5leHRlbmQoIGV4aXN0aW5nUnVsZXMsICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGUoIGFyZ3VtZW50ICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgbWVzc2FnZXMgZnJvbSBydWxlcywgYnV0IGFsbG93IHRoZW0gdG8gYmUgc2V0IHNlcGFyYXRlbHlcblx0XHRcdFx0ZGVsZXRlIGV4aXN0aW5nUnVsZXMubWVzc2FnZXM7XG5cdFx0XHRcdHN0YXRpY1J1bGVzWyBlbGVtZW50Lm5hbWUgXSA9IGV4aXN0aW5nUnVsZXM7XG5cdFx0XHRcdGlmICggYXJndW1lbnQubWVzc2FnZXMgKSB7XG5cdFx0XHRcdFx0c2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdID0gJC5leHRlbmQoIHNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSwgYXJndW1lbnQubWVzc2FnZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJyZW1vdmVcIjpcblx0XHRcdFx0aWYgKCAhYXJndW1lbnQgKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHN0YXRpY1J1bGVzWyBlbGVtZW50Lm5hbWUgXTtcblx0XHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdSdWxlcztcblx0XHRcdFx0fVxuXHRcdFx0XHRmaWx0ZXJlZCA9IHt9O1xuXHRcdFx0XHQkLmVhY2goIGFyZ3VtZW50LnNwbGl0KCAvXFxzLyApLCBmdW5jdGlvbiggaW5kZXgsIG1ldGhvZCApIHtcblx0XHRcdFx0XHRmaWx0ZXJlZFsgbWV0aG9kIF0gPSBleGlzdGluZ1J1bGVzWyBtZXRob2QgXTtcblx0XHRcdFx0XHRkZWxldGUgZXhpc3RpbmdSdWxlc1sgbWV0aG9kIF07XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGRhdGEgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlcyhcblx0XHQkLmV4dGVuZChcblx0XHRcdHt9LFxuXHRcdFx0JC52YWxpZGF0b3IuY2xhc3NSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3IuYXR0cmlidXRlUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLmRhdGFSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3Iuc3RhdGljUnVsZXMoIGVsZW1lbnQgKVxuXHRcdCksIGVsZW1lbnQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSByZXF1aXJlZCBpcyBhdCBmcm9udFxuXHRcdGlmICggZGF0YS5yZXF1aXJlZCApIHtcblx0XHRcdHBhcmFtID0gZGF0YS5yZXF1aXJlZDtcblx0XHRcdGRlbGV0ZSBkYXRhLnJlcXVpcmVkO1xuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKCB7IHJlcXVpcmVkOiBwYXJhbSB9LCBkYXRhICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHJlbW90ZSBpcyBhdCBiYWNrXG5cdFx0aWYgKCBkYXRhLnJlbW90ZSApIHtcblx0XHRcdHBhcmFtID0gZGF0YS5yZW1vdGU7XG5cdFx0XHRkZWxldGUgZGF0YS5yZW1vdGU7XG5cdFx0XHRkYXRhID0gJC5leHRlbmQoIGRhdGEsIHsgcmVtb3RlOiBwYXJhbSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cbn0gKTtcblxuLy8gQ3VzdG9tIHNlbGVjdG9yc1xuJC5leHRlbmQoICQuZXhwci5wc2V1ZG9zIHx8ICQuZXhwclsgXCI6XCIgXSwge1x0XHQvLyAnfHwgJC5leHByWyBcIjpcIiBdJyBoZXJlIGVuYWJsZXMgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgdG8galF1ZXJ5IDEuNy4gQ2FuIGJlIHJlbW92ZWQgd2hlbiBkcm9wcGluZyBqUSAxLjcueCBzdXBwb3J0XG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9ibGFuay1zZWxlY3Rvci9cblx0Ymxhbms6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHJldHVybiAhJC50cmltKCBcIlwiICsgJCggYSApLnZhbCgpICk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9maWxsZWQtc2VsZWN0b3IvXG5cdGZpbGxlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0dmFyIHZhbCA9ICQoIGEgKS52YWwoKTtcblx0XHRyZXR1cm4gdmFsICE9PSBudWxsICYmICEhJC50cmltKCBcIlwiICsgdmFsICk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy91bmNoZWNrZWQtc2VsZWN0b3IvXG5cdHVuY2hlY2tlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEkKCBhICkucHJvcCggXCJjaGVja2VkXCIgKTtcblx0fVxufSApO1xuXG4vLyBDb25zdHJ1Y3RvciBmb3IgdmFsaWRhdG9yXG4kLnZhbGlkYXRvciA9IGZ1bmN0aW9uKCBvcHRpb25zLCBmb3JtICkge1xuXHR0aGlzLnNldHRpbmdzID0gJC5leHRlbmQoIHRydWUsIHt9LCAkLnZhbGlkYXRvci5kZWZhdWx0cywgb3B0aW9ucyApO1xuXHR0aGlzLmN1cnJlbnRGb3JtID0gZm9ybTtcblx0dGhpcy5pbml0KCk7XG59O1xuXG4vLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuZm9ybWF0L1xuJC52YWxpZGF0b3IuZm9ybWF0ID0gZnVuY3Rpb24oIHNvdXJjZSwgcGFyYW1zICkge1xuXHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGFyZ3MgPSAkLm1ha2VBcnJheSggYXJndW1lbnRzICk7XG5cdFx0XHRhcmdzLnVuc2hpZnQoIHNvdXJjZSApO1xuXHRcdFx0cmV0dXJuICQudmFsaWRhdG9yLmZvcm1hdC5hcHBseSggdGhpcywgYXJncyApO1xuXHRcdH07XG5cdH1cblx0aWYgKCBwYXJhbXMgPT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXR1cm4gc291cmNlO1xuXHR9XG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgcGFyYW1zLmNvbnN0cnVjdG9yICE9PSBBcnJheSAgKSB7XG5cdFx0cGFyYW1zID0gJC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApLnNsaWNlKCAxICk7XG5cdH1cblx0aWYgKCBwYXJhbXMuY29uc3RydWN0b3IgIT09IEFycmF5ICkge1xuXHRcdHBhcmFtcyA9IFsgcGFyYW1zIF07XG5cdH1cblx0JC5lYWNoKCBwYXJhbXMsIGZ1bmN0aW9uKCBpLCBuICkge1xuXHRcdHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKCBuZXcgUmVnRXhwKCBcIlxcXFx7XCIgKyBpICsgXCJcXFxcfVwiLCBcImdcIiApLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBuO1xuXHRcdH0gKTtcblx0fSApO1xuXHRyZXR1cm4gc291cmNlO1xufTtcblxuJC5leHRlbmQoICQudmFsaWRhdG9yLCB7XG5cblx0ZGVmYXVsdHM6IHtcblx0XHRtZXNzYWdlczoge30sXG5cdFx0Z3JvdXBzOiB7fSxcblx0XHRydWxlczoge30sXG5cdFx0ZXJyb3JDbGFzczogXCJlcnJvclwiLFxuXHRcdHBlbmRpbmdDbGFzczogXCJwZW5kaW5nXCIsXG5cdFx0dmFsaWRDbGFzczogXCJ2YWxpZFwiLFxuXHRcdGVycm9yRWxlbWVudDogXCJsYWJlbFwiLFxuXHRcdGZvY3VzQ2xlYW51cDogZmFsc2UsXG5cdFx0Zm9jdXNJbnZhbGlkOiB0cnVlLFxuXHRcdGVycm9yQ29udGFpbmVyOiAkKCBbXSApLFxuXHRcdGVycm9yTGFiZWxDb250YWluZXI6ICQoIFtdICksXG5cdFx0b25zdWJtaXQ6IHRydWUsXG5cdFx0aWdub3JlOiBcIjpoaWRkZW5cIixcblx0XHRpZ25vcmVUaXRsZTogZmFsc2UsXG5cdFx0b25mb2N1c2luOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMubGFzdEFjdGl2ZSA9IGVsZW1lbnQ7XG5cblx0XHRcdC8vIEhpZGUgZXJyb3IgbGFiZWwgYW5kIHJlbW92ZSBlcnJvciBjbGFzcyBvbiBmb2N1cyBpZiBlbmFibGVkXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZm9jdXNDbGVhbnVwICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlbGVtZW50LCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuaGlkZVRoZXNlKCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbmZvY3Vzb3V0OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdGlmICggIXRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgJiYgKCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgfHwgIXRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9ua2V5dXA6IGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgcmV2YWxpZGF0ZSB0aGUgZmllbGQgd2hlbiBwcmVzc2luZyBvbmUgb2YgdGhlIGZvbGxvd2luZyBrZXlzXG5cdFx0XHQvLyBTaGlmdCAgICAgICA9PiAxNlxuXHRcdFx0Ly8gQ3RybCAgICAgICAgPT4gMTdcblx0XHRcdC8vIEFsdCAgICAgICAgID0+IDE4XG5cdFx0XHQvLyBDYXBzIGxvY2sgICA9PiAyMFxuXHRcdFx0Ly8gRW5kICAgICAgICAgPT4gMzVcblx0XHRcdC8vIEhvbWUgICAgICAgID0+IDM2XG5cdFx0XHQvLyBMZWZ0IGFycm93ICA9PiAzN1xuXHRcdFx0Ly8gVXAgYXJyb3cgICAgPT4gMzhcblx0XHRcdC8vIFJpZ2h0IGFycm93ID0+IDM5XG5cdFx0XHQvLyBEb3duIGFycm93ICA9PiA0MFxuXHRcdFx0Ly8gSW5zZXJ0ICAgICAgPT4gNDVcblx0XHRcdC8vIE51bSBsb2NrICAgID0+IDE0NFxuXHRcdFx0Ly8gQWx0R3Iga2V5ICAgPT4gMjI1XG5cdFx0XHR2YXIgZXhjbHVkZWRLZXlzID0gW1xuXHRcdFx0XHQxNiwgMTcsIDE4LCAyMCwgMzUsIDM2LCAzNyxcblx0XHRcdFx0MzgsIDM5LCA0MCwgNDUsIDE0NCwgMjI1XG5cdFx0XHRdO1xuXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09PSA5ICYmIHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICkgPT09IFwiXCIgfHwgJC5pbkFycmF5KCBldmVudC5rZXlDb2RlLCBleGNsdWRlZEtleXMgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCB8fCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5pbnZhbGlkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uY2xpY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBDbGljayBvbiBzZWxlY3RzLCByYWRpb2J1dHRvbnMgYW5kIGNoZWNrYm94ZXNcblx0XHRcdGlmICggZWxlbWVudC5uYW1lIGluIHRoaXMuc3VibWl0dGVkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gT3Igb3B0aW9uIGVsZW1lbnRzLCBjaGVjayBwYXJlbnQgc2VsZWN0IGluIHRoYXQgY2FzZVxuXHRcdFx0fSBlbHNlIGlmICggZWxlbWVudC5wYXJlbnROb2RlLm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudC5wYXJlbnROb2RlICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoaWdobGlnaHQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzICkge1xuXHRcdFx0aWYgKCBlbGVtZW50LnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5hZGRDbGFzcyggZXJyb3JDbGFzcyApLnJlbW92ZUNsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYWRkQ2xhc3MoIGVycm9yQ2xhc3MgKS5yZW1vdmVDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dW5oaWdobGlnaHQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzICkge1xuXHRcdFx0aWYgKCBlbGVtZW50LnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5yZW1vdmVDbGFzcyggZXJyb3JDbGFzcyApLmFkZENsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIGVycm9yQ2xhc3MgKS5hZGRDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3Iuc2V0RGVmYXVsdHMvXG5cdHNldERlZmF1bHRzOiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0JC5leHRlbmQoICQudmFsaWRhdG9yLmRlZmF1bHRzLCBzZXR0aW5ncyApO1xuXHR9LFxuXG5cdG1lc3NhZ2VzOiB7XG5cdFx0cmVxdWlyZWQ6IFwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZC5cIixcblx0XHRyZW1vdGU6IFwiUGxlYXNlIGZpeCB0aGlzIGZpZWxkLlwiLFxuXHRcdGVtYWlsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCIsXG5cdFx0dXJsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTC5cIixcblx0XHRkYXRlOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGRhdGUuXCIsXG5cdFx0ZGF0ZUlTTzogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlIChJU08pLlwiLFxuXHRcdG51bWJlcjogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBudW1iZXIuXCIsXG5cdFx0ZGlnaXRzOiBcIlBsZWFzZSBlbnRlciBvbmx5IGRpZ2l0cy5cIixcblx0XHRlcXVhbFRvOiBcIlBsZWFzZSBlbnRlciB0aGUgc2FtZSB2YWx1ZSBhZ2Fpbi5cIixcblx0XHRtYXhsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgbm8gbW9yZSB0aGFuIHswfSBjaGFyYWN0ZXJzLlwiICksXG5cdFx0bWlubGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGF0IGxlYXN0IHswfSBjaGFyYWN0ZXJzLlwiICksXG5cdFx0cmFuZ2VsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBiZXR3ZWVuIHswfSBhbmQgezF9IGNoYXJhY3RlcnMgbG9uZy5cIiApLFxuXHRcdHJhbmdlOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgYmV0d2VlbiB7MH0gYW5kIHsxfS5cIiApLFxuXHRcdG1heDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB7MH0uXCIgKSxcblx0XHRtaW46ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gezB9LlwiICksXG5cdFx0c3RlcDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIG11bHRpcGxlIG9mIHswfS5cIiApXG5cdH0sXG5cblx0YXV0b0NyZWF0ZVJhbmdlczogZmFsc2UsXG5cblx0cHJvdG90eXBlOiB7XG5cblx0XHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubGFiZWxDb250YWluZXIgPSAkKCB0aGlzLnNldHRpbmdzLmVycm9yTGFiZWxDb250YWluZXIgKTtcblx0XHRcdHRoaXMuZXJyb3JDb250ZXh0ID0gdGhpcy5sYWJlbENvbnRhaW5lci5sZW5ndGggJiYgdGhpcy5sYWJlbENvbnRhaW5lciB8fCAkKCB0aGlzLmN1cnJlbnRGb3JtICk7XG5cdFx0XHR0aGlzLmNvbnRhaW5lcnMgPSAkKCB0aGlzLnNldHRpbmdzLmVycm9yQ29udGFpbmVyICkuYWRkKCB0aGlzLnNldHRpbmdzLmVycm9yTGFiZWxDb250YWluZXIgKTtcblx0XHRcdHRoaXMuc3VibWl0dGVkID0ge307XG5cdFx0XHR0aGlzLnZhbHVlQ2FjaGUgPSB7fTtcblx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0dGhpcy5wZW5kaW5nID0ge307XG5cdFx0XHR0aGlzLmludmFsaWQgPSB7fTtcblx0XHRcdHRoaXMucmVzZXQoKTtcblxuXHRcdFx0dmFyIGN1cnJlbnRGb3JtID0gdGhpcy5jdXJyZW50Rm9ybSxcblx0XHRcdFx0Z3JvdXBzID0gKCB0aGlzLmdyb3VwcyA9IHt9ICksXG5cdFx0XHRcdHJ1bGVzO1xuXHRcdFx0JC5lYWNoKCB0aGlzLnNldHRpbmdzLmdyb3VwcywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuc3BsaXQoIC9cXHMvICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JC5lYWNoKCB2YWx1ZSwgZnVuY3Rpb24oIGluZGV4LCBuYW1lICkge1xuXHRcdFx0XHRcdGdyb3Vwc1sgbmFtZSBdID0ga2V5O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFx0XHRydWxlcyA9IHRoaXMuc2V0dGluZ3MucnVsZXM7XG5cdFx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0cnVsZXNbIGtleSBdID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggdmFsdWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0ZnVuY3Rpb24gZGVsZWdhdGUoIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgaXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgJCggdGhpcyApLmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAkKCB0aGlzICkuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcImZhbHNlXCI7XG5cblx0XHRcdFx0Ly8gU2V0IGZvcm0gZXhwYW5kbyBvbiBjb250ZW50ZWRpdGFibGVcblx0XHRcdFx0aWYgKCAhdGhpcy5mb3JtICYmIGlzQ29udGVudEVkaXRhYmxlICkge1xuXHRcdFx0XHRcdHRoaXMuZm9ybSA9ICQoIHRoaXMgKS5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRcdFx0dGhpcy5uYW1lID0gJCggdGhpcyApLmF0dHIoIFwibmFtZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZ25vcmUgdGhlIGVsZW1lbnQgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIGZvcm0uIFRoaXMgd2lsbCBoYXBwZW4gbWFpbmx5XG5cdFx0XHRcdC8vIHdoZW4gc2V0dGluZyB0aGUgYGZvcm1gIGF0dHJpYnV0ZSBvZiBhbiBpbnB1dCB0byB0aGUgaWQgb2YgYW5vdGhlciBmb3JtLlxuXHRcdFx0XHRpZiAoIGN1cnJlbnRGb3JtICE9PSB0aGlzLmZvcm0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHZhbGlkYXRvciA9ICQuZGF0YSggdGhpcy5mb3JtLCBcInZhbGlkYXRvclwiICksXG5cdFx0XHRcdFx0ZXZlbnRUeXBlID0gXCJvblwiICsgZXZlbnQudHlwZS5yZXBsYWNlKCAvXnZhbGlkYXRlLywgXCJcIiApLFxuXHRcdFx0XHRcdHNldHRpbmdzID0gdmFsaWRhdG9yLnNldHRpbmdzO1xuXHRcdFx0XHRpZiAoIHNldHRpbmdzWyBldmVudFR5cGUgXSAmJiAhJCggdGhpcyApLmlzKCBzZXR0aW5ncy5pZ25vcmUgKSApIHtcblx0XHRcdFx0XHRzZXR0aW5nc1sgZXZlbnRUeXBlIF0uY2FsbCggdmFsaWRhdG9yLCB0aGlzLCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0XHQub24oIFwiZm9jdXNpbi52YWxpZGF0ZSBmb2N1c291dC52YWxpZGF0ZSBrZXl1cC52YWxpZGF0ZVwiLFxuXHRcdFx0XHRcdFwiOnRleHQsIFt0eXBlPSdwYXNzd29yZCddLCBbdHlwZT0nZmlsZSddLCBzZWxlY3QsIHRleHRhcmVhLCBbdHlwZT0nbnVtYmVyJ10sIFt0eXBlPSdzZWFyY2gnXSwgXCIgK1xuXHRcdFx0XHRcdFwiW3R5cGU9J3RlbCddLCBbdHlwZT0ndXJsJ10sIFt0eXBlPSdlbWFpbCddLCBbdHlwZT0nZGF0ZXRpbWUnXSwgW3R5cGU9J2RhdGUnXSwgW3R5cGU9J21vbnRoJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSd3ZWVrJ10sIFt0eXBlPSd0aW1lJ10sIFt0eXBlPSdkYXRldGltZS1sb2NhbCddLCBbdHlwZT0ncmFuZ2UnXSwgW3R5cGU9J2NvbG9yJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSdyYWRpbyddLCBbdHlwZT0nY2hlY2tib3gnXSwgW2NvbnRlbnRlZGl0YWJsZV0sIFt0eXBlPSdidXR0b24nXVwiLCBkZWxlZ2F0ZSApXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lLCBvbGRJRVxuXHRcdFx0XHQvLyBcInNlbGVjdFwiIGlzIHByb3ZpZGVkIGFzIGV2ZW50LnRhcmdldCB3aGVuIGNsaWNraW5nIGEgb3B0aW9uXG5cdFx0XHRcdC5vbiggXCJjbGljay52YWxpZGF0ZVwiLCBcInNlbGVjdCwgb3B0aW9uLCBbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J11cIiwgZGVsZWdhdGUgKTtcblxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmludmFsaWRIYW5kbGVyICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkub24oIFwiaW52YWxpZC1mb3JtLnZhbGlkYXRlXCIsIHRoaXMuc2V0dGluZ3MuaW52YWxpZEhhbmRsZXIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IuZm9ybS9cblx0XHRmb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuY2hlY2tGb3JtKCk7XG5cdFx0XHQkLmV4dGVuZCggdGhpcy5zdWJtaXR0ZWQsIHRoaXMuZXJyb3JNYXAgKTtcblx0XHRcdHRoaXMuaW52YWxpZCA9ICQuZXh0ZW5kKCB7fSwgdGhpcy5lcnJvck1hcCApO1xuXHRcdFx0aWYgKCAhdGhpcy52YWxpZCgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkudHJpZ2dlckhhbmRsZXIoIFwiaW52YWxpZC1mb3JtXCIsIFsgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNob3dFcnJvcnMoKTtcblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdGNoZWNrRm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnByZXBhcmVGb3JtKCk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGVsZW1lbnRzID0gKCB0aGlzLmN1cnJlbnRFbGVtZW50cyA9IHRoaXMuZWxlbWVudHMoKSApOyBlbGVtZW50c1sgaSBdOyBpKysgKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2soIGVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLmVsZW1lbnQvXG5cdFx0ZWxlbWVudDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgY2xlYW5FbGVtZW50ID0gdGhpcy5jbGVhbiggZWxlbWVudCApLFxuXHRcdFx0XHRjaGVja0VsZW1lbnQgPSB0aGlzLnZhbGlkYXRpb25UYXJnZXRGb3IoIGNsZWFuRWxlbWVudCApLFxuXHRcdFx0XHR2ID0gdGhpcyxcblx0XHRcdFx0cmVzdWx0ID0gdHJ1ZSxcblx0XHRcdFx0cnMsIGdyb3VwO1xuXG5cdFx0XHRpZiAoIGNoZWNrRWxlbWVudCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5pbnZhbGlkWyBjbGVhbkVsZW1lbnQubmFtZSBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5wcmVwYXJlRWxlbWVudCggY2hlY2tFbGVtZW50ICk7XG5cdFx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggY2hlY2tFbGVtZW50ICk7XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBlbGVtZW50IGlzIGdyb3VwZWQsIHRoZW4gdmFsaWRhdGUgYWxsIGdyb3VwIGVsZW1lbnRzIGFscmVhZHlcblx0XHRcdFx0Ly8gY29udGFpbmluZyBhIHZhbHVlXG5cdFx0XHRcdGdyb3VwID0gdGhpcy5ncm91cHNbIGNoZWNrRWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdGlmICggZ3JvdXAgKSB7XG5cdFx0XHRcdFx0JC5lYWNoKCB0aGlzLmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdGlmICggdGVzdGdyb3VwID09PSBncm91cCAmJiBuYW1lICE9PSBjaGVja0VsZW1lbnQubmFtZSApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYW5FbGVtZW50ID0gdi52YWxpZGF0aW9uVGFyZ2V0Rm9yKCB2LmNsZWFuKCB2LmZpbmRCeU5hbWUoIG5hbWUgKSApICk7XG5cdFx0XHRcdFx0XHRcdGlmICggY2xlYW5FbGVtZW50ICYmIGNsZWFuRWxlbWVudC5uYW1lIGluIHYuaW52YWxpZCApIHtcblx0XHRcdFx0XHRcdFx0XHR2LmN1cnJlbnRFbGVtZW50cy5wdXNoKCBjbGVhbkVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQgPSB2LmNoZWNrKCBjbGVhbkVsZW1lbnQgKSAmJiByZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRycyA9IHRoaXMuY2hlY2soIGNoZWNrRWxlbWVudCApICE9PSBmYWxzZTtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0ICYmIHJzO1xuXHRcdFx0XHRpZiAoIHJzICkge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICF0aGlzLm51bWJlck9mSW52YWxpZHMoKSApIHtcblxuXHRcdFx0XHRcdC8vIEhpZGUgZXJyb3IgY29udGFpbmVycyBvbiBsYXN0IGVycm9yXG5cdFx0XHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2hvd0Vycm9ycygpO1xuXG5cdFx0XHRcdC8vIEFkZCBhcmlhLWludmFsaWQgc3RhdHVzIGZvciBzY3JlZW4gcmVhZGVyc1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWludmFsaWRcIiwgIXJzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnNob3dFcnJvcnMvXG5cdFx0c2hvd0Vycm9yczogZnVuY3Rpb24oIGVycm9ycyApIHtcblx0XHRcdGlmICggZXJyb3JzICkge1xuXHRcdFx0XHR2YXIgdmFsaWRhdG9yID0gdGhpcztcblxuXHRcdFx0XHQvLyBBZGQgaXRlbXMgdG8gZXJyb3IgbGlzdCBhbmQgbWFwXG5cdFx0XHRcdCQuZXh0ZW5kKCB0aGlzLmVycm9yTWFwLCBlcnJvcnMgKTtcblx0XHRcdFx0dGhpcy5lcnJvckxpc3QgPSAkLm1hcCggdGhpcy5lcnJvck1hcCwgZnVuY3Rpb24oIG1lc3NhZ2UsIG5hbWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2UsXG5cdFx0XHRcdFx0XHRlbGVtZW50OiB2YWxpZGF0b3IuZmluZEJ5TmFtZSggbmFtZSApWyAwIF1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGl0ZW1zIGZyb20gc3VjY2VzcyBsaXN0XG5cdFx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSAkLmdyZXAoIHRoaXMuc3VjY2Vzc0xpc3QsIGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0XHRcdHJldHVybiAhKCBlbGVtZW50Lm5hbWUgaW4gZXJyb3JzICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5zaG93RXJyb3JzICkge1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzLnNob3dFcnJvcnMuY2FsbCggdGhpcywgdGhpcy5lcnJvck1hcCwgdGhpcy5lcnJvckxpc3QgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGVmYXVsdFNob3dFcnJvcnMoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IucmVzZXRGb3JtL1xuXHRcdHJlc2V0Rm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICQuZm4ucmVzZXRGb3JtICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkucmVzZXRGb3JtKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmludmFsaWQgPSB7fTtcblx0XHRcdHRoaXMuc3VibWl0dGVkID0ge307XG5cdFx0XHR0aGlzLnByZXBhcmVGb3JtKCk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHMoKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJwcmV2aW91c1ZhbHVlXCIgKVxuXHRcdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWludmFsaWRcIiApO1xuXG5cdFx0XHR0aGlzLnJlc2V0RWxlbWVudHMoIGVsZW1lbnRzICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0RWxlbWVudHM6IGZ1bmN0aW9uKCBlbGVtZW50cyApIHtcblx0XHRcdHZhciBpO1xuXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBlbGVtZW50c1sgaSBdOyBpKysgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlbGVtZW50c1sgaSBdLFxuXHRcdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCBcIlwiICk7XG5cdFx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50c1sgaSBdLm5hbWUgKS5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRzXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG51bWJlck9mSW52YWxpZHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMub2JqZWN0TGVuZ3RoKCB0aGlzLmludmFsaWQgKTtcblx0XHR9LFxuXG5cdFx0b2JqZWN0TGVuZ3RoOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0LyoganNoaW50IHVudXNlZDogZmFsc2UgKi9cblx0XHRcdHZhciBjb3VudCA9IDAsXG5cdFx0XHRcdGk7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblxuXHRcdFx0XHQvLyBUaGlzIGNoZWNrIGFsbG93cyBjb3VudGluZyBlbGVtZW50cyB3aXRoIGVtcHR5IGVycm9yXG5cdFx0XHRcdC8vIG1lc3NhZ2UgYXMgaW52YWxpZCBlbGVtZW50c1xuXHRcdFx0XHRpZiAoIG9ialsgaSBdICE9PSB1bmRlZmluZWQgJiYgb2JqWyBpIF0gIT09IG51bGwgJiYgb2JqWyBpIF0gIT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudDtcblx0XHR9LFxuXG5cdFx0aGlkZUVycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhpZGVUaGVzZSggdGhpcy50b0hpZGUgKTtcblx0XHR9LFxuXG5cdFx0aGlkZVRoZXNlOiBmdW5jdGlvbiggZXJyb3JzICkge1xuXHRcdFx0ZXJyb3JzLm5vdCggdGhpcy5jb250YWluZXJzICkudGV4dCggXCJcIiApO1xuXHRcdFx0dGhpcy5hZGRXcmFwcGVyKCBlcnJvcnMgKS5oaWRlKCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLnNpemUoKSA9PT0gMDtcblx0XHR9LFxuXG5cdFx0c2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcnJvckxpc3QubGVuZ3RoO1xuXHRcdH0sXG5cblx0XHRmb2N1c0ludmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmZvY3VzSW52YWxpZCApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQkKCB0aGlzLmZpbmRMYXN0QWN0aXZlKCkgfHwgdGhpcy5lcnJvckxpc3QubGVuZ3RoICYmIHRoaXMuZXJyb3JMaXN0WyAwIF0uZWxlbWVudCB8fCBbXSApXG5cdFx0XHRcdFx0LmZpbHRlciggXCI6dmlzaWJsZVwiIClcblx0XHRcdFx0XHQudHJpZ2dlciggXCJmb2N1c1wiIClcblxuXHRcdFx0XHRcdC8vIE1hbnVhbGx5IHRyaWdnZXIgZm9jdXNpbiBldmVudDsgd2l0aG91dCBpdCwgZm9jdXNpbiBoYW5kbGVyIGlzbid0IGNhbGxlZCwgZmluZExhc3RBY3RpdmUgd29uJ3QgaGF2ZSBhbnl0aGluZyB0byBmaW5kXG5cdFx0XHRcdFx0LnRyaWdnZXIoIFwiZm9jdXNpblwiICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gSWdub3JlIElFIHRocm93aW5nIGVycm9ycyB3aGVuIGZvY3VzaW5nIGhpZGRlbiBlbGVtZW50c1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGZpbmRMYXN0QWN0aXZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0QWN0aXZlID0gdGhpcy5sYXN0QWN0aXZlO1xuXHRcdFx0cmV0dXJuIGxhc3RBY3RpdmUgJiYgJC5ncmVwKCB0aGlzLmVycm9yTGlzdCwgZnVuY3Rpb24oIG4gKSB7XG5cdFx0XHRcdHJldHVybiBuLmVsZW1lbnQubmFtZSA9PT0gbGFzdEFjdGl2ZS5uYW1lO1xuXHRcdFx0fSApLmxlbmd0aCA9PT0gMSAmJiBsYXN0QWN0aXZlO1xuXHRcdH0sXG5cblx0XHRlbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdmFsaWRhdG9yID0gdGhpcyxcblx0XHRcdFx0cnVsZXNDYWNoZSA9IHt9O1xuXG5cdFx0XHQvLyBTZWxlY3QgYWxsIHZhbGlkIGlucHV0cyBpbnNpZGUgdGhlIGZvcm0gKG5vIHN1Ym1pdCBvciByZXNldCBidXR0b25zKVxuXHRcdFx0cmV0dXJuICQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0LmZpbmQoIFwiaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIFtjb250ZW50ZWRpdGFibGVdXCIgKVxuXHRcdFx0Lm5vdCggXCI6c3VibWl0LCA6cmVzZXQsIDppbWFnZSwgOmRpc2FibGVkXCIgKVxuXHRcdFx0Lm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVxuXHRcdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gdGhpcy5uYW1lIHx8ICQoIHRoaXMgKS5hdHRyKCBcIm5hbWVcIiApOyAvLyBGb3IgY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdHZhciBpc0NvbnRlbnRFZGl0YWJsZSA9IHR5cGVvZiAkKCB0aGlzICkuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmICQoIHRoaXMgKS5hdHRyKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgIT09IFwiZmFsc2VcIjtcblxuXHRcdFx0XHRpZiAoICFuYW1lICYmIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBcIiVvIGhhcyBubyBuYW1lIGFzc2lnbmVkXCIsIHRoaXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBmb3JtIGV4cGFuZG8gb24gY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggaXNDb250ZW50RWRpdGFibGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb3JtID0gJCggdGhpcyApLmNsb3Nlc3QoIFwiZm9ybVwiIClbIDAgXTtcblx0XHRcdFx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWdub3JlIGVsZW1lbnRzIHRoYXQgYmVsb25nIHRvIG90aGVyL25lc3RlZCBmb3Jtc1xuXHRcdFx0XHRpZiAoIHRoaXMuZm9ybSAhPT0gdmFsaWRhdG9yLmN1cnJlbnRGb3JtICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNlbGVjdCBvbmx5IHRoZSBmaXJzdCBlbGVtZW50IGZvciBlYWNoIG5hbWUsIGFuZCBvbmx5IHRob3NlIHdpdGggcnVsZXMgc3BlY2lmaWVkXG5cdFx0XHRcdGlmICggbmFtZSBpbiBydWxlc0NhY2hlIHx8ICF2YWxpZGF0b3Iub2JqZWN0TGVuZ3RoKCAkKCB0aGlzICkucnVsZXMoKSApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJ1bGVzQ2FjaGVbIG5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRjbGVhbjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuICQoIHNlbGVjdG9yIClbIDAgXTtcblx0XHR9LFxuXG5cdFx0ZXJyb3JzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlcnJvckNsYXNzID0gdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLnNwbGl0KCBcIiBcIiApLmpvaW4oIFwiLlwiICk7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIi5cIiArIGVycm9yQ2xhc3MsIHRoaXMuZXJyb3JDb250ZXh0ICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0SW50ZXJuYWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSBbXTtcblx0XHRcdHRoaXMuZXJyb3JMaXN0ID0gW107XG5cdFx0XHR0aGlzLmVycm9yTWFwID0ge307XG5cdFx0XHR0aGlzLnRvU2hvdyA9ICQoIFtdICk7XG5cdFx0XHR0aGlzLnRvSGlkZSA9ICQoIFtdICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXRJbnRlcm5hbHMoKTtcblx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggW10gKTtcblx0XHR9LFxuXG5cdFx0cHJlcGFyZUZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLmVycm9ycygpLmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0fSxcblxuXHRcdHByZXBhcmVFbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudFZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciAkZWxlbWVudCA9ICQoIGVsZW1lbnQgKSxcblx0XHRcdFx0dHlwZSA9IGVsZW1lbnQudHlwZSxcblx0XHRcdFx0aXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgJGVsZW1lbnQuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmICRlbGVtZW50LmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJmYWxzZVwiLFxuXHRcdFx0XHR2YWwsIGlkeDtcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInJhZGlvXCIgfHwgdHlwZSA9PT0gXCJjaGVja2JveFwiICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLnZhbCgpO1xuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZWxlbWVudC52YWxpZGl0eSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQudmFsaWRpdHkuYmFkSW5wdXQgPyBcIk5hTlwiIDogJGVsZW1lbnQudmFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNDb250ZW50RWRpdGFibGUgKSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnRleHQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZmlsZVwiICkge1xuXG5cdFx0XHRcdC8vIE1vZGVybiBicm93c2VyIChjaHJvbWUgJiBzYWZhcmkpXG5cdFx0XHRcdGlmICggdmFsLnN1YnN0ciggMCwgMTIgKSA9PT0gXCJDOlxcXFxmYWtlcGF0aFxcXFxcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggMTIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExlZ2FjeSBicm93c2Vyc1xuXHRcdFx0XHQvLyBVbml4LWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIi9cIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXaW5kb3dzLWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIlxcXFxcIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBKdXN0IHRoZSBmaWxlIG5hbWVcblx0XHRcdFx0cmV0dXJuIHZhbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gdmFsLnJlcGxhY2UoIC9cXHIvZywgXCJcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9LFxuXG5cdFx0Y2hlY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMudmFsaWRhdGlvblRhcmdldEZvciggdGhpcy5jbGVhbiggZWxlbWVudCApICk7XG5cblx0XHRcdHZhciBydWxlcyA9ICQoIGVsZW1lbnQgKS5ydWxlcygpLFxuXHRcdFx0XHRydWxlc0NvdW50ID0gJC5tYXAoIHJ1bGVzLCBmdW5jdGlvbiggbiwgaSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fSApLmxlbmd0aCxcblx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gZmFsc2UsXG5cdFx0XHRcdHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICksXG5cdFx0XHRcdHJlc3VsdCwgbWV0aG9kLCBydWxlLCBub3JtYWxpemVyO1xuXG5cdFx0XHQvLyBQcmlvcml0aXplIHRoZSBsb2NhbCBub3JtYWxpemVyIGRlZmluZWQgZm9yIHRoaXMgZWxlbWVudCBvdmVyIHRoZSBnbG9iYWwgb25lXG5cdFx0XHQvLyBpZiB0aGUgZm9ybWVyIGV4aXN0cywgb3RoZXJ3aXNlIHVzZXIgdGhlIGdsb2JhbCBvbmUgaW4gY2FzZSBpdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR5cGVvZiBydWxlcy5ub3JtYWxpemVyID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZXIgPSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fSBlbHNlIGlmIChcdHR5cGVvZiB0aGlzLnNldHRpbmdzLm5vcm1hbGl6ZXIgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0bm9ybWFsaXplciA9IHRoaXMuc2V0dGluZ3Mubm9ybWFsaXplcjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgbm9ybWFsaXplciBpcyBkZWZpbmVkLCB0aGVuIGNhbGwgaXQgdG8gcmV0cmVpdmUgdGhlIGNoYW5nZWQgdmFsdWUgaW5zdGVhZFxuXHRcdFx0Ly8gb2YgdXNpbmcgdGhlIHJlYWwgb25lLlxuXHRcdFx0Ly8gTm90ZSB0aGF0IGB0aGlzYCBpbiB0aGUgbm9ybWFsaXplciBpcyBgZWxlbWVudGAuXG5cdFx0XHRpZiAoIG5vcm1hbGl6ZXIgKSB7XG5cdFx0XHRcdHZhbCA9IG5vcm1hbGl6ZXIuY2FsbCggZWxlbWVudCwgdmFsICk7XG5cblx0XHRcdFx0Ly8gRGVsZXRlIHRoZSBub3JtYWxpemVyIGZyb20gcnVsZXMgdG8gYXZvaWQgdHJlYXRpbmcgaXQgYXMgYSBwcmUtZGVmaW5lZCBtZXRob2QuXG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBtZXRob2QgaW4gcnVsZXMgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiBydWxlc1sgbWV0aG9kIF0gfTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXN1bHQgPSAkLnZhbGlkYXRvci5tZXRob2RzWyBtZXRob2QgXS5jYWxsKCB0aGlzLCB2YWwsIGVsZW1lbnQsIHJ1bGUucGFyYW1ldGVycyApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBtZXRob2QgaW5kaWNhdGVzIHRoYXQgdGhlIGZpZWxkIGlzIG9wdGlvbmFsIGFuZCB0aGVyZWZvcmUgdmFsaWQsXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgbWFyayBpdCBhcyB2YWxpZCB3aGVuIHRoZXJlIGFyZSBubyBvdGhlciBydWxlc1xuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIiAmJiBydWxlc0NvdW50ID09PSAxICkge1xuXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZXBlbmRlbmN5TWlzbWF0Y2ggPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcInBlbmRpbmdcIiApIHtcblx0XHRcdFx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhcmVzdWx0ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb3JtYXRBbmRBZGQoIGVsZW1lbnQsIHJ1bGUgKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCBcIkV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCIsIGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBlIGluc3RhbmNlb2YgVHlwZUVycm9yICkge1xuXHRcdFx0XHRcdFx0ZS5tZXNzYWdlICs9IFwiLiAgRXhjZXB0aW9uIG9jY3VycmVkIHdoZW4gY2hlY2tpbmcgZWxlbWVudCBcIiArIGVsZW1lbnQuaWQgKyBcIiwgY2hlY2sgdGhlICdcIiArIHJ1bGUubWV0aG9kICsgXCInIG1ldGhvZC5cIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGRlcGVuZGVuY3lNaXNtYXRjaCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLm9iamVjdExlbmd0aCggcnVsZXMgKSApIHtcblx0XHRcdFx0dGhpcy5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Ly8gc3BlY2lmaWVkIGluIHRoZSBlbGVtZW50J3MgSFRNTDUgZGF0YSBhdHRyaWJ1dGVcblx0XHQvLyByZXR1cm4gdGhlIGdlbmVyaWMgbWVzc2FnZSBpZiBwcmVzZW50IGFuZCBubyBtZXRob2Qgc3BlY2lmaWMgbWVzc2FnZSBpcyBwcmVzZW50XG5cdFx0Y3VzdG9tRGF0YU1lc3NhZ2U6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKyBtZXRob2QuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdG1ldGhvZC5zdWJzdHJpbmcoIDEgKS50b0xvd2VyQ2FzZSgpICkgfHwgJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBhbmQgdmFsaWRhdGlvbiBtZXRob2Rcblx0XHRjdXN0b21NZXNzYWdlOiBmdW5jdGlvbiggbmFtZSwgbWV0aG9kICkge1xuXHRcdFx0dmFyIG0gPSB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBuYW1lIF07XG5cdFx0XHRyZXR1cm4gbSAmJiAoIG0uY29uc3RydWN0b3IgPT09IFN0cmluZyA/IG0gOiBtWyBtZXRob2QgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBSZXR1cm4gdGhlIGZpcnN0IGRlZmluZWQgYXJndW1lbnQsIGFsbG93aW5nIGVtcHR5IHN0cmluZ3Ncblx0XHRmaW5kRGVmaW5lZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYXJndW1lbnRzWyBpIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gYXJndW1lbnRzWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblxuXHRcdC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyICdydWxlJyB1c2VkIHRvIGJlIGEgc3RyaW5nLCBhbmQgZXh0ZW5kZWQgdG8gYW4gb2JqZWN0IGxpdGVyYWxcblx0XHQvLyBvZiB0aGUgZm9sbG93aW5nIGZvcm06XG5cdFx0Ly8gcnVsZSA9IHtcblx0XHQvLyAgICAgbWV0aG9kOiBcIm1ldGhvZCBuYW1lXCIsXG5cdFx0Ly8gICAgIHBhcmFtZXRlcnM6IFwidGhlIGdpdmVuIG1ldGhvZCBwYXJhbWV0ZXJzXCJcblx0XHQvLyB9XG5cdFx0Ly9cblx0XHQvLyBUaGUgb2xkIGJlaGF2aW9yIHN0aWxsIHN1cHBvcnRlZCwga2VwdCB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGhcblx0XHQvLyBvbGQgY29kZSwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHRcdGRlZmF1bHRNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgcnVsZSApIHtcblx0XHRcdGlmICggdHlwZW9mIHJ1bGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogcnVsZSB9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZmluZERlZmluZWQoXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21NZXNzYWdlKCBlbGVtZW50Lm5hbWUsIHJ1bGUubWV0aG9kICksXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21EYXRhTWVzc2FnZSggZWxlbWVudCwgcnVsZS5tZXRob2QgKSxcblxuXHRcdFx0XHRcdC8vICd0aXRsZScgaXMgbmV2ZXIgdW5kZWZpbmVkLCBzbyBoYW5kbGUgZW1wdHkgc3RyaW5nIGFzIHVuZGVmaW5lZFxuXHRcdFx0XHRcdCF0aGlzLnNldHRpbmdzLmlnbm9yZVRpdGxlICYmIGVsZW1lbnQudGl0bGUgfHwgdW5kZWZpbmVkLFxuXHRcdFx0XHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBydWxlLm1ldGhvZCBdLFxuXHRcdFx0XHRcdFwiPHN0cm9uZz5XYXJuaW5nOiBObyBtZXNzYWdlIGRlZmluZWQgZm9yIFwiICsgZWxlbWVudC5uYW1lICsgXCI8L3N0cm9uZz5cIlxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0aGVyZWdleCA9IC9cXCQ/XFx7KFxcZCspXFx9L2c7XG5cdFx0XHRpZiAoIHR5cGVvZiBtZXNzYWdlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBtZXNzYWdlLmNhbGwoIHRoaXMsIHJ1bGUucGFyYW1ldGVycywgZWxlbWVudCApO1xuXHRcdFx0fSBlbHNlIGlmICggdGhlcmVnZXgudGVzdCggbWVzc2FnZSApICkge1xuXHRcdFx0XHRtZXNzYWdlID0gJC52YWxpZGF0b3IuZm9ybWF0KCBtZXNzYWdlLnJlcGxhY2UoIHRoZXJlZ2V4LCBcInskMX1cIiApLCBydWxlLnBhcmFtZXRlcnMgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGZvcm1hdEFuZEFkZDogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUgKTtcblxuXHRcdFx0dGhpcy5lcnJvckxpc3QucHVzaCgge1xuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0XHRtZXRob2Q6IHJ1bGUubWV0aG9kXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZXJyb3JNYXBbIGVsZW1lbnQubmFtZSBdID0gbWVzc2FnZTtcblx0XHRcdHRoaXMuc3VibWl0dGVkWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGFkZFdyYXBwZXI6IGZ1bmN0aW9uKCB0b1RvZ2dsZSApIHtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkge1xuXHRcdFx0XHR0b1RvZ2dsZSA9IHRvVG9nZ2xlLmFkZCggdG9Ub2dnbGUucGFyZW50KCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRvVG9nZ2xlO1xuXHRcdH0sXG5cblx0XHRkZWZhdWx0U2hvd0Vycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSwgZWxlbWVudHMsIGVycm9yO1xuXHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuZXJyb3JMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0ZXJyb3IgPSB0aGlzLmVycm9yTGlzdFsgaSBdO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVycm9yLmVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5zaG93TGFiZWwoIGVycm9yLmVsZW1lbnQsIGVycm9yLm1lc3NhZ2UgKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5lcnJvckxpc3QubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLnRvU2hvdyA9IHRoaXMudG9TaG93LmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuc3VjY2Vzc0xpc3RbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgZWxlbWVudHMgPSB0aGlzLnZhbGlkRWxlbWVudHMoKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5ub3QoIHRoaXMudG9TaG93ICk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHRoaXMuYWRkV3JhcHBlciggdGhpcy50b1Nob3cgKS5zaG93KCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY3VycmVudEVsZW1lbnRzLm5vdCggdGhpcy5pbnZhbGlkRWxlbWVudHMoKSApO1xuXHRcdH0sXG5cblx0XHRpbnZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuZXJyb3JMaXN0ICkubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0c2hvd0xhYmVsOiBmdW5jdGlvbiggZWxlbWVudCwgbWVzc2FnZSApIHtcblx0XHRcdHZhciBwbGFjZSwgZ3JvdXAsIGVycm9ySUQsIHYsXG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSxcblx0XHRcdFx0ZWxlbWVudElEID0gdGhpcy5pZE9yTmFtZSggZWxlbWVudCApLFxuXHRcdFx0XHRkZXNjcmliZWRCeSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApO1xuXG5cdFx0XHRpZiAoIGVycm9yLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyBSZWZyZXNoIGVycm9yL3N1Y2Nlc3MgY2xhc3Ncblx0XHRcdFx0ZXJyb3IucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApLmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKTtcblxuXHRcdFx0XHQvLyBSZXBsYWNlIG1lc3NhZ2Ugb24gZXhpc3RpbmcgbGFiZWxcblx0XHRcdFx0ZXJyb3IuaHRtbCggbWVzc2FnZSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0XHRlcnJvciA9ICQoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIj5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiaWRcIiwgZWxlbWVudElEICsgXCItZXJyb3JcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5odG1sKCBtZXNzYWdlIHx8IFwiXCIgKTtcblxuXHRcdFx0XHQvLyBNYWludGFpbiByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgdG8gYmUgcGxhY2VkIGludG8gdGhlIERPTVxuXHRcdFx0XHRwbGFjZSA9IGVycm9yO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblxuXHRcdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlLCBldmVuIGluIElFXG5cdFx0XHRcdFx0Ly8gYWN0dWFsbHkgc2hvd2luZyB0aGUgd3JhcHBlZCBlbGVtZW50IGlzIGhhbmRsZWQgZWxzZXdoZXJlXG5cdFx0XHRcdFx0cGxhY2UgPSBlcnJvci5oaWRlKCkuc2hvdygpLndyYXAoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy53cmFwcGVyICsgXCIvPlwiICkucGFyZW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB0aGlzLmxhYmVsQ29udGFpbmVyLmxlbmd0aCApIHtcblx0XHRcdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyLmFwcGVuZCggcGxhY2UgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmVycm9yUGxhY2VtZW50LmNhbGwoIHRoaXMsIHBsYWNlLCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwbGFjZS5pbnNlcnRBZnRlciggZWxlbWVudCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTGluayBlcnJvciBiYWNrIHRvIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggZXJyb3IuaXMoIFwibGFiZWxcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVycm9yIGlzIGEgbGFiZWwsIHRoZW4gYXNzb2NpYXRlIHVzaW5nICdmb3InXG5cdFx0XHRcdFx0ZXJyb3IuYXR0ciggXCJmb3JcIiwgZWxlbWVudElEICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiBhbiBhc3NvY2lhdGVkIGxhYmVsLCB0aGVuIGl0J3MgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0Ly8gdG8gZXhwbGljaXRseSBhcHBseSBhcmlhLWRlc2NyaWJlZGJ5XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGVycm9yLnBhcmVudHMoIFwibGFiZWxbZm9yPSdcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZWxlbWVudElEICkgKyBcIiddXCIgKS5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdFx0ZXJyb3JJRCA9IGVycm9yLmF0dHIoIFwiaWRcIiApO1xuXG5cdFx0XHRcdFx0Ly8gUmVzcGVjdCBleGlzdGluZyBub24tZXJyb3IgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHRcdGlmICggIWRlc2NyaWJlZEJ5ICkge1xuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgPSBlcnJvcklEO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFkZXNjcmliZWRCeS5tYXRjaCggbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBlcnJvcklEICkgKyBcIlxcXFxiXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gZW5kIG9mIGxpc3QgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgKz0gXCIgXCIgKyBlcnJvcklEO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRlc2NyaWJlZEJ5ICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiBhc3NpZ24gdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBzYW1lIGdyb3VwXG5cdFx0XHRcdFx0Z3JvdXAgPSB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0aWYgKCBncm91cCApIHtcblx0XHRcdFx0XHRcdHYgPSB0aGlzO1xuXHRcdFx0XHRcdFx0JC5lYWNoKCB2Lmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCB0ZXN0Z3JvdXAgPT09IGdyb3VwICkge1xuXHRcdFx0XHRcdFx0XHRcdCQoIFwiW25hbWU9J1wiICsgdi5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIsIHYuY3VycmVudEZvcm0gKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBlcnJvci5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFtZXNzYWdlICYmIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0ZXJyb3IudGV4dCggXCJcIiApO1xuXHRcdFx0XHRpZiAoIHR5cGVvZiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0ZXJyb3IuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3Muc3VjY2VzcyggZXJyb3IsIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIGVycm9yICk7XG5cdFx0fSxcblxuXHRcdGVycm9yc0ZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHRoaXMuZXNjYXBlQ3NzTWV0YSggdGhpcy5pZE9yTmFtZSggZWxlbWVudCApICksXG5cdFx0XHRcdGRlc2NyaWJlciA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApLFxuXHRcdFx0XHRzZWxlY3RvciA9IFwibGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddLCBsYWJlbFtmb3I9J1wiICsgbmFtZSArIFwiJ10gKlwiO1xuXG5cdFx0XHQvLyAnYXJpYS1kZXNjcmliZWRieScgc2hvdWxkIGRpcmVjdGx5IHJlZmVyZW5jZSB0aGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0aWYgKCBkZXNjcmliZXIgKSB7XG5cdFx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3IgKyBcIiwgI1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBkZXNjcmliZXIgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAvXFxzKy9nLCBcIiwgI1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzXG5cdFx0XHRcdC5lcnJvcnMoKVxuXHRcdFx0XHQuZmlsdGVyKCBzZWxlY3RvciApO1xuXHRcdH0sXG5cblx0XHQvLyBTZWUgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jYXRlZ29yeS9zZWxlY3RvcnMvLCBmb3IgQ1NTXG5cdFx0Ly8gbWV0YS1jaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIGJlIGVzY2FwZWQgaW4gb3JkZXIgdG8gYmUgdXNlZCB3aXRoIEpRdWVyeVxuXHRcdC8vIGFzIGEgbGl0ZXJhbCBwYXJ0IG9mIGEgbmFtZS9pZCBvciBhbnkgc2VsZWN0b3IuXG5cdFx0ZXNjYXBlQ3NzTWV0YTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggLyhbXFxcXCFcIiMkJSYnKCkqKywuLzo7PD0+P0BcXFtcXF1eYHt8fX5dKS9nLCBcIlxcXFwkMVwiICk7XG5cdFx0fSxcblxuXHRcdGlkT3JOYW1lOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF0gfHwgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApID8gZWxlbWVudC5uYW1lIDogZWxlbWVudC5pZCB8fCBlbGVtZW50Lm5hbWUgKTtcblx0XHR9LFxuXG5cdFx0dmFsaWRhdGlvblRhcmdldEZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIElmIHJhZGlvL2NoZWNrYm94LCB2YWxpZGF0ZSBmaXJzdCBlbGVtZW50IGluIGdyb3VwIGluc3RlYWRcblx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsd2F5cyBhcHBseSBpZ25vcmUgZmlsdGVyXG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRjaGVja2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuICggL3JhZGlvfGNoZWNrYm94L2kgKS50ZXN0KCBlbGVtZW50LnR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZmluZEJ5TmFtZTogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5jdXJyZW50Rm9ybSApLmZpbmQoIFwiW25hbWU9J1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIgKTtcblx0XHR9LFxuXG5cdFx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRzd2l0Y2ggKCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRjYXNlIFwic2VsZWN0XCI6XG5cdFx0XHRcdHJldHVybiAkKCBcIm9wdGlvbjpzZWxlY3RlZFwiLCBlbGVtZW50ICkubGVuZ3RoO1xuXHRcdFx0Y2FzZSBcImlucHV0XCI6XG5cdFx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0ZGVwZW5kOiBmdW5jdGlvbiggcGFyYW0sIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kZXBlbmRUeXBlc1sgdHlwZW9mIHBhcmFtIF0gPyB0aGlzLmRlcGVuZFR5cGVzWyB0eXBlb2YgcGFyYW0gXSggcGFyYW0sIGVsZW1lbnQgKSA6IHRydWU7XG5cdFx0fSxcblxuXHRcdGRlcGVuZFR5cGVzOiB7XG5cdFx0XHRcImJvb2xlYW5cIjogZnVuY3Rpb24oIHBhcmFtICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW07XG5cdFx0XHR9LFxuXHRcdFx0XCJzdHJpbmdcIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gISEkKCBwYXJhbSwgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdFwiZnVuY3Rpb25cIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW0oIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b3B0aW9uYWw6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gISQudmFsaWRhdG9yLm1ldGhvZHMucmVxdWlyZWQuY2FsbCggdGhpcywgdmFsLCBlbGVtZW50ICkgJiYgXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0fSxcblxuXHRcdHN0YXJ0UmVxdWVzdDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdICkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0Kys7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5wZW5kaW5nQ2xhc3MgKTtcblx0XHRcdFx0dGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHN0b3BSZXF1ZXN0OiBmdW5jdGlvbiggZWxlbWVudCwgdmFsaWQgKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0LS07XG5cblx0XHRcdC8vIFNvbWV0aW1lcyBzeW5jaHJvbml6YXRpb24gZmFpbHMsIG1ha2Ugc3VyZSBwZW5kaW5nUmVxdWVzdCBpcyBuZXZlciA8IDBcblx0XHRcdGlmICggdGhpcy5wZW5kaW5nUmVxdWVzdCA8IDAgKSB7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzICk7XG5cdFx0XHRpZiAoIHZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICYmIHRoaXMuZm9ybSgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkuc3VibWl0KCk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBoaWRkZW4gaW5wdXQgdGhhdCB3YXMgdXNlZCBhcyBhIHJlcGxhY2VtZW50IGZvciB0aGVcblx0XHRcdFx0Ly8gbWlzc2luZyBzdWJtaXQgYnV0dG9uLiBUaGUgaGlkZGVuIGlucHV0IGlzIGFkZGVkIGJ5IGBoYW5kbGUoKWBcblx0XHRcdFx0Ly8gdG8gZW5zdXJlIHRoYXQgdGhlIHZhbHVlIG9mIHRoZSB1c2VkIHN1Ym1pdCBidXR0b24gaXMgcGFzc2VkIG9uXG5cdFx0XHRcdC8vIGZvciBzY3JpcHRlZCBzdWJtaXRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZFxuXHRcdFx0XHRpZiAoIHRoaXMuc3VibWl0QnV0dG9uICkge1xuXHRcdFx0XHRcdCQoIFwiaW5wdXQ6aGlkZGVuW25hbWU9J1wiICsgdGhpcy5zdWJtaXRCdXR0b24ubmFtZSArIFwiJ11cIiwgdGhpcy5jdXJyZW50Rm9ybSApLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCAhdmFsaWQgJiYgdGhpcy5wZW5kaW5nUmVxdWVzdCA9PT0gMCAmJiB0aGlzLmZvcm1TdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS50cmlnZ2VySGFuZGxlciggXCJpbnZhbGlkLWZvcm1cIiwgWyB0aGlzIF0gKTtcblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHByZXZpb3VzVmFsdWU6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRtZXRob2QgPSB0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiICYmIG1ldGhvZCB8fCBcInJlbW90ZVwiO1xuXG5cdFx0XHRyZXR1cm4gJC5kYXRhKCBlbGVtZW50LCBcInByZXZpb3VzVmFsdWVcIiApIHx8ICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIsIHtcblx0XHRcdFx0b2xkOiBudWxsLFxuXHRcdFx0XHR2YWxpZDogdHJ1ZSxcblx0XHRcdFx0bWVzc2FnZTogdGhpcy5kZWZhdWx0TWVzc2FnZSggZWxlbWVudCwgeyBtZXRob2Q6IG1ldGhvZCB9IClcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gQ2xlYW5zIHVwIGFsbCBmb3JtcyBhbmQgZWxlbWVudHMsIHJlbW92ZXMgdmFsaWRhdG9yLXNwZWNpZmljIGV2ZW50c1xuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldEZvcm0oKTtcblxuXHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApXG5cdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlXCIgKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJ2YWxpZGF0b3JcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZXF1YWxUb1wiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1sZXNzVGhhblwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiIClcblx0XHRcdFx0LmZpbmQoIFwiLnZhbGlkYXRlLWxlc3NUaGFuRXF1YWwtYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1sZXNzVGhhbkVxdWFsXCIgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ2YWxpZGF0ZS1sZXNzVGhhbkVxdWFsLWJsdXJcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1ncmVhdGVyVGhhbkVxdWFsLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbFwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbC1ibHVyXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW4tYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1ncmVhdGVyVGhhblwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZ3JlYXRlclRoYW4tYmx1clwiICk7XG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xhc3NSdWxlU2V0dGluZ3M6IHtcblx0XHRyZXF1aXJlZDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuXHRcdGVtYWlsOiB7IGVtYWlsOiB0cnVlIH0sXG5cdFx0dXJsOiB7IHVybDogdHJ1ZSB9LFxuXHRcdGRhdGU6IHsgZGF0ZTogdHJ1ZSB9LFxuXHRcdGRhdGVJU086IHsgZGF0ZUlTTzogdHJ1ZSB9LFxuXHRcdG51bWJlcjogeyBudW1iZXI6IHRydWUgfSxcblx0XHRkaWdpdHM6IHsgZGlnaXRzOiB0cnVlIH0sXG5cdFx0Y3JlZGl0Y2FyZDogeyBjcmVkaXRjYXJkOiB0cnVlIH1cblx0fSxcblxuXHRhZGRDbGFzc1J1bGVzOiBmdW5jdGlvbiggY2xhc3NOYW1lLCBydWxlcyApIHtcblx0XHRpZiAoIGNsYXNzTmFtZS5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nICkge1xuXHRcdFx0dGhpcy5jbGFzc1J1bGVTZXR0aW5nc1sgY2xhc3NOYW1lIF0gPSBydWxlcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuY2xhc3NSdWxlU2V0dGluZ3MsIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fSxcblxuXHRjbGFzc1J1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdGNsYXNzZXMgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJjbGFzc1wiICk7XG5cblx0XHRpZiAoIGNsYXNzZXMgKSB7XG5cdFx0XHQkLmVhY2goIGNsYXNzZXMuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgaW4gJC52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3MgKSB7XG5cdFx0XHRcdFx0JC5leHRlbmQoIHJ1bGVzLCAkLnZhbGlkYXRvci5jbGFzc1J1bGVTZXR0aW5nc1sgdGhpcyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdG5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGU6IGZ1bmN0aW9uKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApIHtcblxuXHRcdC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGEgbnVtYmVyIGZvciBudW1iZXIgaW5wdXRzLCBhbmQgZm9yIHRleHQgZm9yIGJhY2t3YXJkcyBjb21wYWJpbGl0eVxuXHRcdC8vIGFsbG93cyB0eXBlPVwiZGF0ZVwiIGFuZCBvdGhlcnMgdG8gYmUgY29tcGFyZWQgYXMgc3RyaW5nc1xuXHRcdGlmICggL21pbnxtYXh8c3RlcC8udGVzdCggbWV0aG9kICkgJiYgKCB0eXBlID09PSBudWxsIHx8IC9udW1iZXJ8cmFuZ2V8dGV4dC8udGVzdCggdHlwZSApICkgKSB7XG5cdFx0XHR2YWx1ZSA9IE51bWJlciggdmFsdWUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydCBPcGVyYSBNaW5pLCB3aGljaCByZXR1cm5zIE5hTiBmb3IgdW5kZWZpbmVkIG1pbmxlbmd0aFxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHtcblx0XHRcdFx0dmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCApIHtcblx0XHRcdHJ1bGVzWyBtZXRob2QgXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IG1ldGhvZCAmJiB0eXBlICE9PSBcInJhbmdlXCIgKSB7XG5cblx0XHRcdC8vIEV4Y2VwdGlvbjogdGhlIGpxdWVyeSB2YWxpZGF0ZSAncmFuZ2UnIG1ldGhvZFxuXHRcdFx0Ly8gZG9lcyBub3QgdGVzdCBmb3IgdGhlIGh0bWw1ICdyYW5nZScgdHlwZVxuXHRcdFx0cnVsZXNbIG1ldGhvZCBdID0gdHJ1ZTtcblx0XHR9XG5cdH0sXG5cblx0YXR0cmlidXRlUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgZm9yIDxpbnB1dCByZXF1aXJlZD4gaW4gYm90aCBodG1sNSBhbmQgb2xkZXIgYnJvd3NlcnNcblx0XHRcdGlmICggbWV0aG9kID09PSBcInJlcXVpcmVkXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIG1ldGhvZCApO1xuXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBmb3IgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyBhbmQgbm9uLUhUTUw1IGJyb3dzZXJzIG1pZ2h0IGhhdmUgcmVxdWlyZWQ9XCJcIiBtYXJrdXBcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBub24tSFRNTDUgYnJvd3NlcnMgdG8gcmV0dXJuIGJvb2xcblx0XHRcdFx0dmFsdWUgPSAhIXZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSAkZWxlbWVudC5hdHRyKCBtZXRob2QgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vICdtYXhsZW5ndGgnIG1heSBiZSByZXR1cm5lZCBhcyAtMSwgMjE0NzQ4MzY0NyAoIElFICkgYW5kIDUyNDI4OCAoIHNhZmFyaSApIGZvciB0ZXh0IGlucHV0c1xuXHRcdGlmICggcnVsZXMubWF4bGVuZ3RoICYmIC8tMXwyMTQ3NDgzNjQ3fDUyNDI4OC8udGVzdCggcnVsZXMubWF4bGVuZ3RoICkgKSB7XG5cdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRkYXRhUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cdFx0XHR2YWx1ZSA9ICRlbGVtZW50LmRhdGEoIFwicnVsZVwiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApO1xuXG5cdFx0XHQvLyBDYXN0IGVtcHR5IGF0dHJpYnV0ZXMgbGlrZSBgZGF0YS1ydWxlLXJlcXVpcmVkYCB0byBgdHJ1ZWBcblx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0c3RhdGljUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0dmFsaWRhdG9yID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnJ1bGVzICkge1xuXHRcdFx0cnVsZXMgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCB2YWxpZGF0b3Iuc2V0dGluZ3MucnVsZXNbIGVsZW1lbnQubmFtZSBdICkgfHwge307XG5cdFx0fVxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRub3JtYWxpemVSdWxlczogZnVuY3Rpb24oIHJ1bGVzLCBlbGVtZW50ICkge1xuXG5cdFx0Ly8gSGFuZGxlIGRlcGVuZGVuY3kgY2hlY2tcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcHJvcCwgdmFsICkge1xuXG5cdFx0XHQvLyBJZ25vcmUgcnVsZSB3aGVuIHBhcmFtIGlzIGV4cGxpY2l0bHkgZmFsc2UsIGVnLiByZXF1aXJlZDpmYWxzZVxuXHRcdFx0aWYgKCB2YWwgPT09IGZhbHNlICkge1xuXHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2YWwucGFyYW0gfHwgdmFsLmRlcGVuZHMgKSB7XG5cdFx0XHRcdHZhciBrZWVwUnVsZSA9IHRydWU7XG5cdFx0XHRcdHN3aXRjaCAoIHR5cGVvZiB2YWwuZGVwZW5kcyApIHtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGtlZXBSdWxlID0gISEkKCB2YWwuZGVwZW5kcywgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRrZWVwUnVsZSA9IHZhbC5kZXBlbmRzLmNhbGwoIGVsZW1lbnQsIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGtlZXBSdWxlICkge1xuXHRcdFx0XHRcdHJ1bGVzWyBwcm9wIF0gPSB2YWwucGFyYW0gIT09IHVuZGVmaW5lZCA/IHZhbC5wYXJhbSA6IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5yZXNldEVsZW1lbnRzKCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdC8vIEV2YWx1YXRlIHBhcmFtZXRlcnNcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcnVsZSwgcGFyYW1ldGVyICkge1xuXHRcdFx0cnVsZXNbIHJ1bGUgXSA9ICQuaXNGdW5jdGlvbiggcGFyYW1ldGVyICkgJiYgcnVsZSAhPT0gXCJub3JtYWxpemVyXCIgPyBwYXJhbWV0ZXIoIGVsZW1lbnQgKSA6IHBhcmFtZXRlcjtcblx0XHR9ICk7XG5cblx0XHQvLyBDbGVhbiBudW1iZXIgcGFyYW1ldGVyc1xuXHRcdCQuZWFjaCggWyBcIm1pbmxlbmd0aFwiLCBcIm1heGxlbmd0aFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBydWxlc1sgdGhpcyBdICkge1xuXHRcdFx0XHRydWxlc1sgdGhpcyBdID0gTnVtYmVyKCBydWxlc1sgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdCQuZWFjaCggWyBcInJhbmdlbGVuZ3RoXCIsIFwicmFuZ2VcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYXJ0cztcblx0XHRcdGlmICggcnVsZXNbIHRoaXMgXSApIHtcblx0XHRcdFx0aWYgKCAkLmlzQXJyYXkoIHJ1bGVzWyB0aGlzIF0gKSApIHtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDAgXSApLCBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDEgXSApIF07XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBydWxlc1sgdGhpcyBdID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHBhcnRzID0gcnVsZXNbIHRoaXMgXS5yZXBsYWNlKCAvW1xcW1xcXV0vZywgXCJcIiApLnNwbGl0KCAvW1xccyxdKy8gKTtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHBhcnRzWyAwIF0gKSwgTnVtYmVyKCBwYXJ0c1sgMSBdICkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGlmICggJC52YWxpZGF0b3IuYXV0b0NyZWF0ZVJhbmdlcyApIHtcblxuXHRcdFx0Ly8gQXV0by1jcmVhdGUgcmFuZ2VzXG5cdFx0XHRpZiAoIHJ1bGVzLm1pbiAhPSBudWxsICYmIHJ1bGVzLm1heCAhPSBudWxsICkge1xuXHRcdFx0XHRydWxlcy5yYW5nZSA9IFsgcnVsZXMubWluLCBydWxlcy5tYXggXTtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1pbjtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1heDtcblx0XHRcdH1cblx0XHRcdGlmICggcnVsZXMubWlubGVuZ3RoICE9IG51bGwgJiYgcnVsZXMubWF4bGVuZ3RoICE9IG51bGwgKSB7XG5cdFx0XHRcdHJ1bGVzLnJhbmdlbGVuZ3RoID0gWyBydWxlcy5taW5sZW5ndGgsIHJ1bGVzLm1heGxlbmd0aCBdO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWlubGVuZ3RoO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHQvLyBDb252ZXJ0cyBhIHNpbXBsZSBzdHJpbmcgdG8gYSB7c3RyaW5nOiB0cnVlfSBydWxlLCBlLmcuLCBcInJlcXVpcmVkXCIgdG8ge3JlcXVpcmVkOnRydWV9XG5cdG5vcm1hbGl6ZVJ1bGU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR2YXIgdHJhbnNmb3JtZWQgPSB7fTtcblx0XHRcdCQuZWFjaCggZGF0YS5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRyYW5zZm9ybWVkWyB0aGlzIF0gPSB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdFx0ZGF0YSA9IHRyYW5zZm9ybWVkO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuYWRkTWV0aG9kL1xuXHRhZGRNZXRob2Q6IGZ1bmN0aW9uKCBuYW1lLCBtZXRob2QsIG1lc3NhZ2UgKSB7XG5cdFx0JC52YWxpZGF0b3IubWV0aG9kc1sgbmFtZSBdID0gbWV0aG9kO1xuXHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBuYW1lIF0gPSBtZXNzYWdlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlIDogJC52YWxpZGF0b3IubWVzc2FnZXNbIG5hbWUgXTtcblx0XHRpZiAoIG1ldGhvZC5sZW5ndGggPCAzICkge1xuXHRcdFx0JC52YWxpZGF0b3IuYWRkQ2xhc3NSdWxlcyggbmFtZSwgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggbmFtZSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5tZXRob2RzL1xuXHRtZXRob2RzOiB7XG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlcXVpcmVkLW1ldGhvZC9cblx0XHRyZXF1aXJlZDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgZGVwZW5kZW5jeSBpcyBtZXRcblx0XHRcdGlmICggIXRoaXMuZGVwZW5kKCBwYXJhbSwgZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzZWxlY3RcIiApIHtcblxuXHRcdFx0XHQvLyBDb3VsZCBiZSBhbiBhcnJheSBmb3Igc2VsZWN0LW11bHRpcGxlIG9yIGEgc3RyaW5nLCBib3RoIGFyZSBmaW5lIHRoaXMgd2F5XG5cdFx0XHRcdHZhciB2YWwgPSAkKCBlbGVtZW50ICkudmFsKCk7XG5cdFx0XHRcdHJldHVybiB2YWwgJiYgdmFsLmxlbmd0aCA+IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKSA+IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS5sZW5ndGggPiAwO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VtYWlsLW1ldGhvZC9cblx0XHRlbWFpbDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBGcm9tIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3Ncblx0XHRcdC8vIFJldHJpZXZlZCAyMDE0LTAxLTE0XG5cdFx0XHQvLyBJZiB5b3UgaGF2ZSBhIHByb2JsZW0gd2l0aCB0aGlzIGltcGxlbWVudGF0aW9uLCByZXBvcnQgYSBidWcgYWdhaW5zdCB0aGUgYWJvdmUgc3BlY1xuXHRcdFx0Ly8gT3IgdXNlIGN1c3RvbSBtZXRob2RzIHRvIGltcGxlbWVudCB5b3VyIG93biBlbWFpbCB2YWxpZGF0aW9uXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdXJsLW1ldGhvZC9cblx0XHR1cmw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gQ29weXJpZ2h0IChjKSAyMDEwLTIwMTMgRGllZ28gUGVyaW5pLCBNSVQgbGljZW5zZWRcblx0XHRcdC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2RwZXJpbmkvNzI5Mjk0XG5cdFx0XHQvLyBzZWUgYWxzbyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXhcblx0XHRcdC8vIG1vZGlmaWVkIHRvIGFsbG93IHByb3RvY29sLXJlbGF0aXZlIFVSTHNcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzooPzooPzpodHRwcz98ZnRwKTopP1xcL1xcLykoPzpcXFMrKD86OlxcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcXC5cXGR7MSwzfSl7M30pKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKSg/OlxcLlxcZHsxLDN9KXsyfSkoPzpbMS05XVxcZD98MVxcZFxcZHwyWzAxXVxcZHwyMlswLTNdKSg/OlxcLig/OjE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKXsyfSg/OlxcLig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMC00XVxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0tKikqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSg/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSkuPykoPzo6XFxkezIsNX0pPyg/OlsvPyNdXFxTKik/JC9pLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZS1tZXRob2QvXG5cdFx0ZGF0ZTogKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjYWxsZWQgPSBmYWxzZTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdFx0aWYgKCAhY2FsbGVkICkge1xuXHRcdFx0XHRcdGNhbGxlZCA9IHRydWU7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcdFx0XHRcIlRoZSBgZGF0ZWAgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uICcyLjAuMCcuXFxuXCIgK1xuXHRcdFx0XHRcdFx0XHRcIlBsZWFzZSBkb24ndCB1c2UgaXQsIHNpbmNlIGl0IHJlbGllcyBvbiB0aGUgRGF0ZSBjb25zdHJ1Y3Rvciwgd2hpY2hcXG5cIiArXG5cdFx0XHRcdFx0XHRcdFwiYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IGFjcm9zcyBicm93c2VycyBhbmQgbG9jYWxlcy4gVXNlIGBkYXRlSVNPYFxcblwiICtcblx0XHRcdFx0XHRcdFx0XCJpbnN0ZWFkIG9yIG9uZSBvZiB0aGUgbG9jYWxlIHNwZWNpZmljIG1ldGhvZHMgaW4gYGxvY2FsaXphdGlvbnMvYFxcblwiICtcblx0XHRcdFx0XHRcdFx0XCJhbmQgYGFkZGl0aW9uYWwtbWV0aG9kcy5qc2AuXCJcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAhL0ludmFsaWR8TmFOLy50ZXN0KCBuZXcgRGF0ZSggdmFsdWUgKS50b1N0cmluZygpICk7XG5cdFx0XHR9O1xuXHRcdH0oKSApLFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9kYXRlSVNPLW1ldGhvZC9cblx0XHRkYXRlSVNPOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkezR9W1xcL1xcLV0oMD9bMS05XXwxWzAxMl0pW1xcL1xcLV0oMD9bMS05XXxbMTJdWzAtOV18M1swMV0pJC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9udW1iZXItbWV0aG9kL1xuXHRcdG51bWJlcjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXig/Oi0/XFxkK3wtP1xcZHsxLDN9KD86LFxcZHszfSkrKT8oPzpcXC5cXGQrKT8kLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RpZ2l0cy1tZXRob2QvXG5cdFx0ZGlnaXRzOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkKyQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWlubGVuZ3RoLW1ldGhvZC9cblx0XHRtaW5sZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA+PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXhsZW5ndGgtbWV0aG9kL1xuXHRcdG1heGxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgbGVuZ3RoIDw9IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlbGVuZ3RoLW1ldGhvZC9cblx0XHRyYW5nZWxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCBsZW5ndGggPj0gcGFyYW1bIDAgXSAmJiBsZW5ndGggPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21pbi1tZXRob2QvXG5cdFx0bWluOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWx1ZSA+PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXgtbWV0aG9kL1xuXHRcdG1heDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPD0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmFuZ2UtbWV0aG9kL1xuXHRcdHJhbmdlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAoIHZhbHVlID49IHBhcmFtWyAwIF0gJiYgdmFsdWUgPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3N0ZXAtbWV0aG9kL1xuXHRcdHN0ZXA6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgdHlwZSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcInR5cGVcIiApLFxuXHRcdFx0XHRlcnJvck1lc3NhZ2UgPSBcIlN0ZXAgYXR0cmlidXRlIG9uIGlucHV0IHR5cGUgXCIgKyB0eXBlICsgXCIgaXMgbm90IHN1cHBvcnRlZC5cIixcblx0XHRcdFx0c3VwcG9ydGVkVHlwZXMgPSBbIFwidGV4dFwiLCBcIm51bWJlclwiLCBcInJhbmdlXCIgXSxcblx0XHRcdFx0cmUgPSBuZXcgUmVnRXhwKCBcIlxcXFxiXCIgKyB0eXBlICsgXCJcXFxcYlwiICksXG5cdFx0XHRcdG5vdFN1cHBvcnRlZCA9IHR5cGUgJiYgIXJlLnRlc3QoIHN1cHBvcnRlZFR5cGVzLmpvaW4oKSApLFxuXHRcdFx0XHRkZWNpbWFsUGxhY2VzID0gZnVuY3Rpb24oIG51bSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2ggPSAoIFwiXCIgKyBudW0gKS5tYXRjaCggLyg/OlxcLihcXGQrKSk/JC8gKTtcblx0XHRcdFx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE51bWJlciBvZiBkaWdpdHMgcmlnaHQgb2YgZGVjaW1hbCBwb2ludC5cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hbIDEgXSA/IG1hdGNoWyAxIF0ubGVuZ3RoIDogMDtcblx0XHRcdFx0fSxcblx0XHRcdFx0dG9JbnQgPSBmdW5jdGlvbiggbnVtICkge1xuXHRcdFx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCBudW0gKiBNYXRoLnBvdyggMTAsIGRlY2ltYWxzICkgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dmFsaWQgPSB0cnVlLFxuXHRcdFx0XHRkZWNpbWFscztcblxuXHRcdFx0Ly8gV29ya3Mgb25seSBmb3IgdGV4dCwgbnVtYmVyIGFuZCByYW5nZSBpbnB1dCB0eXBlc1xuXHRcdFx0Ly8gVE9ETyBmaW5kIGEgd2F5IHRvIHN1cHBvcnQgaW5wdXQgdHlwZXMgZGF0ZSwgZGF0ZXRpbWUsIGRhdGV0aW1lLWxvY2FsLCBtb250aCwgdGltZSBhbmQgd2Vla1xuXHRcdFx0aWYgKCBub3RTdXBwb3J0ZWQgKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggZXJyb3JNZXNzYWdlICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlY2ltYWxzID0gZGVjaW1hbFBsYWNlcyggcGFyYW0gKTtcblxuXHRcdFx0Ly8gVmFsdWUgY2FuJ3QgaGF2ZSB0b28gbWFueSBkZWNpbWFsc1xuXHRcdFx0aWYgKCBkZWNpbWFsUGxhY2VzKCB2YWx1ZSApID4gZGVjaW1hbHMgfHwgdG9JbnQoIHZhbHVlICkgJSB0b0ludCggcGFyYW0gKSAhPT0gMCApIHtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWxpZDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9lcXVhbFRvLW1ldGhvZC9cblx0XHRlcXVhbFRvOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXG5cdFx0XHQvLyBCaW5kIHRvIHRoZSBibHVyIGV2ZW50IG9mIHRoZSB0YXJnZXQgaW4gb3JkZXIgdG8gcmV2YWxpZGF0ZSB3aGVuZXZlciB0aGUgdGFyZ2V0IGZpZWxkIGlzIHVwZGF0ZWRcblx0XHRcdHZhciB0YXJnZXQgPSAkKCBwYXJhbSApO1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLm9uZm9jdXNvdXQgJiYgdGFyZ2V0Lm5vdCggXCIudmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHRhcmdldC5hZGRDbGFzcyggXCJ2YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApLm9uKCBcImJsdXIudmFsaWRhdGUtZXF1YWxUb1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkKCBlbGVtZW50ICkudmFsaWQoKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB0YXJnZXQudmFsKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmVtb3RlLW1ldGhvZC9cblx0XHRyZW1vdGU6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0sIG1ldGhvZCApIHtcblx0XHRcdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cblx0XHRcdG1ldGhvZCA9IHR5cGVvZiBtZXRob2QgPT09IFwic3RyaW5nXCIgJiYgbWV0aG9kIHx8IFwicmVtb3RlXCI7XG5cblx0XHRcdHZhciBwcmV2aW91cyA9IHRoaXMucHJldmlvdXNWYWx1ZSggZWxlbWVudCwgbWV0aG9kICksXG5cdFx0XHRcdHZhbGlkYXRvciwgZGF0YSwgb3B0aW9uRGF0YVN0cmluZztcblxuXHRcdFx0aWYgKCAhdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdID0ge307XG5cdFx0XHR9XG5cdFx0XHRwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2UgPSBwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2UgfHwgdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdO1xuXHRcdFx0dGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdID0gcHJldmlvdXMubWVzc2FnZTtcblxuXHRcdFx0cGFyYW0gPSB0eXBlb2YgcGFyYW0gPT09IFwic3RyaW5nXCIgJiYgeyB1cmw6IHBhcmFtIH0gfHwgcGFyYW07XG5cdFx0XHRvcHRpb25EYXRhU3RyaW5nID0gJC5wYXJhbSggJC5leHRlbmQoIHsgZGF0YTogdmFsdWUgfSwgcGFyYW0uZGF0YSApICk7XG5cdFx0XHRpZiAoIHByZXZpb3VzLm9sZCA9PT0gb3B0aW9uRGF0YVN0cmluZyApIHtcblx0XHRcdFx0cmV0dXJuIHByZXZpb3VzLnZhbGlkO1xuXHRcdFx0fVxuXG5cdFx0XHRwcmV2aW91cy5vbGQgPSBvcHRpb25EYXRhU3RyaW5nO1xuXHRcdFx0dmFsaWRhdG9yID0gdGhpcztcblx0XHRcdHRoaXMuc3RhcnRSZXF1ZXN0KCBlbGVtZW50ICk7XG5cdFx0XHRkYXRhID0ge307XG5cdFx0XHRkYXRhWyBlbGVtZW50Lm5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0JC5hamF4KCAkLmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRtb2RlOiBcImFib3J0XCIsXG5cdFx0XHRcdHBvcnQ6IFwidmFsaWRhdGVcIiArIGVsZW1lbnQubmFtZSxcblx0XHRcdFx0ZGF0YVR5cGU6IFwianNvblwiLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRjb250ZXh0OiB2YWxpZGF0b3IuY3VycmVudEZvcm0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdFx0XHR2YXIgdmFsaWQgPSByZXNwb25zZSA9PT0gdHJ1ZSB8fCByZXNwb25zZSA9PT0gXCJ0cnVlXCIsXG5cdFx0XHRcdFx0XHRlcnJvcnMsIG1lc3NhZ2UsIHN1Ym1pdHRlZDtcblxuXHRcdFx0XHRcdHZhbGlkYXRvci5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdID0gcHJldmlvdXMub3JpZ2luYWxNZXNzYWdlO1xuXHRcdFx0XHRcdGlmICggdmFsaWQgKSB7XG5cdFx0XHRcdFx0XHRzdWJtaXR0ZWQgPSB2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZDtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5yZXNldEludGVybmFscygpO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnRvSGlkZSA9IHZhbGlkYXRvci5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5mb3JtU3VibWl0dGVkID0gc3VibWl0dGVkO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnN1Y2Nlc3NMaXN0LnB1c2goIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5pbnZhbGlkWyBlbGVtZW50Lm5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZXJyb3JzID0ge307XG5cdFx0XHRcdFx0XHRtZXNzYWdlID0gcmVzcG9uc2UgfHwgdmFsaWRhdG9yLmRlZmF1bHRNZXNzYWdlKCBlbGVtZW50LCB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiB2YWx1ZSB9ICk7XG5cdFx0XHRcdFx0XHRlcnJvcnNbIGVsZW1lbnQubmFtZSBdID0gcHJldmlvdXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuaW52YWxpZFsgZWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoIGVycm9ycyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwcmV2aW91cy52YWxpZCA9IHZhbGlkO1xuXHRcdFx0XHRcdHZhbGlkYXRvci5zdG9wUmVxdWVzdCggZWxlbWVudCwgdmFsaWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgcGFyYW0gKSApO1xuXHRcdFx0cmV0dXJuIFwicGVuZGluZ1wiO1xuXHRcdH1cblx0fVxuXG59ICk7XG5cclxuLy8gQWpheCBtb2RlOiBhYm9ydFxuLy8gdXNhZ2U6ICQuYWpheCh7IG1vZGU6IFwiYWJvcnRcIlssIHBvcnQ6IFwidW5pcXVlcG9ydFwiXX0pO1xuLy8gaWYgbW9kZTpcImFib3J0XCIgaXMgdXNlZCwgdGhlIHByZXZpb3VzIHJlcXVlc3Qgb24gdGhhdCBwb3J0IChwb3J0IGNhbiBiZSB1bmRlZmluZWQpIGlzIGFib3J0ZWQgdmlhIFhNTEh0dHBSZXF1ZXN0LmFib3J0KClcblxudmFyIHBlbmRpbmdSZXF1ZXN0cyA9IHt9LFxuXHRhamF4O1xuXG4vLyBVc2UgYSBwcmVmaWx0ZXIgaWYgYXZhaWxhYmxlICgxLjUrKVxuaWYgKCAkLmFqYXhQcmVmaWx0ZXIgKSB7XG5cdCQuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHNldHRpbmdzLCBfLCB4aHIgKSB7XG5cdFx0dmFyIHBvcnQgPSBzZXR0aW5ncy5wb3J0O1xuXHRcdGlmICggc2V0dGluZ3MubW9kZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0aWYgKCBwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSApIHtcblx0XHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0uYWJvcnQoKTtcblx0XHRcdH1cblx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdID0geGhyO1xuXHRcdH1cblx0fSApO1xufSBlbHNlIHtcblxuXHQvLyBQcm94eSBhamF4XG5cdGFqYXggPSAkLmFqYXg7XG5cdCQuYWpheCA9IGZ1bmN0aW9uKCBzZXR0aW5ncyApIHtcblx0XHR2YXIgbW9kZSA9ICggXCJtb2RlXCIgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncyA6ICQuYWpheFNldHRpbmdzICkubW9kZSxcblx0XHRcdHBvcnQgPSAoIFwicG9ydFwiIGluIHNldHRpbmdzID8gc2V0dGluZ3MgOiAkLmFqYXhTZXR0aW5ncyApLnBvcnQ7XG5cdFx0aWYgKCBtb2RlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRpZiAoIHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdICkge1xuXHRcdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXS5hYm9ydCgpO1xuXHRcdFx0fVxuXHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gPSBhamF4LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdHJldHVybiBwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXTtcblx0XHR9XG5cdFx0cmV0dXJuIGFqYXguYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9O1xufVxucmV0dXJuICQ7XHJcbn0pKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvanF1ZXJ5LXZhbGlkYXRpb24vZGlzdC9qcXVlcnkudmFsaWRhdGUuanMiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNC4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0wNS0wMVQyMTowNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy40LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9ICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQobm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmNvbnRlbnREb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC5kZWJvdW5jZS9pbmRleC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIi8qIHNtb290aHNjcm9sbCB2MC40LjQgLSAyMDE5IC0gRHVzdGFuIEthc3RlbiwgSmVyZW1pYXMgTWVuaWNoZWxsaSAtIE1JVCBMaWNlbnNlICovXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gcG9seWZpbGxcbiAgZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgLy8gYWxpYXNlc1xuICAgIHZhciB3ID0gd2luZG93O1xuICAgIHZhciBkID0gZG9jdW1lbnQ7XG5cbiAgICAvLyByZXR1cm4gaWYgc2Nyb2xsIGJlaGF2aW9yIGlzIHN1cHBvcnRlZCBhbmQgcG9seWZpbGwgaXMgbm90IGZvcmNlZFxuICAgIGlmIChcbiAgICAgICdzY3JvbGxCZWhhdmlvcicgaW4gZC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiZcbiAgICAgIHcuX19mb3JjZVNtb290aFNjcm9sbFBvbHlmaWxsX18gIT09IHRydWVcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBnbG9iYWxzXG4gICAgdmFyIEVsZW1lbnQgPSB3LkhUTUxFbGVtZW50IHx8IHcuRWxlbWVudDtcbiAgICB2YXIgU0NST0xMX1RJTUUgPSA0Njg7XG5cbiAgICAvLyBvYmplY3QgZ2F0aGVyaW5nIG9yaWdpbmFsIHNjcm9sbCBtZXRob2RzXG4gICAgdmFyIG9yaWdpbmFsID0ge1xuICAgICAgc2Nyb2xsOiB3LnNjcm9sbCB8fCB3LnNjcm9sbFRvLFxuICAgICAgc2Nyb2xsQnk6IHcuc2Nyb2xsQnksXG4gICAgICBlbGVtZW50U2Nyb2xsOiBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgfHwgc2Nyb2xsRWxlbWVudCxcbiAgICAgIHNjcm9sbEludG9WaWV3OiBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICAgIH07XG5cbiAgICAvLyBkZWZpbmUgdGltaW5nIG1ldGhvZFxuICAgIHZhciBub3cgPVxuICAgICAgdy5wZXJmb3JtYW5jZSAmJiB3LnBlcmZvcm1hbmNlLm5vd1xuICAgICAgICA/IHcucGVyZm9ybWFuY2Uubm93LmJpbmQody5wZXJmb3JtYW5jZSlcbiAgICAgICAgOiBEYXRlLm5vdztcblxuICAgIC8qKlxuICAgICAqIGluZGljYXRlcyBpZiBhIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgbWFkZSBieSBNaWNyb3NvZnRcbiAgICAgKiBAbWV0aG9kIGlzTWljcm9zb2Z0QnJvd3NlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyQWdlbnRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01pY3Jvc29mdEJyb3dzZXIodXNlckFnZW50KSB7XG4gICAgICB2YXIgdXNlckFnZW50UGF0dGVybnMgPSBbJ01TSUUgJywgJ1RyaWRlbnQvJywgJ0VkZ2UvJ107XG5cbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVzZXJBZ2VudFBhdHRlcm5zLmpvaW4oJ3wnKSkudGVzdCh1c2VyQWdlbnQpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogSUUgaGFzIHJvdW5kaW5nIGJ1ZyByb3VuZGluZyBkb3duIGNsaWVudEhlaWdodCBhbmQgY2xpZW50V2lkdGggYW5kXG4gICAgICogcm91bmRpbmcgdXAgc2Nyb2xsSGVpZ2h0IGFuZCBzY3JvbGxXaWR0aCBjYXVzaW5nIGZhbHNlIHBvc2l0aXZlc1xuICAgICAqIG9uIGhhc1Njcm9sbGFibGVTcGFjZVxuICAgICAqL1xuICAgIHZhciBST1VORElOR19UT0xFUkFOQ0UgPSBpc01pY3Jvc29mdEJyb3dzZXIody5uYXZpZ2F0b3IudXNlckFnZW50KSA/IDEgOiAwO1xuXG4gICAgLyoqXG4gICAgICogY2hhbmdlcyBzY3JvbGwgcG9zaXRpb24gaW5zaWRlIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIHNjcm9sbEVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY3JvbGxFbGVtZW50KHgsIHkpIHtcbiAgICAgIHRoaXMuc2Nyb2xsTGVmdCA9IHg7XG4gICAgICB0aGlzLnNjcm9sbFRvcCA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyByZXN1bHQgb2YgYXBwbHlpbmcgZWFzZSBtYXRoIGZ1bmN0aW9uIHRvIGEgbnVtYmVyXG4gICAgICogQG1ldGhvZCBlYXNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGtcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVhc2Uoaykge1xuICAgICAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYSBzbW9vdGggYmVoYXZpb3Igc2hvdWxkIGJlIGFwcGxpZWRcbiAgICAgKiBAbWV0aG9kIHNob3VsZEJhaWxPdXRcbiAgICAgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IGZpcnN0QXJnXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvdWxkQmFpbE91dChmaXJzdEFyZykge1xuICAgICAgaWYgKFxuICAgICAgICBmaXJzdEFyZyA9PT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2YgZmlyc3RBcmcgIT09ICdvYmplY3QnIHx8XG4gICAgICAgIGZpcnN0QXJnLmJlaGF2aW9yID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgZmlyc3RBcmcuYmVoYXZpb3IgPT09ICdhdXRvJyB8fFxuICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciA9PT0gJ2luc3RhbnQnXG4gICAgICApIHtcbiAgICAgICAgLy8gZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIG9iamVjdC9udWxsXG4gICAgICAgIC8vIG9yIGJlaGF2aW9yIGlzIGF1dG8sIGluc3RhbnQgb3IgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGZpcnN0QXJnID09PSAnb2JqZWN0JyAmJiBmaXJzdEFyZy5iZWhhdmlvciA9PT0gJ3Ntb290aCcpIHtcbiAgICAgICAgLy8gZmlyc3QgYXJndW1lbnQgaXMgYW4gb2JqZWN0IGFuZCBiZWhhdmlvciBpcyBzbW9vdGhcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyB0aHJvdyBlcnJvciB3aGVuIGJlaGF2aW9yIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdiZWhhdmlvciBtZW1iZXIgb2YgU2Nyb2xsT3B0aW9ucyAnICtcbiAgICAgICAgICBmaXJzdEFyZy5iZWhhdmlvciArXG4gICAgICAgICAgJyBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3IgZW51bWVyYXRpb24gU2Nyb2xsQmVoYXZpb3IuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBoYXMgc2Nyb2xsYWJsZSBzcGFjZSBpbiB0aGUgcHJvdmlkZWQgYXhpc1xuICAgICAqIEBtZXRob2QgaGFzU2Nyb2xsYWJsZVNwYWNlXG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBheGlzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzU2Nyb2xsYWJsZVNwYWNlKGVsLCBheGlzKSB7XG4gICAgICBpZiAoYXhpcyA9PT0gJ1knKSB7XG4gICAgICAgIHJldHVybiBlbC5jbGllbnRIZWlnaHQgKyBST1VORElOR19UT0xFUkFOQ0UgPCBlbC5zY3JvbGxIZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzID09PSAnWCcpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsaWVudFdpZHRoICsgUk9VTkRJTkdfVE9MRVJBTkNFIDwgZWwuc2Nyb2xsV2lkdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGFuIGVsZW1lbnQgaGFzIGEgc2Nyb2xsYWJsZSBvdmVyZmxvdyBwcm9wZXJ0eSBpbiB0aGUgYXhpc1xuICAgICAqIEBtZXRob2QgY2FuT3ZlcmZsb3dcbiAgICAgKiBAcGFyYW0ge05vZGV9IGVsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYW5PdmVyZmxvdyhlbCwgYXhpcykge1xuICAgICAgdmFyIG92ZXJmbG93VmFsdWUgPSB3LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpWydvdmVyZmxvdycgKyBheGlzXTtcblxuICAgICAgcmV0dXJuIG92ZXJmbG93VmFsdWUgPT09ICdhdXRvJyB8fCBvdmVyZmxvd1ZhbHVlID09PSAnc2Nyb2xsJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYW4gZWxlbWVudCBjYW4gYmUgc2Nyb2xsZWQgaW4gZWl0aGVyIGF4aXNcbiAgICAgKiBAbWV0aG9kIGlzU2Nyb2xsYWJsZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXhpc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2Nyb2xsYWJsZShlbCkge1xuICAgICAgdmFyIGlzU2Nyb2xsYWJsZVkgPSBoYXNTY3JvbGxhYmxlU3BhY2UoZWwsICdZJykgJiYgY2FuT3ZlcmZsb3coZWwsICdZJyk7XG4gICAgICB2YXIgaXNTY3JvbGxhYmxlWCA9IGhhc1Njcm9sbGFibGVTcGFjZShlbCwgJ1gnKSAmJiBjYW5PdmVyZmxvdyhlbCwgJ1gnKTtcblxuICAgICAgcmV0dXJuIGlzU2Nyb2xsYWJsZVkgfHwgaXNTY3JvbGxhYmxlWDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmaW5kcyBzY3JvbGxhYmxlIHBhcmVudCBvZiBhbiBlbGVtZW50XG4gICAgICogQG1ldGhvZCBmaW5kU2Nyb2xsYWJsZVBhcmVudFxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kU2Nyb2xsYWJsZVBhcmVudChlbCkge1xuICAgICAgd2hpbGUgKGVsICE9PSBkLmJvZHkgJiYgaXNTY3JvbGxhYmxlKGVsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlIHx8IGVsLmhvc3Q7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZWxmIGludm9rZWQgZnVuY3Rpb24gdGhhdCwgZ2l2ZW4gYSBjb250ZXh0LCBzdGVwcyB0aHJvdWdoIHNjcm9sbGluZ1xuICAgICAqIEBtZXRob2Qgc3RlcFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGVwKGNvbnRleHQpIHtcbiAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB2YXIgY3VycmVudFg7XG4gICAgICB2YXIgY3VycmVudFk7XG4gICAgICB2YXIgZWxhcHNlZCA9ICh0aW1lIC0gY29udGV4dC5zdGFydFRpbWUpIC8gU0NST0xMX1RJTUU7XG5cbiAgICAgIC8vIGF2b2lkIGVsYXBzZWQgdGltZXMgaGlnaGVyIHRoYW4gb25lXG4gICAgICBlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZDtcblxuICAgICAgLy8gYXBwbHkgZWFzaW5nIHRvIGVsYXBzZWQgdGltZVxuICAgICAgdmFsdWUgPSBlYXNlKGVsYXBzZWQpO1xuXG4gICAgICBjdXJyZW50WCA9IGNvbnRleHQuc3RhcnRYICsgKGNvbnRleHQueCAtIGNvbnRleHQuc3RhcnRYKSAqIHZhbHVlO1xuICAgICAgY3VycmVudFkgPSBjb250ZXh0LnN0YXJ0WSArIChjb250ZXh0LnkgLSBjb250ZXh0LnN0YXJ0WSkgKiB2YWx1ZTtcblxuICAgICAgY29udGV4dC5tZXRob2QuY2FsbChjb250ZXh0LnNjcm9sbGFibGUsIGN1cnJlbnRYLCBjdXJyZW50WSk7XG5cbiAgICAgIC8vIHNjcm9sbCBtb3JlIGlmIHdlIGhhdmUgbm90IHJlYWNoZWQgb3VyIGRlc3RpbmF0aW9uXG4gICAgICBpZiAoY3VycmVudFggIT09IGNvbnRleHQueCB8fCBjdXJyZW50WSAhPT0gY29udGV4dC55KSB7XG4gICAgICAgIHcucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXAuYmluZCh3LCBjb250ZXh0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2Nyb2xscyB3aW5kb3cgb3IgZWxlbWVudCB3aXRoIGEgc21vb3RoIGJlaGF2aW9yXG4gICAgICogQG1ldGhvZCBzbW9vdGhTY3JvbGxcbiAgICAgKiBAcGFyYW0ge09iamVjdHxOb2RlfSBlbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNtb290aFNjcm9sbChlbCwgeCwgeSkge1xuICAgICAgdmFyIHNjcm9sbGFibGU7XG4gICAgICB2YXIgc3RhcnRYO1xuICAgICAgdmFyIHN0YXJ0WTtcbiAgICAgIHZhciBtZXRob2Q7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbm93KCk7XG5cbiAgICAgIC8vIGRlZmluZSBzY3JvbGwgY29udGV4dFxuICAgICAgaWYgKGVsID09PSBkLmJvZHkpIHtcbiAgICAgICAgc2Nyb2xsYWJsZSA9IHc7XG4gICAgICAgIHN0YXJ0WCA9IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0O1xuICAgICAgICBzdGFydFkgPSB3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldDtcbiAgICAgICAgbWV0aG9kID0gb3JpZ2luYWwuc2Nyb2xsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Nyb2xsYWJsZSA9IGVsO1xuICAgICAgICBzdGFydFggPSBlbC5zY3JvbGxMZWZ0O1xuICAgICAgICBzdGFydFkgPSBlbC5zY3JvbGxUb3A7XG4gICAgICAgIG1ldGhvZCA9IHNjcm9sbEVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIC8vIHNjcm9sbCBsb29waW5nIG92ZXIgYSBmcmFtZVxuICAgICAgc3RlcCh7XG4gICAgICAgIHNjcm9sbGFibGU6IHNjcm9sbGFibGUsXG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSxcbiAgICAgICAgc3RhcnRYOiBzdGFydFgsXG4gICAgICAgIHN0YXJ0WTogc3RhcnRZLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBPUklHSU5BTCBNRVRIT0RTIE9WRVJSSURFU1xuICAgIC8vIHcuc2Nyb2xsIGFuZCB3LnNjcm9sbFRvXG4gICAgdy5zY3JvbGwgPSB3LnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBhY3Rpb24gd2hlbiBubyBhcmd1bWVudHMgYXJlIHBhc3NlZFxuICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSA9PT0gdHJ1ZSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGwuY2FsbChcbiAgICAgICAgICB3LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICAgIDogdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgPyBhcmd1bWVudHNbMF1cbiAgICAgICAgICAgICAgOiB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCxcbiAgICAgICAgICAvLyB1c2UgdG9wIHByb3AsIHNlY29uZCBhcmd1bWVudCBpZiBwcmVzZW50IG9yIGZhbGxiYWNrIHRvIHNjcm9sbFlcbiAgICAgICAgICBhcmd1bWVudHNbMF0udG9wICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdLnRvcFxuICAgICAgICAgICAgOiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgICA6IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgdyxcbiAgICAgICAgZC5ib2R5LFxuICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS5sZWZ0XG4gICAgICAgICAgOiB3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCxcbiAgICAgICAgYXJndW1lbnRzWzBdLnRvcCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICA6IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0XG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyB3LnNjcm9sbEJ5XG4gICAgdy5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgYWN0aW9uIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsQnkuY2FsbChcbiAgICAgICAgICB3LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdLmxlZnRcbiAgICAgICAgICAgIDogdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCcgPyBhcmd1bWVudHNbMF0gOiAwLFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBhcmd1bWVudHNbMF0udG9wXG4gICAgICAgICAgICA6IGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHcsXG4gICAgICAgIGQuYm9keSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0ubGVmdCArICh3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCksXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLnRvcCArICh3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldClcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCBhbmQgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG9cbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgPSBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgYWN0aW9uIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgLy8gaWYgb25lIG51bWJlciBpcyBwYXNzZWQsIHRocm93IGVycm9yIHRvIG1hdGNoIEZpcmVmb3ggaW1wbGVtZW50YXRpb25cbiAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdudW1iZXInICYmIGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdWYWx1ZSBjb3VsZCBub3QgYmUgY29udmVydGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcmlnaW5hbC5lbGVtZW50U2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAvLyB1c2UgbGVmdCBwcm9wLCBmaXJzdCBudW1iZXIgYXJndW1lbnQgb3IgZmFsbGJhY2sgdG8gc2Nyb2xsTGVmdFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gfn5hcmd1bWVudHNbMF0ubGVmdFxuICAgICAgICAgICAgOiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAnb2JqZWN0JyA/IH5+YXJndW1lbnRzWzBdIDogdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIC8vIHVzZSB0b3AgcHJvcCwgc2Vjb25kIGFyZ3VtZW50IG9yIGZhbGxiYWNrIHRvIHNjcm9sbFRvcFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS50b3BcbiAgICAgICAgICAgIDogYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyB+fmFyZ3VtZW50c1sxXSA6IHRoaXMuc2Nyb2xsVG9wXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVmdCA9IGFyZ3VtZW50c1swXS5sZWZ0O1xuICAgICAgdmFyIHRvcCA9IGFyZ3VtZW50c1swXS50b3A7XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLFxuICAgICAgICB0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnNjcm9sbExlZnQgOiB+fmxlZnQsXG4gICAgICAgIHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnID8gdGhpcy5zY3JvbGxUb3AgOiB+fnRvcFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsQnlcbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgYWN0aW9uIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWRcbiAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkgPT09IHRydWUpIHtcbiAgICAgICAgb3JpZ2luYWwuZWxlbWVudFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS5sZWZ0ICsgdGhpcy5zY3JvbGxMZWZ0XG4gICAgICAgICAgICA6IH5+YXJndW1lbnRzWzBdICsgdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB+fmFyZ3VtZW50c1swXS50b3AgKyB0aGlzLnNjcm9sbFRvcFxuICAgICAgICAgICAgOiB+fmFyZ3VtZW50c1sxXSArIHRoaXMuc2Nyb2xsVG9wXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNjcm9sbCh7XG4gICAgICAgIGxlZnQ6IH5+YXJndW1lbnRzWzBdLmxlZnQgKyB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgIHRvcDogfn5hcmd1bWVudHNbMF0udG9wICsgdGhpcy5zY3JvbGxUb3AsXG4gICAgICAgIGJlaGF2aW9yOiBhcmd1bWVudHNbMF0uYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pID09PSB0cnVlKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbEludG9WaWV3LmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHZhciBzY3JvbGxhYmxlUGFyZW50ID0gZmluZFNjcm9sbGFibGVQYXJlbnQodGhpcyk7XG4gICAgICB2YXIgcGFyZW50UmVjdHMgPSBzY3JvbGxhYmxlUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGNsaWVudFJlY3RzID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgaWYgKHNjcm9sbGFibGVQYXJlbnQgIT09IGQuYm9keSkge1xuICAgICAgICAvLyByZXZlYWwgZWxlbWVudCBpbnNpZGUgcGFyZW50XG4gICAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudCxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LnNjcm9sbExlZnQgKyBjbGllbnRSZWN0cy5sZWZ0IC0gcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LnNjcm9sbFRvcCArIGNsaWVudFJlY3RzLnRvcCAtIHBhcmVudFJlY3RzLnRvcFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHJldmVhbCBwYXJlbnQgaW4gdmlld3BvcnQgdW5sZXNzIGlzIGZpeGVkXG4gICAgICAgIGlmICh3LmdldENvbXB1dGVkU3R5bGUoc2Nyb2xsYWJsZVBhcmVudCkucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICAgIGxlZnQ6IHBhcmVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgICB0b3A6IHBhcmVudFJlY3RzLnRvcCxcbiAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXZlYWwgZWxlbWVudCBpbiB2aWV3cG9ydFxuICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICBsZWZ0OiBjbGllbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHRvcDogY2xpZW50UmVjdHMudG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGNvbW1vbmpzXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IHBvbHlmaWxsOiBwb2x5ZmlsbCB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGdsb2JhbFxuICAgIHBvbHlmaWxsKCk7XG4gIH1cblxufSgpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zbW9vdGhzY3JvbGwtcG9seWZpbGwvZGlzdC9zbW9vdGhzY3JvbGwuanMiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuQnJvd3NlclNwcml0ZVN5bWJvbCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIFNwcml0ZVN5bWJvbCA9IGZ1bmN0aW9uIFNwcml0ZVN5bWJvbChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgdmlld0JveCA9IHJlZi52aWV3Qm94O1xuICB2YXIgY29udGVudCA9IHJlZi5jb250ZW50O1xuXG4gIHRoaXMuaWQgPSBpZDtcbiAgdGhpcy52aWV3Qm94ID0gdmlld0JveDtcbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAoKSB7XG4gIHJldHVybiB0aGlzLmNvbnRlbnQ7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCk7XG59O1xuXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBbJ2lkJywgJ3ZpZXdCb3gnLCAnY29udGVudCddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIGRlbGV0ZSB0aGlzJDFbcHJvcF07IH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xudmFyIHBhcnNlID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgdmFyIGhhc0ltcG9ydE5vZGUgPSAhIWRvY3VtZW50LmltcG9ydE5vZGU7XG4gIHZhciBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGNvbnRlbnQsICdpbWFnZS9zdmcreG1sJykuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBGaXggZm9yIGJyb3dzZXIgd2hpY2ggYXJlIHRocm93aW5nIFdyb25nRG9jdW1lbnRFcnJvclxuICAgKiBpZiB5b3UgaW5zZXJ0IGFuIGVsZW1lbnQgd2hpY2ggaXMgbm90IHBhcnQgb2YgdGhlIGRvY3VtZW50XG4gICAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzk4NjUxOS80NjI0NDAzXG4gICAqL1xuICBpZiAoaGFzSW1wb3J0Tm9kZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5pbXBvcnROb2RlKGRvYywgdHJ1ZSk7XG4gIH1cblxuICByZXR1cm4gZG9jO1xufTtcblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuXG5cblxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIGRlZXBtZXJnZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgdW5kZWZpbmVkID09PSAnZnVuY3Rpb24nICYmIHVuZGVmaW5lZC5hbWQpIHtcbiAgICAgICAgdW5kZWZpbmVkKGZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH1cbn0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uICgpIHtcblxuZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsKSB7XG4gICAgdmFyIG5vbk51bGxPYmplY3QgPSB2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG5cbiAgICByZXR1cm4gbm9uTnVsbE9iamVjdFxuICAgICAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgUmVnRXhwXSdcbiAgICAgICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IERhdGVdJ1xufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZUlmTmVjZXNzYXJ5KHZhbHVlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgY2xvbmUgPSBvcHRpb25zQXJndW1lbnQgJiYgb3B0aW9uc0FyZ3VtZW50LmNsb25lID09PSB0cnVlO1xuICAgIHJldHVybiAoY2xvbmUgJiYgaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKSA/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zQXJndW1lbnQpIDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHRhcmdldC5zbGljZSgpO1xuICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbltpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2ldID0gY2xvbmVJZk5lY2Vzc2FyeShlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KGUpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGRlZXBtZXJnZSh0YXJnZXRbaV0sIGUsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmluZGV4T2YoZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuICAgIGlmIChpc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeSh0YXJnZXRba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3Nhcnkoc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnNBcmd1bWVudCB8fCB7IGFycmF5TWVyZ2U6IGRlZmF1bHRBcnJheU1lcmdlIH07XG4gICAgdmFyIGFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cbiAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IGFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkgOiBjbG9uZUlmTmVjZXNzYXJ5KHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSB8fCBhcnJheS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5IHdpdGggYXQgbGVhc3QgdHdvIGVsZW1lbnRzJylcbiAgICB9XG5cbiAgICAvLyB3ZSBhcmUgc3VyZSB0aGVyZSBhcmUgYXQgbGVhc3QgMiB2YWx1ZXMsIHNvIGl0IGlzIHNhZmUgdG8gaGF2ZSBubyBpbml0aWFsIHZhbHVlXG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG4gICAgICAgIHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH0pXG59O1xuXG5yZXR1cm4gZGVlcG1lcmdlXG5cbn0pKTtcbn0pO1xuXG52YXIgbmFtZXNwYWNlc18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xudmFyIG5hbWVzcGFjZXMgPSB7XG4gIHN2Zzoge1xuICAgIG5hbWU6ICd4bWxucycsXG4gICAgdXJpOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG4gIH0sXG4gIHhsaW5rOiB7XG4gICAgbmFtZTogJ3htbG5zOnhsaW5rJyxcbiAgICB1cmk6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJ1xuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBuYW1lc3BhY2VzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59KTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIG9iamVjdFRvQXR0cnNTdHJpbmcgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJzKS5tYXAoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyc1thdHRyXS50b1N0cmluZygpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICByZXR1cm4gKGF0dHIgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKTtcbiAgfSkuam9pbignICcpO1xufTtcblxudmFyIHN2ZyA9IG5hbWVzcGFjZXNfMS5zdmc7XG52YXIgeGxpbmsgPSBuYW1lc3BhY2VzXzEueGxpbms7XG5cbnZhciBkZWZhdWx0QXR0cnMgPSB7fTtcbmRlZmF1bHRBdHRyc1tzdmcubmFtZV0gPSBzdmcudXJpO1xuZGVmYXVsdEF0dHJzW3hsaW5rLm5hbWVdID0geGxpbmsudXJpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGVudF1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cmlidXRlc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIHdyYXBJblN2Z1N0cmluZyA9IGZ1bmN0aW9uIChjb250ZW50LCBhdHRyaWJ1dGVzKSB7XG4gIGlmICggY29udGVudCA9PT0gdm9pZCAwICkgY29udGVudCA9ICcnO1xuXG4gIHZhciBhdHRycyA9IGRlZXBtZXJnZShkZWZhdWx0QXR0cnMsIGF0dHJpYnV0ZXMgfHwge30pO1xuICB2YXIgYXR0cnNSZW5kZXJlZCA9IG9iamVjdFRvQXR0cnNTdHJpbmcoYXR0cnMpO1xuICByZXR1cm4gKFwiPHN2ZyBcIiArIGF0dHJzUmVuZGVyZWQgKyBcIj5cIiArIGNvbnRlbnQgKyBcIjwvc3ZnPlwiKTtcbn07XG5cbnZhciBCcm93c2VyU3ByaXRlU3ltYm9sID0gKGZ1bmN0aW9uIChTcHJpdGVTeW1ib2wkJDEpIHtcbiAgZnVuY3Rpb24gQnJvd3NlclNwcml0ZVN5bWJvbCAoKSB7XG4gICAgU3ByaXRlU3ltYm9sJCQxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBpZiAoIFNwcml0ZVN5bWJvbCQkMSApIEJyb3dzZXJTcHJpdGVTeW1ib2wuX19wcm90b19fID0gU3ByaXRlU3ltYm9sJCQxO1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNwcml0ZVN5bWJvbCQkMSAmJiBTcHJpdGVTeW1ib2wkJDEucHJvdG90eXBlICk7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQnJvd3NlclNwcml0ZVN5bWJvbDtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpc01vdW50ZWQ6IHt9IH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAgICogQHJldHVybiB7QnJvd3NlclNwcml0ZVN5bWJvbH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wuY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSA9IGZ1bmN0aW9uIGNyZWF0ZUZyb21FeGlzdGluZ05vZGUgKG5vZGUpIHtcbiAgICByZXR1cm4gbmV3IEJyb3dzZXJTcHJpdGVTeW1ib2woe1xuICAgICAgaWQ6IG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpLFxuICAgICAgdmlld0JveDogbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKSxcbiAgICAgIGNvbnRlbnQ6IG5vZGUub3V0ZXJIVE1MXG4gICAgfSk7XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgfVxuICAgIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSB0YXJnZXRcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gbW91bnQgKHRhcmdldCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRUYXJnZXQgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICB2YXIgbm9kZSA9IHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcblxuICAgIG1vdW50VGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBjb250ZW50ID0gdGhpcy5zdHJpbmdpZnkoKTtcbiAgICByZXR1cm4gcGFyc2Uod3JhcEluU3ZnU3RyaW5nKGNvbnRlbnQpKS5jaGlsZE5vZGVzWzBdO1xuICB9O1xuXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnVubW91bnQgPSBmdW5jdGlvbiB1bm1vdW50ICgpIHtcbiAgICB0aGlzLm5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgcmV0dXJuIEJyb3dzZXJTcHJpdGVTeW1ib2w7XG59KFNwcml0ZVN5bWJvbCkpO1xuXG5yZXR1cm4gQnJvd3NlclNwcml0ZVN5bWJvbDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qcyIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLWRyaWJibGVcIixcbiAgXCJ1c2VcIjogXCJpY29uLWRyaWJibGUtdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDIyIDIyXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjIgMjJcXFwiIGlkPVxcXCJpY29uLWRyaWJibGVcXFwiPjxwYXRoIGQ9XFxcIk0yMC4zNjMgNS41OWExMC41ODcgMTAuNTg3IDAgMCAwLTMuODY5LTMuODdDMTQuODY1Ljc3IDEzLjA4Ny4yOTYgMTEuMTU4LjI5NiA5LjIyOC4yOTUgNy40NS43NyA1LjgyIDEuNzJBMTAuNTg0IDEwLjU4NCAwIDAgMCAxLjk1IDUuNTlDMS4wMDIgNy4yMTkuNTI2IDguOTk4LjUyNiAxMC45MjdjMCAxLjkyOC40NzYgMy43MDcgMS40MjYgNS4zMzZhMTAuNTg3IDEwLjU4NyAwIDAgMCAzLjg3IDMuODdjMS42MjkuOTUgMy40MDcgMS40MjUgNS4zMzYgMS40MjUgMS45MyAwIDMuNzA4LS40NzUgNS4zMzctMS40MjZhMTAuNTg0IDEwLjU4NCAwIDAgMCAzLjg3LTMuODY5Yy45NS0xLjYyOSAxLjQyNS0zLjQwOCAxLjQyNS01LjMzNiAwLTEuOTMtLjQ3NS0zLjcwOC0xLjQyNi01LjMzN3ptLTkuMjA2LTMuNzQ1YzIuMjg5IDAgNC4yODcuNzU3IDUuOTk0IDIuMjdsLS4xNzMuMjQzYy0uMDY5LjA5Ny0uMjQyLjI4My0uNTE5LjU2LS4yNzYuMjc3LS41NzkuNTQtLjkwNi43OS0uMzI4LjI0OS0uNzczLjUzMi0xLjMzNi44NWExMi44NSAxMi44NSAwIDAgMS0xLjguODM5Yy0xLjA2MS0xLjk1Ny0yLjE5Ni0zLjcyLTMuNDA1LTUuMjg5YTkuMTU4IDkuMTU4IDAgMCAxIDIuMTQ1LS4yNjN6TTQuMDQyIDUuMjkyYTguOTU5IDguOTU5IDAgMCAxIDMuMjQtMi41NzVjMS4xNDQgMS41MjMgMi4yNyAzLjI2NyAzLjM3NyA1LjIzM0EzMi44NDIgMzIuODQyIDAgMCAxIDIuMjcgOS4wNThhOC45NzUgOC45NzUgMCAwIDEgMS43NzItMy43NjZ6bS0xLjM1NyA4LjkwOWE4LjkwOCA4LjkwOCAwIDAgMS0uNjA5LTMuMjc0YzAtLjEzLjAwNS0uMjI3LjAxNC0uMjkxIDMuMzQgMCA2LjQ0Ny0uNDMgOS4zMTctMS4yODguMjk1LjU3My41NCAxLjA4NS43MzMgMS41MzdhMS4xMiAxLjEyIDAgMCAxLS4xOC4wNjIgOC42NCA4LjY0IDAgMCAxLS4xOC4wNDlsLS41MTIuMThjLS4zNS4xMjktLjgxLjM1LTEuMzc4LjY2NC0uNTY3LjMxNC0xLjE3LjY4OC0xLjgwNiAxLjEyMi0uNjM3LjQzNC0xLjI5NCAxLjAwOC0xLjk3MyAxLjcyNGExMS42MDMgMTEuNjAzIDAgMCAwLTEuNzEgMi4zMDQgOS4wOTIgOS4wOTIgMCAwIDEtMS43MTYtMi43OXptOC40NzIgNS44MDdjLTIuMTYgMC00LjA4OC0uNjkyLTUuNzg2LTIuMDc2bC4yMDcuMTUyYy4zMjMtLjcxMS43OTktMS4zOTQgMS40MjYtMi4wNS42MjgtLjY1NCAxLjIzMi0xLjE4MyAxLjgxNC0xLjU4NGExNy44NyAxNy44NyAwIDAgMSAxLjg5Ni0xLjEzNmMuNjgzLS4zNTUgMS4xNS0uNTgxIDEuMzk5LS42NzguMjQ5LS4wOTcuNDQ3LS4xNzMuNTk1LS4yMjhsLjAyNy0uMDE0aC4wMjhjLjkwNCAyLjM3MiAxLjU1IDQuNjcgMS45MzggNi44OTRhOS4wNzcgOS4wNzcgMCAwIDEtMy41NDQuNzJ6bTcuNjQyLTQuMTc0YTkuMDcyIDkuMDcyIDAgMCAxLTIuNTYgMi42MjQgMzkuMDA0IDM5LjAwNCAwIDAgMC0xLjc3My02LjQ5M2MxLjgzNy0uMjg2IDMuNzI0LS4xNTIgNS42NjIuNDAxYTguOTU5IDguOTU5IDAgMCAxLTEuMzI5IDMuNDY4em0xLjMwMS01LjAzMmMtLjA5Mi0uMDE4LS4yMDgtLjA0LS4zNDYtLjA2MmwtLjUwNS0uMDgzYy0uMTk5LS4wMzMtLjQyLS4wNjItLjY2NS0uMDlhMjIuODIgMjIuODIgMCAwIDAtMi42MjQtLjE1MmMtLjMyMiAwLS42NjIuMDA5LTEuMDE3LjAyNy0uMzU1LjAxOC0uNjk5LjA1MS0xLjAzLjA5N2ExLjY0IDEuNjQgMCAwIDEtLjEwNS0uMjI4IDQuNzg3IDQuNzg3IDAgMCAxLS4wOS0uMjQzIDkxLjg5IDkxLjg5IDAgMCAwLS42MDktMS4zMTUgMTQuMjA2IDE0LjIwNiAwIDAgMCAxLjgyMS0uODkzIDE0LjE0OSAxNC4xNDkgMCAwIDAgMS4zODQtLjljLjM0Ni0uMjYzLjY3NC0uNTQyLjk4My0uODM3LjMxLS4yOTUuNTEtLjUuNjAyLS42MTYuMDkzLS4xMTYuMTgtLjIyOS4yNjMtLjM0bC4wMTQtLjAxM2MxLjM0OCAxLjY0MyAyLjAzNSAzLjUzNCAyLjA2MyA1LjY3NmwtLjEzOS0uMDI4elxcXCIgZmlsbD1cXFwiIzI2MjcyOVxcXCIgZmlsbC1ydWxlPVxcXCJub256ZXJvXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2xcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2Zy9pY29uLWRyaWJibGUuc3ZnXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2Zy9pY29uLWRyaWJibGUuc3ZnXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLWluc3RhZ3JhbVwiLFxuICBcInVzZVwiOiBcImljb24taW5zdGFncmFtLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAyNCAyNFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIiBpZD1cXFwiaWNvbi1pbnN0YWdyYW1cXFwiPjxwYXRoIGQ9XFxcIk0xNi45NDUuNTY4YTYuMjM4IDYuMjM4IDAgMCAxIDYuMjMxIDYuMjN2MTAuMTE4YTYuMjM4IDYuMjM4IDAgMCAxLTYuMjMxIDYuMjMxSDYuODI4YTYuMjM4IDYuMjM4IDAgMCAxLTYuMjMyLTYuMjNWNi43OThBNi4yMzggNi4yMzggMCAwIDEgNi44MjguNTY4aDEwLjExN3ptNC4yMjggMTYuMzQ4VjYuOGE0LjIzMyA0LjIzMyAwIDAgMC00LjIyOC00LjIyOEg2LjgyOEE0LjIzMyA0LjIzMyAwIDAgMCAyLjYgNi43OTl2MTAuMTE3YTQuMjMzIDQuMjMzIDAgMCAwIDQuMjI4IDQuMjI4aDEwLjExN2E0LjIzMyA0LjIzMyAwIDAgMCA0LjIyOC00LjIyOHpNMTEuODg2IDYuMDRhNS44MjUgNS44MjUgMCAwIDEgNS44MTkgNS44MTggNS44MjUgNS44MjUgMCAwIDEtNS44MTkgNS44MTggNS44MjUgNS44MjUgMCAwIDEtNS44MTgtNS44MTggNS44MjUgNS44MjUgMCAwIDEgNS44MTgtNS44MTh6bTAgOS42MzJhMy44MiAzLjgyIDAgMCAwIDMuODE1LTMuODE0IDMuODIgMy44MiAwIDAgMC0zLjgxNS0zLjgxNSAzLjgyIDMuODIgMCAwIDAtMy44MTQgMy44MTUgMy44MiAzLjgyIDAgMCAwIDMuODE0IDMuODE0ek0xNy45NSA0LjM0MWMuMzg3IDAgLjc2Ni4xNTYgMS4wMzkuNDMuMjc0LjI3Mi40My42NTIuNDMgMS4wMzkgMCAuMzg2LS4xNTYuNzY1LS40MyAxLjA0LS4yNzQuMjcyLS42NTIuNDMtMS4wNC40M2ExLjQ4IDEuNDggMCAwIDEtMS4wMzctLjQzIDEuNDgxIDEuNDgxIDAgMCAxLS40MzItMS4wNCAxLjQ3NSAxLjQ3NSAwIDAgMSAxLjQ3LTEuNDd6XFxcIiBmaWxsPVxcXCIjMjYyNzI5XFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9yZXNvdXJjZXMvYXNzZXRzL3N0YXRpYy9pbWFnZXMvc3ZnL2ljb24taW5zdGFncmFtLnN2Z1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcvaWNvbi1pbnN0YWdyYW0uc3ZnXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpY29uLWxpbmtlZGluXCIsXG4gIFwidXNlXCI6IFwiaWNvbi1saW5rZWRpbi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMjMgMjNcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMyAyM1xcXCIgaWQ9XFxcImljb24tbGlua2VkaW5cXFwiPjxwYXRoIGQ9XFxcIk0uMjggNy4zNzVoNC44NzN2MTQuNjMzSC4yODFWNy4zNzV6bTIwLjg2NSAxLjMzN2MxLjAyNCAxLjExNyAxLjUzNiAyLjc1MyAxLjUzNiA0LjkxdjguMzg2aC00Ljg1OHYtNy44MjZjMC0xLjAzNC0uMi0xLjg0My0uNTk4LTIuNDI5LS4zOTktLjU4Ni0xLjAyMi0uODc5LTEuODY4LS44NzktLjYyIDAtMS4xNC4xNy0xLjU1OC41MS0uNDE5LjM0LS43My43Ni0uOTM4IDEuMjYyLS4xMDguMjk2LS4xNjIuNjk1LS4xNjIgMS4xOTd2OC4xNjVINy44NGMuMDItMy45MjcuMDMtNy4xMTIuMDMtOS41NTMgMC0yLjQ0Mi0uMDA2LTMuODk4LS4wMTYtNC4zNzFsLS4wMTQtLjcwOWg0Ljg1OHYyLjA4Yy4xODctLjI5NS4zOC0uNTU2LjU3Ni0uNzhhNi4zIDYuMyAwIDAgMSAuODM0LS43NjhjLjM1LS4yNzYuNzc4LS40OSAxLjI4NS0uNjQyYTUuODUyIDUuODUyIDAgMCAxIDEuNjktLjIzYzEuNjg0IDAgMy4wMzguNTYgNC4wNjEgMS42Nzd6TTIuNzQ2LjMzMmMuODE4IDAgMS40NzIuMjM4IDEuOTY0LjcxNi40OTIuNDc3Ljc0NCAxLjA4Ljc1MyAxLjgwOS4wMS43MTgtLjIzOCAxLjMxOS0uNzQ1IDEuOC0uNTA3LjQ4My0xLjE3NC43MjQtMi4wMDEuNzI0aC0uMDNjLS44MDcgMC0xLjQ1Ny0uMjQtMS45NDktLjcyM0MuMjQ2IDQuMTc2IDAgMy41NzUgMCAyLjg1N2MwLS43My4yNTMtMS4zMzIuNzYtMS44MUMxLjI2OC41NyAxLjkzLjMzMyAyLjc0Ni4zMzN6XFxcIiBmaWxsPVxcXCIjMjYyNzI5XFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9yZXNvdXJjZXMvYXNzZXRzL3N0YXRpYy9pbWFnZXMvc3ZnL2ljb24tbGlua2VkaW4uc3ZnXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2Zy9pY29uLWxpbmtlZGluLnN2Z1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiaWNvbi1wb2dvXCIsXG4gIFwidXNlXCI6IFwiaWNvbi1wb2dvLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAyMyAyM1wiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDIzIDIzXFxcIiBpZD1cXFwiaWNvbi1wb2dvXFxcIj48ZyB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSguNzE3IC4yOTUpXFxcIiBmaWxsLXJ1bGU9XFxcIm5vbnplcm9cXFwiIGZpbGw9XFxcIm5vbmVcXFwiPjxwYXRoIGQ9XFxcIk0yMS41ODUgMTAuOTc2YzAtNS44Ni00Ljc1LTEwLjYxLTEwLjYxLTEwLjYxLTUuODYgMC0xMC42MSA0Ljc1LTEwLjYxIDEwLjYxaDIxLjIyelxcXCIgZmlsbD1cXFwiIzI2MjcyOVxcXCIgLz48cGF0aCBkPVxcXCJNMjEuOTUxIDExLjM0MUgwdi0uMzY1QzAgNC45MjQgNC45MjQgMCAxMC45NzYgMCAxNy4wMjggMCAyMS45NSA0LjkyNCAyMS45NSAxMC45NzZ2LjM2NXpNLjczOCAxMC42MWgyMC40NzVDMjEuMDIgNS4xMyAxNi41MDIuNzMyIDEwLjk3Ni43MzIgNS40NDkuNzMyLjkzIDUuMTMuNzM4IDEwLjYxelxcXCIgZmlsbD1cXFwiIzI2MjcyOVxcXCIgLz48cGF0aCBkPVxcXCJNMjEuMTk5IDExLjUySC43NTNjLjM3MyA1LjMyIDQuODA3IDkuNTIxIDEwLjIyMyA5LjUyMSA1LjQxNSAwIDkuODUtNC4yIDEwLjIyMy05LjUyMXpcXFwiIHN0cm9rZT1cXFwiIzI2MjcyOVxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIxLjQ1NVxcXCIgLz48Y2lyY2xlIGZpbGw9XFxcIiNGMUZERkZcXFwiIGN4PVxcXCIxMC45NzZcXFwiIGN5PVxcXCIxMC45NzZcXFwiIHI9XFxcIjQuMDI0XFxcIiAvPjxwYXRoIGQ9XFxcIk0xMC45NzYgMTUuMzY2Yy0yLjQyMSAwLTQuMzktMS45Ny00LjM5LTQuMzkgMC0yLjQyMSAxLjk2OS00LjM5IDQuMzktNC4zOSAyLjQyIDAgNC4zOSAxLjk2OSA0LjM5IDQuMzkgMCAyLjQyLTEuOTcgNC4zOS00LjM5IDQuMzl6bTAtOC4wNDlhMy42NjMgMy42NjMgMCAwIDAtMy42NTkgMy42NTkgMy42NjMgMy42NjMgMCAwIDAgMy42NTkgMy42NTggMy42NjMgMy42NjMgMCAwIDAgMy42NTgtMy42NTggMy42NjMgMy42NjMgMCAwIDAtMy42NTgtMy42NTl6XFxcIiBzdHJva2U9XFxcIiMyNjI3MjlcXFwiIHN0cm9rZS13aWR0aD1cXFwiLjcyN1xcXCIgZmlsbD1cXFwiIzI2MjcyOVxcXCIgLz48L2c+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9yZXNvdXJjZXMvYXNzZXRzL3N0YXRpYy9pbWFnZXMvc3ZnL2ljb24tcG9nby5zdmdcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9yZXNvdXJjZXMvYXNzZXRzL3N0YXRpYy9pbWFnZXMvc3ZnL2ljb24tcG9nby5zdmdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImxpbmVcIixcbiAgXCJ1c2VcIjogXCJsaW5lLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAyMCA0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB4bWxuczp4bGluaz1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1xcXCIgeG1sbnM6ZXY9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDEveG1sLWV2ZW50c1xcXCIgdmlld0JveD1cXFwiMCAwIDIwIDRcXFwiIGlkPVxcXCJsaW5lXFxcIj48c3R5bGUgdHlwZT1cXFwidGV4dC9jc3NcXFwiPiNsaW5lIC5zcXVpZ2dsZXthbmltYXRpb246c2hpZnQgLjNzIGxpbmVhciBpbmZpbml0ZTt9QGtleWZyYW1lcyBzaGlmdCB7ZnJvbSB7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7fXRvIHt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7fX08L3N0eWxlPjxwYXRoIGZpbGw9XFxcIm5vbmVcXFwiIHN0cm9rZT1cXFwiJTIzMjYyNzI5XFxcIiBzdHJva2Utd2lkdGg9XFxcIjJcXFwiIGNsYXNzPVxcXCJzcXVpZ2dsZVxcXCIgZD1cXFwiTTAsMy41IGMgNSwwLDUsLTMsMTAsLTMgcyA1LDMsMTAsMyBjIDUsMCw1LC0zLDEwLC0zIHMgNSwzLDEwLDNcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9yZXNvdXJjZXMvYXNzZXRzL3N0YXRpYy9pbWFnZXMvc3ZnL2xpbmUuc3ZnXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2Zy9saW5lLnN2Z1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuQnJvd3NlclNwcml0ZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuXG5cblxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIGRlZXBtZXJnZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgdW5kZWZpbmVkID09PSAnZnVuY3Rpb24nICYmIHVuZGVmaW5lZC5hbWQpIHtcbiAgICAgICAgdW5kZWZpbmVkKGZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH1cbn0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uICgpIHtcblxuZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsKSB7XG4gICAgdmFyIG5vbk51bGxPYmplY3QgPSB2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG5cbiAgICByZXR1cm4gbm9uTnVsbE9iamVjdFxuICAgICAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgUmVnRXhwXSdcbiAgICAgICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IERhdGVdJ1xufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZUlmTmVjZXNzYXJ5KHZhbHVlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgY2xvbmUgPSBvcHRpb25zQXJndW1lbnQgJiYgb3B0aW9uc0FyZ3VtZW50LmNsb25lID09PSB0cnVlO1xuICAgIHJldHVybiAoY2xvbmUgJiYgaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKSA/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zQXJndW1lbnQpIDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHRhcmdldC5zbGljZSgpO1xuICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbltpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2ldID0gY2xvbmVJZk5lY2Vzc2FyeShlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KGUpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGRlZXBtZXJnZSh0YXJnZXRbaV0sIGUsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmluZGV4T2YoZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuICAgIGlmIChpc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeSh0YXJnZXRba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3Nhcnkoc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnNBcmd1bWVudCB8fCB7IGFycmF5TWVyZ2U6IGRlZmF1bHRBcnJheU1lcmdlIH07XG4gICAgdmFyIGFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cbiAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IGFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkgOiBjbG9uZUlmTmVjZXNzYXJ5KHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSB8fCBhcnJheS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5IHdpdGggYXQgbGVhc3QgdHdvIGVsZW1lbnRzJylcbiAgICB9XG5cbiAgICAvLyB3ZSBhcmUgc3VyZSB0aGVyZSBhcmUgYXQgbGVhc3QgMiB2YWx1ZXMsIHNvIGl0IGlzIHNhZmUgdG8gaGF2ZSBubyBpbml0aWFsIHZhbHVlXG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG4gICAgICAgIHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH0pXG59O1xuXG5yZXR1cm4gZGVlcG1lcmdlXG5cbn0pKTtcbn0pO1xuXG4vLyAgICAgIFxuLy8gQW4gZXZlbnQgaGFuZGxlciBjYW4gdGFrZSBhbiBvcHRpb25hbCBldmVudCBhcmd1bWVudFxuLy8gYW5kIHNob3VsZCBub3QgcmV0dXJuIGEgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuLy8gQW4gYXJyYXkgb2YgYWxsIGN1cnJlbnRseSByZWdpc3RlcmVkIGV2ZW50IGhhbmRsZXJzIGZvciBhIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4vLyBBIG1hcCBvZiBldmVudCB0eXBlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBldmVudCBoYW5kbGVycy5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgXG5cbi8qKiBNaXR0OiBUaW55ICh+MjAwYikgZnVuY3Rpb25hbCBldmVudCBlbWl0dGVyIC8gcHVic3ViLlxuICogIEBuYW1lIG1pdHRcbiAqICBAcmV0dXJucyB7TWl0dH1cbiAqL1xuZnVuY3Rpb24gbWl0dChhbGwgICAgICAgICAgICAgICAgICkge1xuXHRhbGwgPSBhbGwgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuXHRyZXR1cm4ge1xuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVyIGFuIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBnaXZlbiB0eXBlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtICB7U3RyaW5nfSB0eXBlXHRUeXBlIG9mIGV2ZW50IHRvIGxpc3RlbiBmb3IsIG9yIGBcIipcImAgZm9yIGFsbCBldmVudHNcblx0XHQgKiBAcGFyYW0gIHtGdW5jdGlvbn0gaGFuZGxlciBGdW5jdGlvbiB0byBjYWxsIGluIHJlc3BvbnNlIHRvIGdpdmVuIGV2ZW50XG5cdFx0ICogQG1lbWJlck9mIG1pdHRcblx0XHQgKi9cblx0XHRvbjogZnVuY3Rpb24gb24odHlwZSAgICAgICAgLCBoYW5kbGVyICAgICAgICAgICAgICApIHtcblx0XHRcdChhbGxbdHlwZV0gfHwgKGFsbFt0eXBlXSA9IFtdKSkucHVzaChoYW5kbGVyKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBnaXZlbiB0eXBlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtICB7U3RyaW5nfSB0eXBlXHRUeXBlIG9mIGV2ZW50IHRvIHVucmVnaXN0ZXIgYGhhbmRsZXJgIGZyb20sIG9yIGBcIipcImBcblx0XHQgKiBAcGFyYW0gIHtGdW5jdGlvbn0gaGFuZGxlciBIYW5kbGVyIGZ1bmN0aW9uIHRvIHJlbW92ZVxuXHRcdCAqIEBtZW1iZXJPZiBtaXR0XG5cdFx0ICovXG5cdFx0b2ZmOiBmdW5jdGlvbiBvZmYodHlwZSAgICAgICAgLCBoYW5kbGVyICAgICAgICAgICAgICApIHtcblx0XHRcdGlmIChhbGxbdHlwZV0pIHtcblx0XHRcdFx0YWxsW3R5cGVdLnNwbGljZShhbGxbdHlwZV0uaW5kZXhPZihoYW5kbGVyKSA+Pj4gMCwgMSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEludm9rZSBhbGwgaGFuZGxlcnMgZm9yIHRoZSBnaXZlbiB0eXBlLlxuXHRcdCAqIElmIHByZXNlbnQsIGBcIipcImAgaGFuZGxlcnMgYXJlIGludm9rZWQgYWZ0ZXIgdHlwZS1tYXRjaGVkIGhhbmRsZXJzLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgIFRoZSBldmVudCB0eXBlIHRvIGludm9rZVxuXHRcdCAqIEBwYXJhbSB7QW55fSBbZXZ0XSAgQW55IHZhbHVlIChvYmplY3QgaXMgcmVjb21tZW5kZWQgYW5kIHBvd2VyZnVsKSwgcGFzc2VkIHRvIGVhY2ggaGFuZGxlclxuXHRcdCAqIEBtZW1iZXJvZiBtaXR0XG5cdFx0ICovXG5cdFx0ZW1pdDogZnVuY3Rpb24gZW1pdCh0eXBlICAgICAgICAsIGV2dCAgICAgKSB7XG5cdFx0XHQoYWxsW3R5cGVdIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgaGFuZGxlcihldnQpOyB9KTtcblx0XHRcdChhbGxbJyonXSB8fCBbXSkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IGhhbmRsZXIodHlwZSwgZXZ0KTsgfSk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgbmFtZXNwYWNlc18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xudmFyIG5hbWVzcGFjZXMgPSB7XG4gIHN2Zzoge1xuICAgIG5hbWU6ICd4bWxucycsXG4gICAgdXJpOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG4gIH0sXG4gIHhsaW5rOiB7XG4gICAgbmFtZTogJ3htbG5zOnhsaW5rJyxcbiAgICB1cmk6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJ1xuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBuYW1lc3BhY2VzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59KTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIG9iamVjdFRvQXR0cnNTdHJpbmcgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJzKS5tYXAoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyc1thdHRyXS50b1N0cmluZygpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICByZXR1cm4gKGF0dHIgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKTtcbiAgfSkuam9pbignICcpO1xufTtcblxudmFyIHN2ZyA9IG5hbWVzcGFjZXNfMS5zdmc7XG52YXIgeGxpbmsgPSBuYW1lc3BhY2VzXzEueGxpbms7XG5cbnZhciBkZWZhdWx0QXR0cnMgPSB7fTtcbmRlZmF1bHRBdHRyc1tzdmcubmFtZV0gPSBzdmcudXJpO1xuZGVmYXVsdEF0dHJzW3hsaW5rLm5hbWVdID0geGxpbmsudXJpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGVudF1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cmlidXRlc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIHdyYXBJblN2Z1N0cmluZyA9IGZ1bmN0aW9uIChjb250ZW50LCBhdHRyaWJ1dGVzKSB7XG4gIGlmICggY29udGVudCA9PT0gdm9pZCAwICkgY29udGVudCA9ICcnO1xuXG4gIHZhciBhdHRycyA9IGRlZXBtZXJnZShkZWZhdWx0QXR0cnMsIGF0dHJpYnV0ZXMgfHwge30pO1xuICB2YXIgYXR0cnNSZW5kZXJlZCA9IG9iamVjdFRvQXR0cnNTdHJpbmcoYXR0cnMpO1xuICByZXR1cm4gKFwiPHN2ZyBcIiArIGF0dHJzUmVuZGVyZWQgKyBcIj5cIiArIGNvbnRlbnQgKyBcIjwvc3ZnPlwiKTtcbn07XG5cbnZhciBzdmckMSA9IG5hbWVzcGFjZXNfMS5zdmc7XG52YXIgeGxpbmskMSA9IG5hbWVzcGFjZXNfMS54bGluaztcblxudmFyIGRlZmF1bHRDb25maWcgPSB7XG4gIGF0dHJzOiAoIG9iaiA9IHtcbiAgICBzdHlsZTogWydwb3NpdGlvbjogYWJzb2x1dGUnLCAnd2lkdGg6IDAnLCAnaGVpZ2h0OiAwJ10uam9pbignOyAnKVxuICB9LCBvYmpbc3ZnJDEubmFtZV0gPSBzdmckMS51cmksIG9ialt4bGluayQxLm5hbWVdID0geGxpbmskMS51cmksIG9iaiApXG59O1xudmFyIG9iajtcblxudmFyIFNwcml0ZSA9IGZ1bmN0aW9uIFNwcml0ZShjb25maWcpIHtcbiAgdGhpcy5jb25maWcgPSBkZWVwbWVyZ2UoZGVmYXVsdENvbmZpZywgY29uZmlnIHx8IHt9KTtcbiAgdGhpcy5zeW1ib2xzID0gW107XG59O1xuXG4vKipcbiAqIEFkZCBuZXcgc3ltYm9sLiBJZiBzeW1ib2wgd2l0aCB0aGUgc2FtZSBpZCBleGlzdHMgaXQgd2lsbCBiZSByZXBsYWNlZC5cbiAqIEBwYXJhbSB7U3ByaXRlU3ltYm9sfSBzeW1ib2xcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCAtIHN5bWJvbCB3YXMgYWRkZWQsIGBmYWxzZWAgLSByZXBsYWNlZFxuICovXG5TcHJpdGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoc3ltYm9sKSB7XG4gIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBzeW1ib2xzID0gcmVmLnN5bWJvbHM7XG4gIHZhciBleGlzdGluZyA9IHRoaXMuZmluZChzeW1ib2wuaWQpO1xuXG4gIGlmIChleGlzdGluZykge1xuICAgIHN5bWJvbHNbc3ltYm9scy5pbmRleE9mKGV4aXN0aW5nKV0gPSBzeW1ib2w7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3ltYm9scy5wdXNoKHN5bWJvbCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgc3ltYm9sICYgZGVzdHJveSBpdFxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgLSBzeW1ib2wgd2FzIGZvdW5kICYgc3VjY2Vzc2Z1bGx5IGRlc3Ryb3llZCwgYGZhbHNlYCAtIG90aGVyd2lzZVxuICovXG5TcHJpdGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoaWQpIHtcbiAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIHN5bWJvbHMgPSByZWYuc3ltYm9scztcbiAgdmFyIHN5bWJvbCA9IHRoaXMuZmluZChpZCk7XG5cbiAgaWYgKHN5bWJvbCkge1xuICAgIHN5bWJvbHMuc3BsaWNlKHN5bWJvbHMuaW5kZXhPZihzeW1ib2wpLCAxKTtcbiAgICBzeW1ib2wuZGVzdHJveSgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge1Nwcml0ZVN5bWJvbHxudWxsfVxuICovXG5TcHJpdGUucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiBmaW5kIChpZCkge1xuICByZXR1cm4gdGhpcy5zeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5pZCA9PT0gaWQ7IH0pWzBdIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGlkKSB7XG4gIHJldHVybiB0aGlzLmZpbmQoaWQpICE9PSBudWxsO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZS5wcm90b3R5cGUuc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5ICgpIHtcbiAgdmFyIHJlZiA9IHRoaXMuY29uZmlnO1xuICAgIHZhciBhdHRycyA9IHJlZi5hdHRycztcbiAgdmFyIHN0cmluZ2lmaWVkU3ltYm9scyA9IHRoaXMuc3ltYm9scy5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RyaW5naWZ5KCk7IH0pLmpvaW4oJycpO1xuICByZXR1cm4gd3JhcEluU3ZnU3RyaW5nKHN0cmluZ2lmaWVkU3ltYm9scywgYXR0cnMpO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpO1xufTtcblxuU3ByaXRlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHRoaXMuc3ltYm9scy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmRlc3Ryb3koKTsgfSk7XG59O1xuXG52YXIgU3ByaXRlU3ltYm9sID0gZnVuY3Rpb24gU3ByaXRlU3ltYm9sKHJlZikge1xuICB2YXIgaWQgPSByZWYuaWQ7XG4gIHZhciB2aWV3Qm94ID0gcmVmLnZpZXdCb3g7XG4gIHZhciBjb250ZW50ID0gcmVmLmNvbnRlbnQ7XG5cbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnZpZXdCb3ggPSB2aWV3Qm94O1xuICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5ICgpIHtcbiAgcmV0dXJuIHRoaXMuY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKTtcbn07XG5cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIFsnaWQnLCAndmlld0JveCcsICdjb250ZW50J10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gZGVsZXRlIHRoaXMkMVtwcm9wXTsgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG52YXIgcGFyc2UgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICB2YXIgaGFzSW1wb3J0Tm9kZSA9ICEhZG9jdW1lbnQuaW1wb3J0Tm9kZTtcbiAgdmFyIGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoY29udGVudCwgJ2ltYWdlL3N2Zyt4bWwnKS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEZpeCBmb3IgYnJvd3NlciB3aGljaCBhcmUgdGhyb3dpbmcgV3JvbmdEb2N1bWVudEVycm9yXG4gICAqIGlmIHlvdSBpbnNlcnQgYW4gZWxlbWVudCB3aGljaCBpcyBub3QgcGFydCBvZiB0aGUgZG9jdW1lbnRcbiAgICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83OTg2NTE5LzQ2MjQ0MDNcbiAgICovXG4gIGlmIChoYXNJbXBvcnROb2RlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmltcG9ydE5vZGUoZG9jLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBkb2M7XG59O1xuXG52YXIgQnJvd3NlclNwcml0ZVN5bWJvbCA9IChmdW5jdGlvbiAoU3ByaXRlU3ltYm9sJCQxKSB7XG4gIGZ1bmN0aW9uIEJyb3dzZXJTcHJpdGVTeW1ib2wgKCkge1xuICAgIFNwcml0ZVN5bWJvbCQkMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgaWYgKCBTcHJpdGVTeW1ib2wkJDEgKSBCcm93c2VyU3ByaXRlU3ltYm9sLl9fcHJvdG9fXyA9IFNwcml0ZVN5bWJvbCQkMTtcbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTcHJpdGVTeW1ib2wkJDEgJiYgU3ByaXRlU3ltYm9sJCQxLnByb3RvdHlwZSApO1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJyb3dzZXJTcHJpdGVTeW1ib2w7XG5cbiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgaXNNb3VudGVkOiB7fSB9O1xuXG4gIHByb3RvdHlwZUFjY2Vzc29ycy5pc01vdW50ZWQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXRoaXMubm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gICAqIEByZXR1cm4ge0Jyb3dzZXJTcHJpdGVTeW1ib2x9XG4gICAqL1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLmNyZWF0ZUZyb21FeGlzdGluZ05vZGUgPSBmdW5jdGlvbiBjcmVhdGVGcm9tRXhpc3RpbmdOb2RlIChub2RlKSB7XG4gICAgcmV0dXJuIG5ldyBCcm93c2VyU3ByaXRlU3ltYm9sKHtcbiAgICAgIGlkOiBub2RlLmdldEF0dHJpYnV0ZSgnaWQnKSxcbiAgICAgIHZpZXdCb3g6IG5vZGUuZ2V0QXR0cmlidXRlKCd2aWV3Qm94JyksXG4gICAgICBjb250ZW50OiBub2RlLm91dGVySFRNTFxuICAgIH0pO1xuICB9O1xuXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICBpZiAodGhpcy5pc01vdW50ZWQpIHtcbiAgICAgIHRoaXMudW5tb3VudCgpO1xuICAgIH1cbiAgICBTcHJpdGVTeW1ib2wkJDEucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fHN0cmluZ30gdGFyZ2V0XG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5tb3VudCA9IGZ1bmN0aW9uIG1vdW50ICh0YXJnZXQpIHtcbiAgICBpZiAodGhpcy5pc01vdW50ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGU7XG4gICAgfVxuXG4gICAgdmFyIG1vdW50VGFyZ2V0ID0gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG5cbiAgICBtb3VudFRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgY29udGVudCA9IHRoaXMuc3RyaW5naWZ5KCk7XG4gICAgcmV0dXJuIHBhcnNlKHdyYXBJblN2Z1N0cmluZyhjb250ZW50KSkuY2hpbGROb2Rlc1swXTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS51bm1vdW50ID0gZnVuY3Rpb24gdW5tb3VudCAoKSB7XG4gICAgdGhpcy5ub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gIHJldHVybiBCcm93c2VyU3ByaXRlU3ltYm9sO1xufShTcHJpdGVTeW1ib2wpKTtcblxudmFyIGRlZmF1bHRDb25maWckMSA9IHtcbiAgLyoqXG4gICAqIFNob3VsZCBmb2xsb3dpbmcgb3B0aW9ucyBiZSBhdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZWQ6XG4gICAqIC0gYHN5bmNVcmxzV2l0aEJhc2VUYWdgXG4gICAqIC0gYGxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXJgXG4gICAqIC0gYG1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sYFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGF1dG9Db25maWd1cmU6IHRydWUsXG5cbiAgLyoqXG4gICAqIERlZmF1bHQgbW91bnRpbmcgc2VsZWN0b3JcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIG1vdW50VG86ICdib2R5JyxcblxuICAvKipcbiAgICogRml4IGRpc2FwcGVhcmluZyBTVkcgZWxlbWVudHMgd2hlbiA8YmFzZSBocmVmPiBleGlzdHMuXG4gICAqIEV4ZWN1dGVzIHdoZW4gc3ByaXRlIG1vdW50ZWQuXG4gICAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTgyNjUzMzYvNzk2MTUyXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2V2ZXJkaW1lbnNpb24vYW5ndWxhci1zdmctYmFzZS1maXhcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy84OTM0I2lzc3VlY29tbWVudC01NjU2ODQ2NlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHN5bmNVcmxzV2l0aEJhc2VUYWc6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG91bGQgc3ByaXRlIGxpc3RlbiBjdXN0b20gbG9jYXRpb24gY2hhbmdlIGV2ZW50XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgbGlzdGVuTG9jYXRpb25DaGFuZ2VFdmVudDogdHJ1ZSxcblxuICAvKipcbiAgICogQ3VzdG9tIHdpbmRvdyBldmVudCBuYW1lIHdoaWNoIHNob3VsZCBiZSBlbWl0dGVkIHRvIHVwZGF0ZSBzcHJpdGUgdXJsc1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgbG9jYXRpb25DaGFuZ2VFdmVudDogJ2xvY2F0aW9uQ2hhbmdlJyxcblxuICAvKipcbiAgICogRW1pdCBsb2NhdGlvbiBjaGFuZ2UgZXZlbnQgaW4gQW5ndWxhciBhdXRvbWF0aWNhbGx5XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlcjogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNlbGVjdG9yIHRvIGZpbmQgc3ltYm9scyB1c2FnZXMgd2hlbiB1cGRhdGluZyBzcHJpdGUgdXJsc1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdXNhZ2VzVG9VcGRhdGU6ICd1c2VbKnxocmVmXScsXG5cbiAgLyoqXG4gICAqIEZpeCBGaXJlZm94IGJ1ZyB3aGVuIGdyYWRpZW50cyBhbmQgcGF0dGVybnMgZG9uJ3Qgd29yayBpZiB0aGV5IGFyZSB3aXRoaW4gYSBzeW1ib2wuXG4gICAqIEV4ZWN1dGVzIHdoZW4gc3ByaXRlIGlzIHJlbmRlcmVkLCBidXQgbm90IG1vdW50ZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MzA2Njc0XG4gICAqIEBzZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MzUzNTc1XG4gICAqIEBzZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTIzNTM2NFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIG1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sOiBmYWxzZVxufTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IGFycmF5TGlrZVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbnZhciBhcnJheUZyb20gPSBmdW5jdGlvbiAoYXJyYXlMaWtlKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnJheUxpa2UsIDApO1xufTtcblxudmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcblxudmFyIGJyb3dzZXIgPSB7XG4gIGlzQ2hyb21lOiAvY2hyb21lL2kudGVzdCh1YSksXG4gIGlzRmlyZWZveDogL2ZpcmVmb3gvaS50ZXN0KHVhKSxcblxuICAvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM3NTAzKHY9dnMuODUpLmFzcHhcbiAgaXNJRTogL21zaWUvaS50ZXN0KHVhKSB8fCAvdHJpZGVudC9pLnRlc3QodWEpLFxuICBpc0VkZ2U6IC9lZGdlL2kudGVzdCh1YSlcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Kn0gZGF0YVxuICovXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICBldmVudC5pbml0Q3VzdG9tRXZlbnQobmFtZSwgZmFsc2UsIGZhbHNlLCBkYXRhKTtcbiAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufTtcblxuLyoqXG4gKiBJRSBkb2Vzbid0IGV2YWx1YXRlIDxzdHlsZT4gdGFncyBpbiBTVkdzIHRoYXQgYXJlIGR5bmFtaWNhbGx5IGFkZGVkIHRvIHRoZSBwYWdlLlxuICogVGhpcyB0cmljayB3aWxsIHRyaWdnZXIgSUUgdG8gcmVhZCBhbmQgdXNlIGFueSBleGlzdGluZyBTVkcgPHN0eWxlPiB0YWdzLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vaWNvbmljL1NWR0luamVjdG9yL2lzc3Vlcy8yM1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMDg5ODQ2OS9cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRE9NIEVsZW1lbnQgdG8gc2VhcmNoIDxzdHlsZT4gdGFncyBpblxuICogQHJldHVybiB7QXJyYXk8SFRNTFN0eWxlRWxlbWVudD59XG4gKi9cbnZhciBldmFsU3R5bGVzSUVXb3JrYXJvdW5kID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIHVwZGF0ZWROb2RlcyA9IFtdO1xuXG4gIGFycmF5RnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJykpXG4gICAgLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBzdHlsZS50ZXh0Q29udGVudCArPSAnJztcbiAgICAgIHVwZGF0ZWROb2Rlcy5wdXNoKHN0eWxlKTtcbiAgICB9KTtcblxuICByZXR1cm4gdXBkYXRlZE5vZGVzO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VybF0gSWYgbm90IHByb3ZpZGVkIC0gY3VycmVudCBVUkwgd2lsbCBiZSB1c2VkXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBnZXRVcmxXaXRob3V0RnJhZ21lbnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAodXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5zcGxpdCgnIycpWzBdO1xufTtcblxuLyogZ2xvYmFsIGFuZ3VsYXIgKi9cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICovXG52YXIgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZSwgbmV3VXJsLCBvbGRVcmwpIHtcbiAgICAgIGRpc3BhdGNoRXZlbnQoZXZlbnROYW1lLCB7IG9sZFVybDogb2xkVXJsLCBuZXdVcmw6IG5ld1VybCB9KTtcbiAgICB9KTtcbiAgfV0pO1xufTtcblxudmFyIGRlZmF1bHRTZWxlY3RvciA9ICdsaW5lYXJHcmFkaWVudCwgcmFkaWFsR3JhZGllbnQsIHBhdHRlcm4nO1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3ZnXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yXVxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xudmFyIG1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sID0gZnVuY3Rpb24gKHN2Zywgc2VsZWN0b3IpIHtcbiAgaWYgKCBzZWxlY3RvciA9PT0gdm9pZCAwICkgc2VsZWN0b3IgPSBkZWZhdWx0U2VsZWN0b3I7XG5cbiAgYXJyYXlGcm9tKHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdzeW1ib2wnKSkuZm9yRWFjaChmdW5jdGlvbiAoc3ltYm9sKSB7XG4gICAgYXJyYXlGcm9tKHN5bWJvbC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgc3ltYm9sLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIHN5bWJvbCk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3ZnO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGVMaXN0fSBub2Rlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW21hdGNoZXJdXG4gKiBAcmV0dXJuIHtBdHRyW119XG4gKi9cbmZ1bmN0aW9uIHNlbGVjdEF0dHJpYnV0ZXMobm9kZXMsIG1hdGNoZXIpIHtcbiAgdmFyIGF0dHJzID0gYXJyYXlGcm9tKG5vZGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbm9kZSkge1xuICAgIGlmICghbm9kZS5hdHRyaWJ1dGVzKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHZhciBhcnJheWZpZWQgPSBhcnJheUZyb20obm9kZS5hdHRyaWJ1dGVzKTtcbiAgICB2YXIgbWF0Y2hlZCA9IG1hdGNoZXIgPyBhcnJheWZpZWQuZmlsdGVyKG1hdGNoZXIpIDogYXJyYXlmaWVkO1xuICAgIHJldHVybiBhY2MuY29uY2F0KG1hdGNoZWQpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGF0dHJzO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZUxpc3R8Tm9kZX0gbm9kZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Nsb25lPXRydWVdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblxudmFyIHhMaW5rTlMgPSBuYW1lc3BhY2VzXzEueGxpbmsudXJpO1xudmFyIHhMaW5rQXR0ck5hbWUgPSAneGxpbms6aHJlZic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxudmFyIHNwZWNpYWxVcmxDaGFyc1BhdHRlcm4gPSAvW3t9fFxcXFxcXF5cXFtcXF1gXCI8Pl0vZztcblxuZnVuY3Rpb24gZW5jb2Rlcih1cmwpIHtcbiAgcmV0dXJuIHVybC5yZXBsYWNlKHNwZWNpYWxVcmxDaGFyc1BhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiAoXCIlXCIgKyAobWF0Y2hbMF0uY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVMaXN0fSBub2Rlc1xuICogQHBhcmFtIHtzdHJpbmd9IHN0YXJ0c1dpdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlV2l0aFxuICogQHJldHVybiB7Tm9kZUxpc3R9XG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVJlZmVyZW5jZXMobm9kZXMsIHN0YXJ0c1dpdGgsIHJlcGxhY2VXaXRoKSB7XG4gIGFycmF5RnJvbShub2RlcykuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciBocmVmID0gbm9kZS5nZXRBdHRyaWJ1dGUoeExpbmtBdHRyTmFtZSk7XG4gICAgaWYgKGhyZWYgJiYgaHJlZi5pbmRleE9mKHN0YXJ0c1dpdGgpID09PSAwKSB7XG4gICAgICB2YXIgbmV3VXJsID0gaHJlZi5yZXBsYWNlKHN0YXJ0c1dpdGgsIHJlcGxhY2VXaXRoKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoeExpbmtOUywgeExpbmtBdHRyTmFtZSwgbmV3VXJsKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBub2Rlcztcbn1cblxuLyoqXG4gKiBMaXN0IG9mIFNWRyBhdHRyaWJ1dGVzIHRvIHVwZGF0ZSB1cmwoKSB0YXJnZXQgaW4gdGhlbVxuICovXG52YXIgYXR0TGlzdCA9IFtcbiAgJ2NsaXBQYXRoJyxcbiAgJ2NvbG9yUHJvZmlsZScsXG4gICdzcmMnLFxuICAnY3Vyc29yJyxcbiAgJ2ZpbGwnLFxuICAnZmlsdGVyJyxcbiAgJ21hcmtlcicsXG4gICdtYXJrZXJTdGFydCcsXG4gICdtYXJrZXJNaWQnLFxuICAnbWFya2VyRW5kJyxcbiAgJ21hc2snLFxuICAnc3Ryb2tlJyxcbiAgJ3N0eWxlJ1xuXTtcblxudmFyIGF0dFNlbGVjdG9yID0gYXR0TGlzdC5tYXAoZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuIChcIltcIiArIGF0dHIgKyBcIl1cIik7IH0pLmpvaW4oJywnKTtcblxuLyoqXG4gKiBVcGRhdGUgVVJMcyBpbiBzdmcgaW1hZ2UgKGxpa2UgYGZpbGw9XCJ1cmwoLi4uKVwiYCkgYW5kIHVwZGF0ZSByZWZlcmVuY2luZyBlbGVtZW50c1xuICogQHBhcmFtIHtFbGVtZW50fSBzdmdcbiAqIEBwYXJhbSB7Tm9kZUxpc3R9IHJlZmVyZW5jZXNcbiAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cH0gc3RhcnRzV2l0aFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VXaXRoXG4gKiBAcmV0dXJuIHt2b2lkfVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzcHJpdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdmcuc3ByaXRlJyk7XG4gKiBjb25zdCB1c2FnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd1c2UnKTtcbiAqIHVwZGF0ZVVybHMoc3ByaXRlLCB1c2FnZXMsICcjJywgJ3ByZWZpeCMnKTtcbiAqL1xudmFyIHVwZGF0ZVVybHMgPSBmdW5jdGlvbiAoc3ZnLCByZWZlcmVuY2VzLCBzdGFydHNXaXRoLCByZXBsYWNlV2l0aCkge1xuICB2YXIgc3RhcnRzV2l0aEVuY29kZWQgPSBlbmNvZGVyKHN0YXJ0c1dpdGgpO1xuICB2YXIgcmVwbGFjZVdpdGhFbmNvZGVkID0gZW5jb2RlcihyZXBsYWNlV2l0aCk7XG5cbiAgdmFyIG5vZGVzID0gc3ZnLnF1ZXJ5U2VsZWN0b3JBbGwoYXR0U2VsZWN0b3IpO1xuICB2YXIgYXR0cnMgPSBzZWxlY3RBdHRyaWJ1dGVzKG5vZGVzLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGxvY2FsTmFtZSA9IHJlZi5sb2NhbE5hbWU7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgcmV0dXJuIGF0dExpc3QuaW5kZXhPZihsb2NhbE5hbWUpICE9PSAtMSAmJiB2YWx1ZS5pbmRleE9mKChcInVybChcIiArIHN0YXJ0c1dpdGhFbmNvZGVkKSkgIT09IC0xO1xuICB9KTtcblxuICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiBhdHRyLnZhbHVlID0gYXR0ci52YWx1ZS5yZXBsYWNlKHN0YXJ0c1dpdGhFbmNvZGVkLCByZXBsYWNlV2l0aEVuY29kZWQpOyB9KTtcbiAgdXBkYXRlUmVmZXJlbmNlcyhyZWZlcmVuY2VzLCBzdGFydHNXaXRoRW5jb2RlZCwgcmVwbGFjZVdpdGhFbmNvZGVkKTtcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgZW1pdHRlciBldmVudHNcbiAqIEBlbnVtXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgRXZlbnRzID0ge1xuICBNT1VOVDogJ21vdW50JyxcbiAgU1lNQk9MX01PVU5UOiAnc3ltYm9sX21vdW50J1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGUgPSAoZnVuY3Rpb24gKFNwcml0ZSQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlKGNmZykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIGlmICggY2ZnID09PSB2b2lkIDAgKSBjZmcgPSB7fTtcblxuICAgIFNwcml0ZSQkMS5jYWxsKHRoaXMsIGRlZXBtZXJnZShkZWZhdWx0Q29uZmlnJDEsIGNmZykpO1xuXG4gICAgdmFyIGVtaXR0ZXIgPSBtaXR0KCk7XG4gICAgdGhpcy5fZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5ub2RlID0gbnVsbDtcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBjb25maWcgPSByZWYuY29uZmlnO1xuXG4gICAgaWYgKGNvbmZpZy5hdXRvQ29uZmlndXJlKSB7XG4gICAgICB0aGlzLl9hdXRvQ29uZmlndXJlKGNmZyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5zeW5jVXJsc1dpdGhCYXNlVGFnKSB7XG4gICAgICB2YXIgYmFzZVVybCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdiYXNlJylbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICBlbWl0dGVyLm9uKEV2ZW50cy5NT1VOVCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnVwZGF0ZVVybHMoJyMnLCBiYXNlVXJsKTsgfSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZUxvY2F0aW9uQ2hhbmdlID0gdGhpcy5faGFuZGxlTG9jYXRpb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVMb2NhdGlvbkNoYW5nZSA9IGhhbmRsZUxvY2F0aW9uQ2hhbmdlO1xuXG4gICAgLy8gUHJvdmlkZSB3YXkgdG8gdXBkYXRlIHNwcml0ZSB1cmxzIGV4dGVybmFsbHkgdmlhIGRpc3BhdGNoaW5nIGN1c3RvbSB3aW5kb3cgZXZlbnRcbiAgICBpZiAoY29uZmlnLmxpc3RlbkxvY2F0aW9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50LCBoYW5kbGVMb2NhdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgLy8gRW1pdCBsb2NhdGlvbiBjaGFuZ2UgZXZlbnQgaW4gQW5ndWxhciBhdXRvbWF0aWNhbGx5XG4gICAgaWYgKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyKSB7XG4gICAgICBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBBZnRlciBzcHJpdGUgbW91bnRlZFxuICAgIGVtaXR0ZXIub24oRXZlbnRzLk1PVU5ULCBmdW5jdGlvbiAoc3ByaXRlTm9kZSkge1xuICAgICAgaWYgKGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCkge1xuICAgICAgICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbChzcHJpdGVOb2RlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFmdGVyIHN5bWJvbCBtb3VudGVkIGludG8gc3ByaXRlXG4gICAgZW1pdHRlci5vbihFdmVudHMuU1lNQk9MX01PVU5ULCBmdW5jdGlvbiAoc3ltYm9sTm9kZSkge1xuICAgICAgaWYgKGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCkge1xuICAgICAgICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbChzeW1ib2xOb2RlLnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJvd3Nlci5pc0lFIHx8IGJyb3dzZXIuaXNFZGdlKSB7XG4gICAgICAgIGV2YWxTdHlsZXNJRVdvcmthcm91bmQoc3ltYm9sTm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIFNwcml0ZSQkMSApIEJyb3dzZXJTcHJpdGUuX19wcm90b19fID0gU3ByaXRlJCQxO1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNwcml0ZSQkMSAmJiBTcHJpdGUkJDEucHJvdG90eXBlICk7XG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQnJvd3NlclNwcml0ZTtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpc01vdW50ZWQ6IHt9IH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBwcm90b3R5cGVBY2Nlc3NvcnMuaXNNb3VudGVkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLm5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEF1dG9tYXRpY2FsbHkgY29uZmlndXJlIGZvbGxvd2luZyBvcHRpb25zXG4gICAqIC0gYHN5bmNVcmxzV2l0aEJhc2VUYWdgXG4gICAqIC0gYGxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXJgXG4gICAqIC0gYG1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sYFxuICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5fYXV0b0NvbmZpZ3VyZSA9IGZ1bmN0aW9uIF9hdXRvQ29uZmlndXJlIChjZmcpIHtcbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgY29uZmlnID0gcmVmLmNvbmZpZztcblxuICAgIGlmICh0eXBlb2YgY2ZnLnN5bmNVcmxzV2l0aEJhc2VUYWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWcuc3luY1VybHNXaXRoQmFzZVRhZyA9IHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYmFzZScpWzBdICE9PSAndW5kZWZpbmVkJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNmZy5sb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLmxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXIgPSAnYW5ndWxhcicgaW4gd2luZG93O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2ZnLm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sID0gYnJvd3Nlci5pc0ZpcmVmb3g7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQuZGV0YWlsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudC5kZXRhaWwub2xkVXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudC5kZXRhaWwubmV3VXJsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5faGFuZGxlTG9jYXRpb25DaGFuZ2UgPSBmdW5jdGlvbiBfaGFuZGxlTG9jYXRpb25DaGFuZ2UgKGV2ZW50KSB7XG4gICAgdmFyIHJlZiA9IGV2ZW50LmRldGFpbDtcbiAgICB2YXIgb2xkVXJsID0gcmVmLm9sZFVybDtcbiAgICB2YXIgbmV3VXJsID0gcmVmLm5ld1VybDtcbiAgICB0aGlzLnVwZGF0ZVVybHMob2xkVXJsLCBuZXdVcmwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgbmV3IHN5bWJvbC4gSWYgc3ltYm9sIHdpdGggdGhlIHNhbWUgaWQgZXhpc3RzIGl0IHdpbGwgYmUgcmVwbGFjZWQuXG4gICAqIElmIHNwcml0ZSBhbHJlYWR5IG1vdW50ZWQgLSBgc3ltYm9sLm1vdW50KHNwcml0ZS5ub2RlKWAgd2lsbCBiZSBjYWxsZWQuXG4gICAqIEBmaXJlcyBFdmVudHMjU1lNQk9MX01PVU5UXG4gICAqIEBwYXJhbSB7QnJvd3NlclNwcml0ZVN5bWJvbH0gc3ltYm9sXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCAtIHN5bWJvbCB3YXMgYWRkZWQsIGBmYWxzZWAgLSByZXBsYWNlZFxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChzeW1ib2wpIHtcbiAgICB2YXIgc3ByaXRlID0gdGhpcztcbiAgICB2YXIgaXNOZXdTeW1ib2wgPSBTcHJpdGUkJDEucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMsIHN5bWJvbCk7XG5cbiAgICBpZiAodGhpcy5pc01vdW50ZWQgJiYgaXNOZXdTeW1ib2wpIHtcbiAgICAgIHN5bWJvbC5tb3VudChzcHJpdGUubm9kZSk7XG4gICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoRXZlbnRzLlNZTUJPTF9NT1VOVCwgc3ltYm9sLm5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBpc05ld1N5bWJvbDtcbiAgfTtcblxuICAvKipcbiAgICogQXR0YWNoIHRvIGV4aXN0aW5nIERPTSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR9IHRhcmdldFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fG51bGx9IGF0dGFjaGVkIERPTSBFbGVtZW50LiBudWxsIGlmIG5vZGUgdG8gYXR0YWNoIG5vdCBmb3VuZC5cbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCAodGFyZ2V0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgc3ByaXRlID0gdGhpcztcblxuICAgIGlmIChzcHJpdGUuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gc3ByaXRlLm5vZGU7XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIEVsZW1lbnQgKi9cbiAgICB2YXIgbm9kZSA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHNwcml0ZS5ub2RlID0gbm9kZTtcblxuICAgIC8vIEFscmVhZHkgYWRkZWQgc3ltYm9scyBuZWVkcyB0byBiZSBtb3VudGVkXG4gICAgdGhpcy5zeW1ib2xzLmZvckVhY2goZnVuY3Rpb24gKHN5bWJvbCkge1xuICAgICAgc3ltYm9sLm1vdW50KHNwcml0ZS5ub2RlKTtcbiAgICAgIHRoaXMkMS5fZW1pdHRlci5lbWl0KEV2ZW50cy5TWU1CT0xfTU9VTlQsIHN5bWJvbC5ub2RlKTtcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBzeW1ib2xzIGZyb20gZXhpc3RpbmcgRE9NIG5vZGVzLCBhZGQgYW5kIG1vdW50IHRoZW1cbiAgICBhcnJheUZyb20obm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdzeW1ib2wnKSlcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzeW1ib2xOb2RlKSB7XG4gICAgICAgIHZhciBzeW1ib2wgPSBCcm93c2VyU3ByaXRlU3ltYm9sLmNyZWF0ZUZyb21FeGlzdGluZ05vZGUoc3ltYm9sTm9kZSk7XG4gICAgICAgIHN5bWJvbC5ub2RlID0gc3ltYm9sTm9kZTsgLy8gaGFjayB0byBwcmV2ZW50IHN5bWJvbCBtb3VudGluZyB0byBzcHJpdGUgd2hlbiBhZGRpbmdcbiAgICAgICAgc3ByaXRlLmFkZChzeW1ib2wpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLl9lbWl0dGVyLmVtaXQoRXZlbnRzLk1PVU5ULCBub2RlKTtcblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgY29uZmlnID0gcmVmLmNvbmZpZztcbiAgICB2YXIgc3ltYm9scyA9IHJlZi5zeW1ib2xzO1xuICAgIHZhciBfZW1pdHRlciA9IHJlZi5fZW1pdHRlcjtcblxuICAgIHN5bWJvbHMuZm9yRWFjaChmdW5jdGlvbiAocykgeyByZXR1cm4gcy5kZXN0cm95KCk7IH0pO1xuXG4gICAgX2VtaXR0ZXIub2ZmKCcqJyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoY29uZmlnLmxvY2F0aW9uQ2hhbmdlRXZlbnQsIHRoaXMuX2hhbmRsZUxvY2F0aW9uQ2hhbmdlKTtcblxuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAZmlyZXMgRXZlbnRzI01PVU5UXG4gICAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR9IFt0YXJnZXRdXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZXBlbmQ9ZmFsc2VdXG4gICAqIEByZXR1cm4ge0VsZW1lbnR8bnVsbH0gcmVuZGVyZWQgc3ByaXRlIG5vZGUuIG51bGwgaWYgbW91bnQgbm9kZSBub3QgZm91bmQuXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5tb3VudCA9IGZ1bmN0aW9uIG1vdW50ICh0YXJnZXQsIHByZXBlbmQpIHtcbiAgICBpZiAoIHRhcmdldCA9PT0gdm9pZCAwICkgdGFyZ2V0ID0gdGhpcy5jb25maWcubW91bnRUbztcbiAgICBpZiAoIHByZXBlbmQgPT09IHZvaWQgMCApIHByZXBlbmQgPSBmYWxzZTtcblxuICAgIHZhciBzcHJpdGUgPSB0aGlzO1xuXG4gICAgaWYgKHNwcml0ZS5pc01vdW50ZWQpIHtcbiAgICAgIHJldHVybiBzcHJpdGUubm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnROb2RlID0gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgdmFyIG5vZGUgPSBzcHJpdGUucmVuZGVyKCk7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcblxuICAgIGlmIChwcmVwZW5kICYmIG1vdW50Tm9kZS5jaGlsZE5vZGVzWzBdKSB7XG4gICAgICBtb3VudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG1vdW50Tm9kZS5jaGlsZE5vZGVzWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW91bnROb2RlLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cblxuICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChFdmVudHMuTU9VTlQsIG5vZGUpO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHJldHVybiBwYXJzZSh0aGlzLnN0cmluZ2lmeSgpKTtcbiAgfTtcblxuICAvKipcbiAgICogRGV0YWNoIHNwcml0ZSBmcm9tIHRoZSBET01cbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLnVubW91bnQgPSBmdW5jdGlvbiB1bm1vdW50ICgpIHtcbiAgICB0aGlzLm5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgVVJMcyBpbiBzcHJpdGUgYW5kIHVzYWdlIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRVcmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgLSBVUkxzIHdhcyB1cGRhdGVkLCBgZmFsc2VgIC0gc3ByaXRlIGlzIG5vdCBtb3VudGVkXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS51cGRhdGVVcmxzID0gZnVuY3Rpb24gdXBkYXRlVXJscyQxIChvbGRVcmwsIG5ld1VybCkge1xuICAgIGlmICghdGhpcy5pc01vdW50ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdXNhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmNvbmZpZy51c2FnZXNUb1VwZGF0ZSk7XG5cbiAgICB1cGRhdGVVcmxzKFxuICAgICAgdGhpcy5ub2RlLFxuICAgICAgdXNhZ2VzLFxuICAgICAgKChnZXRVcmxXaXRob3V0RnJhZ21lbnQob2xkVXJsKSkgKyBcIiNcIiksXG4gICAgICAoKGdldFVybFdpdGhvdXRGcmFnbWVudChuZXdVcmwpKSArIFwiI1wiKVxuICAgICk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQnJvd3NlclNwcml0ZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gIHJldHVybiBCcm93c2VyU3ByaXRlO1xufShTcHJpdGUpKTtcblxudmFyIHJlYWR5JDEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vKiFcbiAgKiBkb21yZWFkeSAoYykgRHVzdGluIERpYXogMjAxNCAtIExpY2Vuc2UgTUlUXG4gICovXG4hZnVuY3Rpb24gKG5hbWUsIGRlZmluaXRpb24pIHtcblxuICB7IG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpOyB9XG5cbn0oJ2RvbXJlYWR5JywgZnVuY3Rpb24gKCkge1xuXG4gIHZhciBmbnMgPSBbXSwgbGlzdGVuZXJcbiAgICAsIGRvYyA9IGRvY3VtZW50XG4gICAgLCBoYWNrID0gZG9jLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbFxuICAgICwgZG9tQ29udGVudExvYWRlZCA9ICdET01Db250ZW50TG9hZGVkJ1xuICAgICwgbG9hZGVkID0gKGhhY2sgPyAvXmxvYWRlZHxeYy8gOiAvXmxvYWRlZHxeaXxeYy8pLnRlc3QoZG9jLnJlYWR5U3RhdGUpO1xuXG5cbiAgaWYgKCFsb2FkZWQpXG4gIHsgZG9jLmFkZEV2ZW50TGlzdGVuZXIoZG9tQ29udGVudExvYWRlZCwgbGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoZG9tQ29udGVudExvYWRlZCwgbGlzdGVuZXIpO1xuICAgIGxvYWRlZCA9IDE7XG4gICAgd2hpbGUgKGxpc3RlbmVyID0gZm5zLnNoaWZ0KCkpIHsgbGlzdGVuZXIoKTsgfVxuICB9KTsgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICBsb2FkZWQgPyBzZXRUaW1lb3V0KGZuLCAwKSA6IGZucy5wdXNoKGZuKTtcbiAgfVxuXG59KTtcbn0pO1xuXG52YXIgc3ByaXRlTm9kZUlkID0gJ19fU1ZHX1NQUklURV9OT0RFX18nO1xudmFyIHNwcml0ZUdsb2JhbFZhck5hbWUgPSAnX19TVkdfU1BSSVRFX18nO1xudmFyIGlzU3ByaXRlRXhpc3RzID0gISF3aW5kb3dbc3ByaXRlR2xvYmFsVmFyTmFtZV07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzXG52YXIgc3ByaXRlO1xuXG5pZiAoaXNTcHJpdGVFeGlzdHMpIHtcbiAgc3ByaXRlID0gd2luZG93W3Nwcml0ZUdsb2JhbFZhck5hbWVdO1xufSBlbHNlIHtcbiAgc3ByaXRlID0gbmV3IEJyb3dzZXJTcHJpdGUoeyBhdHRyczogeyBpZDogc3ByaXRlTm9kZUlkIH0gfSk7XG4gIHdpbmRvd1tzcHJpdGVHbG9iYWxWYXJOYW1lXSA9IHNwcml0ZTtcbn1cblxudmFyIGxvYWRTcHJpdGUgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDaGVjayBmb3IgcGFnZSBhbHJlYWR5IGNvbnRhaW5zIHNwcml0ZSBub2RlXG4gICAqIElmIGZvdW5kIC0gYXR0YWNoIHRvIGFuZCByZXVzZSBpdCdzIGNvbnRlbnRcbiAgICogSWYgbm90IC0gcmVuZGVyIGFuZCBtb3VudCB0aGUgbmV3IHNwcml0ZVxuICAgKi9cbiAgdmFyIGV4aXN0aW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3ByaXRlTm9kZUlkKTtcblxuICBpZiAoZXhpc3RpbmcpIHtcbiAgICBzcHJpdGUuYXR0YWNoKGV4aXN0aW5nKTtcbiAgfSBlbHNlIHtcbiAgICBzcHJpdGUubW91bnQoZG9jdW1lbnQuYm9keSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmlmIChkb2N1bWVudC5ib2R5KSB7XG4gIGxvYWRTcHJpdGUoKTtcbn0gZWxzZSB7XG4gIHJlYWR5JDEobG9hZFNwcml0ZSk7XG59XG5cbnZhciBzcHJpdGUkMSA9IHNwcml0ZTtcblxucmV0dXJuIHNwcml0ZSQxO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanMiLCIvKiFcbldheXBvaW50cyAtIDQuMC4xXG5Db3B5cmlnaHQgwqkgMjAxMS0yMDE2IENhbGViIFRyb3VnaHRvblxuTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaHR0cHM6Ly9naXRodWIuY29tL2ltYWtld2VidGhpbmdzL3dheXBvaW50cy9ibG9iL21hc3Rlci9saWNlbnNlcy50eHRcbiovXG4hZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KG8pe2lmKCFvKXRocm93IG5ldyBFcnJvcihcIk5vIG9wdGlvbnMgcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yXCIpO2lmKCFvLmVsZW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiTm8gZWxlbWVudCBvcHRpb24gcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yXCIpO2lmKCFvLmhhbmRsZXIpdGhyb3cgbmV3IEVycm9yKFwiTm8gaGFuZGxlciBvcHRpb24gcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yXCIpO3RoaXMua2V5PVwid2F5cG9pbnQtXCIrZSx0aGlzLm9wdGlvbnM9dC5BZGFwdGVyLmV4dGVuZCh7fSx0LmRlZmF1bHRzLG8pLHRoaXMuZWxlbWVudD10aGlzLm9wdGlvbnMuZWxlbWVudCx0aGlzLmFkYXB0ZXI9bmV3IHQuQWRhcHRlcih0aGlzLmVsZW1lbnQpLHRoaXMuY2FsbGJhY2s9by5oYW5kbGVyLHRoaXMuYXhpcz10aGlzLm9wdGlvbnMuaG9yaXpvbnRhbD9cImhvcml6b250YWxcIjpcInZlcnRpY2FsXCIsdGhpcy5lbmFibGVkPXRoaXMub3B0aW9ucy5lbmFibGVkLHRoaXMudHJpZ2dlclBvaW50PW51bGwsdGhpcy5ncm91cD10Lkdyb3VwLmZpbmRPckNyZWF0ZSh7bmFtZTp0aGlzLm9wdGlvbnMuZ3JvdXAsYXhpczp0aGlzLmF4aXN9KSx0aGlzLmNvbnRleHQ9dC5Db250ZXh0LmZpbmRPckNyZWF0ZUJ5RWxlbWVudCh0aGlzLm9wdGlvbnMuY29udGV4dCksdC5vZmZzZXRBbGlhc2VzW3RoaXMub3B0aW9ucy5vZmZzZXRdJiYodGhpcy5vcHRpb25zLm9mZnNldD10Lm9mZnNldEFsaWFzZXNbdGhpcy5vcHRpb25zLm9mZnNldF0pLHRoaXMuZ3JvdXAuYWRkKHRoaXMpLHRoaXMuY29udGV4dC5hZGQodGhpcyksaVt0aGlzLmtleV09dGhpcyxlKz0xfXZhciBlPTAsaT17fTt0LnByb3RvdHlwZS5xdWV1ZVRyaWdnZXI9ZnVuY3Rpb24odCl7dGhpcy5ncm91cC5xdWV1ZVRyaWdnZXIodGhpcyx0KX0sdC5wcm90b3R5cGUudHJpZ2dlcj1mdW5jdGlvbih0KXt0aGlzLmVuYWJsZWQmJnRoaXMuY2FsbGJhY2smJnRoaXMuY2FsbGJhY2suYXBwbHkodGhpcyx0KX0sdC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuY29udGV4dC5yZW1vdmUodGhpcyksdGhpcy5ncm91cC5yZW1vdmUodGhpcyksZGVsZXRlIGlbdGhpcy5rZXldfSx0LnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5hYmxlZD0hMSx0aGlzfSx0LnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZXh0LnJlZnJlc2goKSx0aGlzLmVuYWJsZWQ9ITAsdGhpc30sdC5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdyb3VwLm5leHQodGhpcyl9LHQucHJvdG90eXBlLnByZXZpb3VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ3JvdXAucHJldmlvdXModGhpcyl9LHQuaW52b2tlQWxsPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO2Zvcih2YXIgbyBpbiBpKWUucHVzaChpW29dKTtmb3IodmFyIG49MCxyPWUubGVuZ3RoO3I+bjtuKyspZVtuXVt0XSgpfSx0LmRlc3Ryb3lBbGw9ZnVuY3Rpb24oKXt0Lmludm9rZUFsbChcImRlc3Ryb3lcIil9LHQuZGlzYWJsZUFsbD1mdW5jdGlvbigpe3QuaW52b2tlQWxsKFwiZGlzYWJsZVwiKX0sdC5lbmFibGVBbGw9ZnVuY3Rpb24oKXt0LkNvbnRleHQucmVmcmVzaEFsbCgpO2Zvcih2YXIgZSBpbiBpKWlbZV0uZW5hYmxlZD0hMDtyZXR1cm4gdGhpc30sdC5yZWZyZXNoQWxsPWZ1bmN0aW9uKCl7dC5Db250ZXh0LnJlZnJlc2hBbGwoKX0sdC52aWV3cG9ydEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuaW5uZXJIZWlnaHR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHR9LHQudmlld3BvcnRXaWR0aD1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGh9LHQuYWRhcHRlcnM9W10sdC5kZWZhdWx0cz17Y29udGV4dDp3aW5kb3csY29udGludW91czohMCxlbmFibGVkOiEwLGdyb3VwOlwiZGVmYXVsdFwiLGhvcml6b250YWw6ITEsb2Zmc2V0OjB9LHQub2Zmc2V0QWxpYXNlcz17XCJib3R0b20taW4tdmlld1wiOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGV4dC5pbm5lckhlaWdodCgpLXRoaXMuYWRhcHRlci5vdXRlckhlaWdodCgpfSxcInJpZ2h0LWluLXZpZXdcIjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRleHQuaW5uZXJXaWR0aCgpLXRoaXMuYWRhcHRlci5vdXRlcldpZHRoKCl9fSx3aW5kb3cuV2F5cG9pbnQ9dH0oKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQodCl7d2luZG93LnNldFRpbWVvdXQodCwxZTMvNjApfWZ1bmN0aW9uIGUodCl7dGhpcy5lbGVtZW50PXQsdGhpcy5BZGFwdGVyPW4uQWRhcHRlcix0aGlzLmFkYXB0ZXI9bmV3IHRoaXMuQWRhcHRlcih0KSx0aGlzLmtleT1cIndheXBvaW50LWNvbnRleHQtXCIraSx0aGlzLmRpZFNjcm9sbD0hMSx0aGlzLmRpZFJlc2l6ZT0hMSx0aGlzLm9sZFNjcm9sbD17eDp0aGlzLmFkYXB0ZXIuc2Nyb2xsTGVmdCgpLHk6dGhpcy5hZGFwdGVyLnNjcm9sbFRvcCgpfSx0aGlzLndheXBvaW50cz17dmVydGljYWw6e30saG9yaXpvbnRhbDp7fX0sdC53YXlwb2ludENvbnRleHRLZXk9dGhpcy5rZXksb1t0LndheXBvaW50Q29udGV4dEtleV09dGhpcyxpKz0xLG4ud2luZG93Q29udGV4dHx8KG4ud2luZG93Q29udGV4dD0hMCxuLndpbmRvd0NvbnRleHQ9bmV3IGUod2luZG93KSksdGhpcy5jcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyKCksdGhpcy5jcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyKCl9dmFyIGk9MCxvPXt9LG49d2luZG93LldheXBvaW50LHI9d2luZG93Lm9ubG9hZDtlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5vcHRpb25zLmhvcml6b250YWw/XCJob3Jpem9udGFsXCI6XCJ2ZXJ0aWNhbFwiO3RoaXMud2F5cG9pbnRzW2VdW3Qua2V5XT10LHRoaXMucmVmcmVzaCgpfSxlLnByb3RvdHlwZS5jaGVja0VtcHR5PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5BZGFwdGVyLmlzRW1wdHlPYmplY3QodGhpcy53YXlwb2ludHMuaG9yaXpvbnRhbCksZT10aGlzLkFkYXB0ZXIuaXNFbXB0eU9iamVjdCh0aGlzLndheXBvaW50cy52ZXJ0aWNhbCksaT10aGlzLmVsZW1lbnQ9PXRoaXMuZWxlbWVudC53aW5kb3c7dCYmZSYmIWkmJih0aGlzLmFkYXB0ZXIub2ZmKFwiLndheXBvaW50c1wiKSxkZWxldGUgb1t0aGlzLmtleV0pfSxlLnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2UuaGFuZGxlUmVzaXplKCksZS5kaWRSZXNpemU9ITF9dmFyIGU9dGhpczt0aGlzLmFkYXB0ZXIub24oXCJyZXNpemUud2F5cG9pbnRzXCIsZnVuY3Rpb24oKXtlLmRpZFJlc2l6ZXx8KGUuZGlkUmVzaXplPSEwLG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHQpKX0pfSxlLnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2UuaGFuZGxlU2Nyb2xsKCksZS5kaWRTY3JvbGw9ITF9dmFyIGU9dGhpczt0aGlzLmFkYXB0ZXIub24oXCJzY3JvbGwud2F5cG9pbnRzXCIsZnVuY3Rpb24oKXsoIWUuZGlkU2Nyb2xsfHxuLmlzVG91Y2gpJiYoZS5kaWRTY3JvbGw9ITAsbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodCkpfSl9LGUucHJvdG90eXBlLmhhbmRsZVJlc2l6ZT1mdW5jdGlvbigpe24uQ29udGV4dC5yZWZyZXNoQWxsKCl9LGUucHJvdG90eXBlLmhhbmRsZVNjcm9sbD1mdW5jdGlvbigpe3ZhciB0PXt9LGU9e2hvcml6b250YWw6e25ld1Njcm9sbDp0aGlzLmFkYXB0ZXIuc2Nyb2xsTGVmdCgpLG9sZFNjcm9sbDp0aGlzLm9sZFNjcm9sbC54LGZvcndhcmQ6XCJyaWdodFwiLGJhY2t3YXJkOlwibGVmdFwifSx2ZXJ0aWNhbDp7bmV3U2Nyb2xsOnRoaXMuYWRhcHRlci5zY3JvbGxUb3AoKSxvbGRTY3JvbGw6dGhpcy5vbGRTY3JvbGwueSxmb3J3YXJkOlwiZG93blwiLGJhY2t3YXJkOlwidXBcIn19O2Zvcih2YXIgaSBpbiBlKXt2YXIgbz1lW2ldLG49by5uZXdTY3JvbGw+by5vbGRTY3JvbGwscj1uP28uZm9yd2FyZDpvLmJhY2t3YXJkO2Zvcih2YXIgcyBpbiB0aGlzLndheXBvaW50c1tpXSl7dmFyIGE9dGhpcy53YXlwb2ludHNbaV1bc107aWYobnVsbCE9PWEudHJpZ2dlclBvaW50KXt2YXIgbD1vLm9sZFNjcm9sbDxhLnRyaWdnZXJQb2ludCxoPW8ubmV3U2Nyb2xsPj1hLnRyaWdnZXJQb2ludCxwPWwmJmgsdT0hbCYmIWg7KHB8fHUpJiYoYS5xdWV1ZVRyaWdnZXIociksdFthLmdyb3VwLmlkXT1hLmdyb3VwKX19fWZvcih2YXIgYyBpbiB0KXRbY10uZmx1c2hUcmlnZ2VycygpO3RoaXMub2xkU2Nyb2xsPXt4OmUuaG9yaXpvbnRhbC5uZXdTY3JvbGwseTplLnZlcnRpY2FsLm5ld1Njcm9sbH19LGUucHJvdG90eXBlLmlubmVySGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudD09dGhpcy5lbGVtZW50LndpbmRvdz9uLnZpZXdwb3J0SGVpZ2h0KCk6dGhpcy5hZGFwdGVyLmlubmVySGVpZ2h0KCl9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXtkZWxldGUgdGhpcy53YXlwb2ludHNbdC5heGlzXVt0LmtleV0sdGhpcy5jaGVja0VtcHR5KCl9LGUucHJvdG90eXBlLmlubmVyV2lkdGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50PT10aGlzLmVsZW1lbnQud2luZG93P24udmlld3BvcnRXaWR0aCgpOnRoaXMuYWRhcHRlci5pbm5lcldpZHRoKCl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgdD1bXTtmb3IodmFyIGUgaW4gdGhpcy53YXlwb2ludHMpZm9yKHZhciBpIGluIHRoaXMud2F5cG9pbnRzW2VdKXQucHVzaCh0aGlzLndheXBvaW50c1tlXVtpXSk7Zm9yKHZhciBvPTAsbj10Lmxlbmd0aDtuPm87bysrKXRbb10uZGVzdHJveSgpfSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLmVsZW1lbnQ9PXRoaXMuZWxlbWVudC53aW5kb3csaT1lP3ZvaWQgMDp0aGlzLmFkYXB0ZXIub2Zmc2V0KCksbz17fTt0aGlzLmhhbmRsZVNjcm9sbCgpLHQ9e2hvcml6b250YWw6e2NvbnRleHRPZmZzZXQ6ZT8wOmkubGVmdCxjb250ZXh0U2Nyb2xsOmU/MDp0aGlzLm9sZFNjcm9sbC54LGNvbnRleHREaW1lbnNpb246dGhpcy5pbm5lcldpZHRoKCksb2xkU2Nyb2xsOnRoaXMub2xkU2Nyb2xsLngsZm9yd2FyZDpcInJpZ2h0XCIsYmFja3dhcmQ6XCJsZWZ0XCIsb2Zmc2V0UHJvcDpcImxlZnRcIn0sdmVydGljYWw6e2NvbnRleHRPZmZzZXQ6ZT8wOmkudG9wLGNvbnRleHRTY3JvbGw6ZT8wOnRoaXMub2xkU2Nyb2xsLnksY29udGV4dERpbWVuc2lvbjp0aGlzLmlubmVySGVpZ2h0KCksb2xkU2Nyb2xsOnRoaXMub2xkU2Nyb2xsLnksZm9yd2FyZDpcImRvd25cIixiYWNrd2FyZDpcInVwXCIsb2Zmc2V0UHJvcDpcInRvcFwifX07Zm9yKHZhciByIGluIHQpe3ZhciBzPXRbcl07Zm9yKHZhciBhIGluIHRoaXMud2F5cG9pbnRzW3JdKXt2YXIgbCxoLHAsdSxjLGQ9dGhpcy53YXlwb2ludHNbcl1bYV0sZj1kLm9wdGlvbnMub2Zmc2V0LHc9ZC50cmlnZ2VyUG9pbnQseT0wLGc9bnVsbD09dztkLmVsZW1lbnQhPT1kLmVsZW1lbnQud2luZG93JiYoeT1kLmFkYXB0ZXIub2Zmc2V0KClbcy5vZmZzZXRQcm9wXSksXCJmdW5jdGlvblwiPT10eXBlb2YgZj9mPWYuYXBwbHkoZCk6XCJzdHJpbmdcIj09dHlwZW9mIGYmJihmPXBhcnNlRmxvYXQoZiksZC5vcHRpb25zLm9mZnNldC5pbmRleE9mKFwiJVwiKT4tMSYmKGY9TWF0aC5jZWlsKHMuY29udGV4dERpbWVuc2lvbipmLzEwMCkpKSxsPXMuY29udGV4dFNjcm9sbC1zLmNvbnRleHRPZmZzZXQsZC50cmlnZ2VyUG9pbnQ9TWF0aC5mbG9vcih5K2wtZiksaD13PHMub2xkU2Nyb2xsLHA9ZC50cmlnZ2VyUG9pbnQ+PXMub2xkU2Nyb2xsLHU9aCYmcCxjPSFoJiYhcCwhZyYmdT8oZC5xdWV1ZVRyaWdnZXIocy5iYWNrd2FyZCksb1tkLmdyb3VwLmlkXT1kLmdyb3VwKTohZyYmYz8oZC5xdWV1ZVRyaWdnZXIocy5mb3J3YXJkKSxvW2QuZ3JvdXAuaWRdPWQuZ3JvdXApOmcmJnMub2xkU2Nyb2xsPj1kLnRyaWdnZXJQb2ludCYmKGQucXVldWVUcmlnZ2VyKHMuZm9yd2FyZCksb1tkLmdyb3VwLmlkXT1kLmdyb3VwKX19cmV0dXJuIG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIG8pb1t0XS5mbHVzaFRyaWdnZXJzKCl9KSx0aGlzfSxlLmZpbmRPckNyZWF0ZUJ5RWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gZS5maW5kQnlFbGVtZW50KHQpfHxuZXcgZSh0KX0sZS5yZWZyZXNoQWxsPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIG8pb1t0XS5yZWZyZXNoKCl9LGUuZmluZEJ5RWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gb1t0LndheXBvaW50Q29udGV4dEtleV19LHdpbmRvdy5vbmxvYWQ9ZnVuY3Rpb24oKXtyJiZyKCksZS5yZWZyZXNoQWxsKCl9LG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKGUpe3ZhciBpPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQ7aS5jYWxsKHdpbmRvdyxlKX0sbi5Db250ZXh0PWV9KCksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQsZSl7cmV0dXJuIHQudHJpZ2dlclBvaW50LWUudHJpZ2dlclBvaW50fWZ1bmN0aW9uIGUodCxlKXtyZXR1cm4gZS50cmlnZ2VyUG9pbnQtdC50cmlnZ2VyUG9pbnR9ZnVuY3Rpb24gaSh0KXt0aGlzLm5hbWU9dC5uYW1lLHRoaXMuYXhpcz10LmF4aXMsdGhpcy5pZD10aGlzLm5hbWUrXCItXCIrdGhpcy5heGlzLHRoaXMud2F5cG9pbnRzPVtdLHRoaXMuY2xlYXJUcmlnZ2VyUXVldWVzKCksb1t0aGlzLmF4aXNdW3RoaXMubmFtZV09dGhpc312YXIgbz17dmVydGljYWw6e30saG9yaXpvbnRhbDp7fX0sbj13aW5kb3cuV2F5cG9pbnQ7aS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3RoaXMud2F5cG9pbnRzLnB1c2godCl9LGkucHJvdG90eXBlLmNsZWFyVHJpZ2dlclF1ZXVlcz1mdW5jdGlvbigpe3RoaXMudHJpZ2dlclF1ZXVlcz17dXA6W10sZG93bjpbXSxsZWZ0OltdLHJpZ2h0OltdfX0saS5wcm90b3R5cGUuZmx1c2hUcmlnZ2Vycz1mdW5jdGlvbigpe2Zvcih2YXIgaSBpbiB0aGlzLnRyaWdnZXJRdWV1ZXMpe3ZhciBvPXRoaXMudHJpZ2dlclF1ZXVlc1tpXSxuPVwidXBcIj09PWl8fFwibGVmdFwiPT09aTtvLnNvcnQobj9lOnQpO2Zvcih2YXIgcj0wLHM9by5sZW5ndGg7cz5yO3IrPTEpe3ZhciBhPW9bcl07KGEub3B0aW9ucy5jb250aW51b3VzfHxyPT09by5sZW5ndGgtMSkmJmEudHJpZ2dlcihbaV0pfX10aGlzLmNsZWFyVHJpZ2dlclF1ZXVlcygpfSxpLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKGUpe3RoaXMud2F5cG9pbnRzLnNvcnQodCk7dmFyIGk9bi5BZGFwdGVyLmluQXJyYXkoZSx0aGlzLndheXBvaW50cyksbz1pPT09dGhpcy53YXlwb2ludHMubGVuZ3RoLTE7cmV0dXJuIG8/bnVsbDp0aGlzLndheXBvaW50c1tpKzFdfSxpLnByb3RvdHlwZS5wcmV2aW91cz1mdW5jdGlvbihlKXt0aGlzLndheXBvaW50cy5zb3J0KHQpO3ZhciBpPW4uQWRhcHRlci5pbkFycmF5KGUsdGhpcy53YXlwb2ludHMpO3JldHVybiBpP3RoaXMud2F5cG9pbnRzW2ktMV06bnVsbH0saS5wcm90b3R5cGUucXVldWVUcmlnZ2VyPWZ1bmN0aW9uKHQsZSl7dGhpcy50cmlnZ2VyUXVldWVzW2VdLnB1c2godCl9LGkucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXt2YXIgZT1uLkFkYXB0ZXIuaW5BcnJheSh0LHRoaXMud2F5cG9pbnRzKTtlPi0xJiZ0aGlzLndheXBvaW50cy5zcGxpY2UoZSwxKX0saS5wcm90b3R5cGUuZmlyc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53YXlwb2ludHNbMF19LGkucHJvdG90eXBlLmxhc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53YXlwb2ludHNbdGhpcy53YXlwb2ludHMubGVuZ3RoLTFdfSxpLmZpbmRPckNyZWF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gb1t0LmF4aXNdW3QubmFtZV18fG5ldyBpKHQpfSxuLkdyb3VwPWl9KCksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQpe3RoaXMuJGVsZW1lbnQ9ZSh0KX12YXIgZT13aW5kb3cualF1ZXJ5LGk9d2luZG93LldheXBvaW50O2UuZWFjaChbXCJpbm5lckhlaWdodFwiLFwiaW5uZXJXaWR0aFwiLFwib2ZmXCIsXCJvZmZzZXRcIixcIm9uXCIsXCJvdXRlckhlaWdodFwiLFwib3V0ZXJXaWR0aFwiLFwic2Nyb2xsTGVmdFwiLFwic2Nyb2xsVG9wXCJdLGZ1bmN0aW9uKGUsaSl7dC5wcm90b3R5cGVbaV09ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiB0aGlzLiRlbGVtZW50W2ldLmFwcGx5KHRoaXMuJGVsZW1lbnQsdCl9fSksZS5lYWNoKFtcImV4dGVuZFwiLFwiaW5BcnJheVwiLFwiaXNFbXB0eU9iamVjdFwiXSxmdW5jdGlvbihpLG8pe3Rbb109ZVtvXX0pLGkuYWRhcHRlcnMucHVzaCh7bmFtZTpcImpxdWVyeVwiLEFkYXB0ZXI6dH0pLGkuQWRhcHRlcj10fSgpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaT1bXSxvPWFyZ3VtZW50c1swXTtyZXR1cm4gdC5pc0Z1bmN0aW9uKGFyZ3VtZW50c1swXSkmJihvPXQuZXh0ZW5kKHt9LGFyZ3VtZW50c1sxXSksby5oYW5kbGVyPWFyZ3VtZW50c1swXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49dC5leHRlbmQoe30sbyx7ZWxlbWVudDp0aGlzfSk7XCJzdHJpbmdcIj09dHlwZW9mIG4uY29udGV4dCYmKG4uY29udGV4dD10KHRoaXMpLmNsb3Nlc3Qobi5jb250ZXh0KVswXSksaS5wdXNoKG5ldyBlKG4pKX0pLGl9fXZhciBlPXdpbmRvdy5XYXlwb2ludDt3aW5kb3cualF1ZXJ5JiYod2luZG93LmpRdWVyeS5mbi53YXlwb2ludD10KHdpbmRvdy5qUXVlcnkpKSx3aW5kb3cuWmVwdG8mJih3aW5kb3cuWmVwdG8uZm4ud2F5cG9pbnQ9dCh3aW5kb3cuWmVwdG8pKX0oKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvd2F5cG9pbnRzL2xpYi9qcXVlcnkud2F5cG9pbnRzLm1pbi5qcyIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBEZXBlbmRlbmNpZXNcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgSG9tZVZpZXcgZnJvbSAnLi92aWV3cy9Ib21lVmlldyc7XG5cbmNvbnN0IFZpZXdOYW1lcyA9IHtcbiAgICBOb25lOiAnJyxcbiAgICBIb21lOiAnaG9tZSdcbn07XG5cbi8qKlxuICpcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQXBwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCB7XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQWNjZXNzb3JzXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBJbml0XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEFwcC5cbiAgICAgKiBAcGFyYW0ge2FueX0gdmlld05hbWVcbiAgICAgKiBAbWVtYmVyb2YgQXBwXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodmlld05hbWUgLCBjdXJyZW50TGFuZykge1xuICAgICAgICB0aGlzLl92aWV3TmFtZSA9IHZpZXdOYW1lO1xuICAgICAgICB0aGlzLl9jdXJyZW50TGFuZyA9IGN1cnJlbnRMYW5nO1xuICAgICAgICB0aGlzLl92aWV3SW5zdGFuY2UgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuaW5pdCgpO1xuXG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gTGlmZWN5Y2xlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBpbml0KCkge1xuICAgICAgICAvLyBJbml0IGN1cnJlbnQgdmlldyBiYXNlZCBvbiAnZGF0YS12aWV3JyBzdHJpbmcgaW4gaHRtbCA8Ym9keT4gdGFnXG4gICAgICAgIHRoaXMuX3ZpZXdJbnN0YW5jZTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMuX3ZpZXdOYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFZpZXdOYW1lcy5Ob25lOlxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgVmlld05hbWVzLkhvbWU6XG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld0luc3RhbmNlID0gbmV3IEhvbWVWaWV3KHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tBcHBdIEludmFsaWQgdmlldyBuYW1lIHJlY2VpdmVkOicsIHRoaXMuX3ZpZXdOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fdmlld0luc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl92aWV3SW5zdGFuY2UuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGlzLmlzTW9iaWxlID0gdGhpcy5pc0pzLmRlc2t0b3AoKTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBFdmVudHNcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGFkZExpc3RlbmVycygpIHt9XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBIYW5kbGVyIGV2ZW50c1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9BcHAuanMiLCIvKipcbiAqIFBvbHlmaWxsc1xuICogLS0tLS0tLS0tXG4gKiBodHRwczovL2JhYmVsanMuaW8vZG9jcy91c2FnZS9wb2x5ZmlsbC9cbiAqXG4gKi9cbmltcG9ydCAnQGJhYmVsL3BvbHlmaWxsJztcbnJlcXVpcmUoJ3Ntb290aHNjcm9sbC1wb2x5ZmlsbCcpLnBvbHlmaWxsKCk7XG5cbi8vIENTU1xuLy8gaW1wb3J0ICcuLi9jc3MvbWFpbi5zY3NzJztcblxuLy8gU1ZHIFNwcml0ZXNoZWV0XG5pbXBvcnQgJy4vdXRpbHMvc3ZnJztcblxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cbmNvbnN0IGluaXRBcHAgPSAoKSA9PiB7XG4gICAgLy8gRXh0cmFjdCBkYXRhIGZyb20gRE9NXG4gICAgY29uc3QgaHRtbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKTtcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuICAgIGNvbnN0IGN1cnJlbnRMYW5nID0gaHRtbC5sYW5nO1xuICAgIC8vY29uc3QgbGFuZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsbmcnKS52YWx1ZTtcbiAgICBjb25zdCB2aWV3TmFtZSA9IGJvZHkuZ2V0QXR0cmlidXRlKCdkYXRhLXZpZXcnKTtcbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKHZpZXdOYW1lLCBjdXJyZW50TGFuZyk7XG59O1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdEFwcCwgZmFsc2UpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9tYWluLmpzIiwiLyoqXHJcbiAqIFNWRyBMb2FkZXJcclxuICogXHJcbiAqIFRoaXMgd2lsbCBpbmplY3QgYW4gU1ZHIHNwcml0ZSBhdCB0aGUgdG9wIG9mIHRoZSBIVE1MXHJcbiAqIGRvY3VtZW50IGF0IHJ1bnRpbWUuIFRoaXMgd2F5IHdlIGNhbiB1c2UgdGhlIGB4bGluazpocmVmYFxyXG4gKiBzeW50YXggZWl0aGVyIGluIG5vcm1hbCBIVE1MIG9yIGluIEpTIChWdWUgb3IgUmVhY3QgY29tcG9uZW50cykuXHJcbiAqIFxyXG4gKiBFeGFtcGxlOlxyXG4gKiBcclxuICogYGBgaHRtbFxyXG4gKiAgPHN2Zz5cclxuICogICAgICA8dXNlIHhsaW5rOmhyZWY9XCIjdHdpdHRlclwiPjwvdXNlPlxyXG4gKiAgPC9zdmc+XHJcbiAqIGBgYFxyXG4gKiBcclxuICogV2hlcmUgYCN0d2l0dGVyYCB3b3VsZCBjb3JyZXNwb25kIHRvIHRoZSBmaWxlIG5hbWUgb25cclxuICogZGlzayAoZXg6IGB0d2l0dGVyLnN2Z2ApIHdoZW4gaW1wb3J0ZWQgYXMgYSBtb2R1bGUgaW4gSmF2YVNjcmlwdC9XZWJwYWNrLlxyXG4gKiBcclxuICogV2hhdCBpcyBoYXBwZW5pbmcgaGVyZT9cclxuICogXHJcbiAqIDEuIFdlIGFyZSB1c2luZyByZXF1aXJlLmNvbnRleHQgdG8gZ2VuZXJhdGUgYSBsaXN0IG9mIFNWRyBmaWxlcyBpbiB0aGUgYXNzZXRzIGZvbGRlci5cclxuICogMi4gV2UgdGhlbiBpdGVyYXRlIG92ZXIgdGhpcyBsaXN0IGFuZCBsb2FkIGFsbCB0aGUgZmlsZXMgdXNpbmcgdGhlIHN2Zy1zcHJpdGUgbG9hZGVyLlxyXG4gKiAzLiBUaGUgc3ZnLXNwcml0ZSBsb2FkZXIgdGhlbiBnZW5lcmF0ZXMgdGhlIHNwcml0ZSBzaGVldCBhbmQgaW5qZWN0cyBpdCBpbnRvIERPTSBvbiBydW4tdGltZS4gU2ltaWxhciB0byBob3cgc3R5bGUtbG9hZGVyIHdvcmtzLlxyXG4gKiBcclxuICogaHR0cDovL3ZhcnVuLmNhL2ljb24tY29tcG9uZW50L1xyXG4gKi9cclxuY29uc3QgZmlsZXMgPSByZXF1aXJlLmNvbnRleHQoJyFzdmctc3ByaXRlLWxvYWRlciEuLy4uLy4uL3N0YXRpYy9pbWFnZXMvc3ZnJywgZmFsc2UsIC8uKlxcLnN2ZyQvKTtcclxuZmlsZXMua2V5cygpLmZvckVhY2goZmlsZXMpO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3V0aWxzL3N2Zy5qcyIsImltcG9ydCBBcHAgZnJvbSAnLi4vQXBwJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2guZGVib3VuY2UnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCAnanF1ZXJ5LXZhbGlkYXRpb24nO1xuaW1wb3J0ICd3YXlwb2ludHMvbGliL2pxdWVyeS53YXlwb2ludHMubWluLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG9tZVZpZXcge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgSG9tZVZpZXcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FwcH0gYXBwXG4gICAgICogQG1lbWJlcm9mIEhvbWVWaWV3XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIExpZmVjeWNsZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcblxuXG4gICAgICAgIC8vIHZhciB3YXlwb2ludCA9IG5ldyBXYXlwb2ludCh7XG4gICAgICAgIC8vICAgICBlbGVtZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVhZGVyV2F5cG9pbnQnKSxcbiAgICAgICAgLy8gICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgICAvLyAgICAgICAgIHZhciBiYW5uZXJWaWRlb092ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFubmVyVmlkZW9PdmVybGF5Jyk7XG4gICAgICAgIC8vICAgICAgICAgdmFyIGJhbm5lckxvZ29IID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jhbm5lckxvZ29IJyk7XG4gICAgICAgIC8vICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAnZG93bicpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgYmFubmVyVmlkZW9PdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICAvLyAgICAgICAgICAgICBiYW5uZXJMb2dvSC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgLy8gICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSAndXAnKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGJhbm5lclZpZGVvT3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgYmFubmVyTG9nb0guY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBFdmVudHNcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGFkZExpc3RlbmVycygpIHtcblxuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEV2ZW50IEhhbmRsZXJzXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy92aWV3cy9Ib21lVmlldy5qcyIsInZhciBtYXAgPSB7XG5cdFwiLi9pY29uLWRyaWJibGUuc3ZnXCI6IFwiLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcvaWNvbi1kcmliYmxlLnN2Z1wiLFxuXHRcIi4vaWNvbi1pbnN0YWdyYW0uc3ZnXCI6IFwiLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcvaWNvbi1pbnN0YWdyYW0uc3ZnXCIsXG5cdFwiLi9pY29uLWxpbmtlZGluLnN2Z1wiOiBcIi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9yZXNvdXJjZXMvYXNzZXRzL3N0YXRpYy9pbWFnZXMvc3ZnL2ljb24tbGlua2VkaW4uc3ZnXCIsXG5cdFwiLi9pY29uLXBvZ28uc3ZnXCI6IFwiLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcvaWNvbi1wb2dvLnN2Z1wiLFxuXHRcIi4vbGluZS5zdmdcIjogXCIuL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2Zy9saW5lLnN2Z1wiXG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIik7XG5cdHJldHVybiBpZDtcbn07XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL3Jlc291cmNlcy9hc3NldHMvc3RhdGljL2ltYWdlcy9zdmcgLi8hLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvbGliL2xvYWRlci5qcyEuLyAuKlxcXFwuc3ZnJFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2ZyBub25yZWN1cnNpdmUgLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvbGliL2xvYWRlci5qcyAuKlxcLnN2ZyRcbi8vIG1vZHVsZSBpZCA9IC4vcmVzb3VyY2VzL2Fzc2V0cy9zdGF0aWMvaW1hZ2VzL3N2ZyAuLyEuL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vIC4qXFwuc3ZnJFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9